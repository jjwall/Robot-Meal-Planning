!function(t){var e={};function o(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)o.d(n,s,function(e){return t[e]}.bind(null,s));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],flow_blocks:["up","down","left","right"]}},function(t,e,o){"use strict";o.r(e);var n,s,a=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.sliders=t&&t.sliders||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),i=o(0),r=function(){function t(t,e,o,n,s,a){this.GameState=t,this.X=e,this.Y=o,this.H=n,this.W=s,this.Color=a,this.gameState=t,this.x=e,this.y=o,this.h=n,this.w=s,this.color=a}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(n||(n={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(s||(s={}));var c=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(e,o)};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),h=function(t){function e(e,o,s,a,i,r,c,h,l){var u=t.call(this,e,o,s,a,i,h)||this;switch(u.units=r,u.callCount=c,u.mouseDown=!0,u.set=!1,u.type=l,u.image=new Image,l){case n.Start:u.image.src="data/textures/StartBlock.png";break;case n.Move:u.image.src="data/textures/MoveBlock.png";break;case n.Angle:u.image.src="data/textures/AngleBlock.png";break;case n.Thread:u.image.src="data/textures/ThreadBlock.png"}return u.gameState.blocks.push(u),u}return c(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y)},e}(r),l=function(t){function e(e,o,s,a,i,r,c){var h=t.call(this,e,o,s,a,i,r)||this;switch(h.mouseDown=!1,h.type=c,h.image=new Image,h.units=0,h.callCount=0,c){case n.Start:h.image.src="data/textures/StartBlock.png";break;case n.Move:h.image.src="data/textures/MoveBlock.png";break;case n.Angle:h.image.src="data/textures/AngleBlock.png";break;case n.Thread:h.image.src="data/textures/ThreadBlock.png"}return h.gameState.blocks.push(h),h}return c(e,t),e.prototype.update=function(){var t=this;this.mouseDown&&(this.mouseDown=!1,this.gameState.sliders.forEach(function(e){e.type===t.type&&(t.callCount=Math.round(e.value*e.maxUnits/e.baseUnits),t.units=e.baseUnits)}),new h(this.gameState,this.x,this.y,this.h,this.w,this.units,this.callCount,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y)},e}(r),u=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(e,o)};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),m=function(t){function e(e,o,n,a,i,r,c){var h=t.call(this,e,o,n,a,i,r)||this;switch(h.gameState=e,h.type=c,h.mouseDown=!0,h.set=!1,h.image=new Image,c){case s.Up:h.image.src="data/textures/UpArrow.png";break;case s.Down:h.image.src="data/textures/DownArrow.png";break;case s.Left:h.image.src="data/textures/LeftArrow.png";break;case s.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return u(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),f=function(t){function e(e,o,n,a,i,r,c){var h=t.call(this,e,o,n,a,i,r)||this;switch(h.type=c,h.mouseDown=!1,h.image=new Image,c){case s.Up:h.image.src="data/textures/UpArrow.png";break;case s.Down:h.image.src="data/textures/DownArrow.png";break;case s.Left:h.image.src="data/textures/LeftArrow.png";break;case s.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return u(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new m(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),p=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(e,o)};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),g=function(t){function e(e,o,a,i,r,c,h,l){var u=t.call(this,e,o,a,i,r,l)||this;return u.r=c,u.c=h,u.commandType=n.Empty,u.flowType=s.Empty,u.gameState.blocks.push(u),u}return p(e,t),e.prototype.update=function(){var t=this;this.gameState.blocks.forEach(function(e){(e instanceof h||e instanceof m)&&!1===e.mouseDown&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.commandType===n.Empty&&e instanceof h?(e.x=t.x,e.y=t.y,e.set=!0,t.commandType=e.type,t.units=e.units,t.callCount=e.callCount,t.currentCallCount=e.callCount):t.flowType===s.Empty&&e instanceof m&&(e.x=t.x,e.y=t.y,e.set=!0,t.flowType=e.type))})},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r);function d(t,e){var o,a;switch(e.currentCallCount=e.callCount,e.flowType){case s.Up:o=e.r-1,a=e.c;break;case s.Down:o=e.r+1,a=e.c;break;case s.Right:a=e.c+1,o=e.r;break;case s.Left:a=e.c-1,o=e.r}t.blocks.forEach(function(e){if(e instanceof g&&e.r===o&&e.c===a&&e.commandType!==n.Empty&&e.flowType!==s.Empty)switch(e.commandType){case n.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):d(t,e)}(t,e)},t.nextStack.push(e);break;case n.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):d(t,e)}(t,e)},t.nextStack.push(e);break;case n.Start:e.call=function(){return function(t,e){console.log("start"),d(t,e)}(t,e)},t.nextStack.push(e)}})}var w=function(){function t(t,e,o,n,s,a){void 0===a&&(a=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=n,this.snapAmount=a,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=s,this.barH=75,this.barW=10,this.barX=e,this.barY=o,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=o+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH,console.log(Math.round(this.value*this.maxUnits))}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),y=new a;!function(t,e,o){for(var a=5,i=5,r=0,c=0;c<e.command_palette.block_height;c++){for(var h=0;h<e.command_palette.block_width;h++)new g(t,i,a,50,50,c,h,o),i+=55;a+=55,r=i,i=5}a+=20;for(var u=0;u<e.command_blocks.length;u++){switch(e.command_blocks[u]){case"start":new l(t,i,a,50,50,"thistle",n.Start);break;case"move":new l(t,i,a,50,50,"thistle",n.Move);break;case"angle":new l(t,i,a,50,50,"thistle",n.Angle);break;case"thread":new l(t,i,a,50,50,"thistle",n.Thread);break;case"laser":new l(t,i,a,50,50,"green",n.Laser);break;case"scan":new l(t,i,a,50,50,"darkblue",n.Scan);break;case"grapple":new l(t,i,a,50,50,"maroon",n.Grapple)}i+=55}for(i=r+20,a=5,u=0;u<e.flow_blocks.length;u++){switch(e.flow_blocks[u]){case"up":new f(t,i,a,50,50,"yellow",s.Up);break;case"left":new f(t,i,a,50,50,"yellow",s.Left);break;case"right":new f(t,i,a,50,50,"yellow",s.Right);break;case"down":new f(t,i,a,50,50,"yellow",s.Down)}a+=55}}(y,i,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof h&&t.commandControl||e instanceof l&&t.commandControl||e instanceof m&&t.flowControl||e instanceof f&&t.flowControl?e.mouseDown=!0:e instanceof g&&(t.commandControl?e.commandType=n.Empty:t.flowControl&&(e.flowType=s.Empty)))}),t.sliders.forEach(function(e){t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0)})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof h||t instanceof m)&&t.mouseDown&&(t.mouseDown=!1)}),t.sliders.forEach(function(t){t.mouseDown=!1})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning||(t.programRunning=!0,function(t,e){t.blocks.forEach(function(e){e instanceof g&&e.commandType===n.Start&&e.flowType!==s.Empty&&d(t,e)})}(t)))}}(y),y.sliders.push(new w(y,80,365,100,n.Move)),y.sliders.push(new w(y,130,365,360,n.Angle,8)),setInterval(function(){y.blocks.forEach(function(t){t.update()}),y.sliders.forEach(function(t){t.update()}),y.ctx.clearRect(0,0,y.canvas.width,y.canvas.height),y.ctx.beginPath(),y.sliders.forEach(function(t){t.draw()}),y.blocks.forEach(function(t){t instanceof m||t.draw()}),y.blocks.forEach(function(t){t instanceof m&&t.draw()}),y.ctx.stroke();var t=y.nextStack;y.nextStack=[],t.length>0?t.forEach(function(t){t.currentCallCount>0?(t.call(),y.nextStack.push(t)):t.call()}):y.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,