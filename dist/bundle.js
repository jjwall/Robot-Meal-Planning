!function(t){var e={};function a(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(s,n,function(e){return t[e]}.bind(null,n));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle","thread"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var s,n,i=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.userInterfaces=t&&t.userInterfaces||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),o=a(0),r=function(){function t(t,e,a,s,n,i){this.GameState=t,this.X=e,this.Y=a,this.H=s,this.W=n,this.Color=i,this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=n,this.color=i}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(s||(s={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(n||(n={}));var c=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),h=function(t){function e(e,a,i,o,r,c,h,l){var u=t.call(this,e,a,i,o,r,l)||this;return u.r=c,u.c=h,u.flowType=n.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,callCount:0,type:s.Empty},u}return c(e,t),e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r),l=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),u=function(t){function e(e,a,n,i,o,r,c,h,l,u){var m=t.call(this,e,a,n,i,o,l)||this;switch(m.baseUnits=r,m.callCount=c,m.totalUnits=h,m.mouseDown=!0,m.set=!1,m.type=u,m.image=new Image,u){case s.Start:m.image.src="data/textures/StartBlock.png";break;case s.Move:m.image.src="data/textures/MoveBlock.png";break;case s.Angle:m.image.src="data/textures/AngleBlock.png";break;case s.Thread:m.image.src="data/textures/ThreadBlock.png"}return m.gameState.blocks.push(m),m}return l(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.commandData.type===s.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.commandData.type=t.type,e.commandData.baseUnits=t.baseUnits,e.commandData.callCount=t.callCount,e.commandData.totalUnits=t.totalUnits,e.currentCallCount=t.callCount)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),m=function(t){function e(e,a,n,i,o,r,c){var h=t.call(this,e,a,n,i,o,r)||this;switch(h.updateData=function(t,e,a){h.callCount=t,h.baseUnits=e,h.totalUnits=a},h.mouseDown=!1,h.type=c,h.image=new Image,h.baseUnits=0,h.callCount=0,h.totalUnits=0,c){case s.Start:h.image.src="data/textures/StartBlock.png";break;case s.Move:h.image.src="data/textures/MoveBlock.png";break;case s.Angle:h.image.src="data/textures/AngleBlock.png";break;case s.Thread:h.image.src="data/textures/ThreadBlock.png"}return h.gameState.blocks.push(h),h}return l(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new u(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.totalUnits,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),p=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),f=function(t){function e(e,a,s,i,o,r,c){var h=t.call(this,e,a,s,i,o,r)||this;switch(h.gameState=e,h.type=c,h.mouseDown=!0,h.set=!1,h.image=new Image,c){case n.Up:h.image.src="data/textures/UpArrow.png";break;case n.Down:h.image.src="data/textures/DownArrow.png";break;case n.Left:h.image.src="data/textures/LeftArrow.png";break;case n.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return p(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.flowType===n.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.flowType=t.type)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),g=function(t){function e(e,a,s,i,o,r,c){var h=t.call(this,e,a,s,i,o,r)||this;switch(h.type=c,h.mouseDown=!1,h.image=new Image,c){case n.Up:h.image.src="data/textures/UpArrow.png";break;case n.Down:h.image.src="data/textures/DownArrow.png";break;case n.Left:h.image.src="data/textures/LeftArrow.png";break;case n.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return p(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new f(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),d=function(){function t(t,e,a,s,n,i,o){void 0===o&&(o=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=s,this.snapAmount=o,this.updateDataCallBack=i,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=n,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount;var r=Math.round(this.value*this.maxUnits/this.baseUnits);this.totalUnits=r*this.baseUnits,this.gameState.userInterfaces.push(this),this.updateDataCallBack(r,this.baseUnits,this.totalUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH;var e=Math.round(this.value*this.maxUnits/this.baseUnits);this.totalUnits=e*this.baseUnits,this.updateDataCallBack(e,this.baseUnits,this.totalUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),w=function(){function t(t,e,a,s,n,i){this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=n,this.threads=1,this.updateDataCallBack=i,this.mouseDown=!1,this.gameState.userInterfaces.push(this),this.updateDataCallBack(0,1,this.threads)}return t.prototype.recalculateExistingThreadCounts=function(){var t=[],e=[];this.gameState.blocks.forEach(function(a){a instanceof u?a.type===s.Start&&t.push(a):a instanceof h&&a.commandData.type===s.Start&&e.push(a)}),t.sort(function(t,e){return t.totalUnits>e.totalUnits?1:e.totalUnits>t.totalUnits?-1:0}),e.sort(function(t,e){return t.commandData.totalUnits>e.commandData.totalUnits?1:e.commandData.totalUnits>t.commandData.totalUnits?-1:0});for(var a=0;a<t.length;a++)a+1<t[a].totalUnits&&t[a].totalUnits--;for(a=0;a<e.length;a++)a+1<e[a].commandData.totalUnits&&e[a].commandData.totalUnits--},t.prototype.mouseUp=function(){var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,this.threads),this.recalculateExistingThreadCounts()},t.prototype.update=function(){if(this.mouseDown){this.mouseDown=!1;var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,this.threads)}},t.prototype.draw=function(){},t}(),y=function(){function t(t,e,a,s){this.gameState=t,this.minusX=e,this.minusY=a,this.minusH=10,this.minusW=15,this.plusX=e+25,this.plusY=a,this.plusH=10,this.plusW=15,this.updateDataCallBack=s,this.color="purple",this.mouseDown=!1,this.mouseDownMinus=!1,this.mouseDownPlus=!1,this.targetThread=1,this.updateDataCallBack(0,1,this.targetThread),this.gameState.userInterfaces.push(this)}return t.prototype.update=function(){this.mouseDownPlus?(this.mouseDownPlus=!1,this.mouseDown=!1,this.targetThread++,this.updateDataCallBack(0,1,this.targetThread)):this.mouseDownMinus&&(this.mouseDownMinus=!1,this.mouseDown=!1,this.targetThread>1&&(this.targetThread--,this.updateDataCallBack(0,1,this.targetThread))),this.mouseDown||(this.mouseDownMinus=!1,this.mouseDownPlus=!1)},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.minusX,this.minusY,this.minusW,this.minusH),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.plusX,this.plusY,this.plusW,this.plusH),this.gameState.ctx.fillStyle="thistle",this.gameState.ctx.font="17px Arial",this.gameState.ctx.fillText("-",this.minusX+this.minusW/3,this.minusY+this.minusH),this.gameState.ctx.fillText("+",this.plusX+this.plusW/4-1,this.plusY+this.plusH+1)},t}();function x(t,e,a){t.blocks.forEach(function(a){a instanceof h&&a.commandData.type===s.Start&&a.commandData.totalUnits===e&&a.flowType!==n.Empty&&b(t,a)}),void 0!==a&&(console.log("thread"),b(t,a))}function b(t,e){var a,i;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case n.Up:a=e.r-1,i=e.c;break;case n.Down:a=e.r+1,i=e.c;break;case n.Right:i=e.c+1,a=e.r;break;case n.Left:i=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof h&&e.r===a&&e.c===i&&e.commandData.type!==s.Empty&&e.flowType!==n.Empty)switch(e.commandData.type){case s.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Start:e.call=function(){return function(t,e){console.log("start"),b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Thread:e.call=function(){return x(t,e.commandData.totalUnits,e)},t.nextStack.push(e)}})}var S=new i;!function(t,e,a){for(var i=5,o=5,r=0,c=e.command_palette.block_height,l=e.command_palette.block_width,u=0;u<c;u++){for(var p=0;p<l;p++)new h(t,o,i,50,50,u,p,a),o+=55;i+=55,r=o,o=5}i+=20;for(var f=0;f<e.command_blocks.length;f++){switch(e.command_blocks[f]){case"start":var x=new m(t,o,i,50,50,"thistle",s.Start);new w(t,x.x,x.y,x.h,x.w,x.updateData);break;case"move":var b=new m(t,o,i,50,50,"thistle",s.Move);new d(t,o+20,i+60,100,s.Move,b.updateData);break;case"angle":var S=new m(t,o,i,50,50,"thistle",s.Angle);new d(t,o+20,i+60,360,s.Angle,S.updateData,8);break;case"thread":var k=new m(t,o,i,50,50,"thistle",s.Thread);new y(t,175,360,k.updateData);break;case"laser":new m(t,o,i,50,50,"green",s.Laser);break;case"scan":new m(t,o,i,50,50,"darkblue",s.Scan);break;case"grapple":new m(t,o,i,50,50,"maroon",s.Grapple)}o+=55}for(o=r+20,i=5,f=0;f<e.flow_blocks.length;f++){switch(e.flow_blocks[f]){case"up":new g(t,o,i,50,50,"yellow",n.Up);break;case"left":new g(t,o,i,50,50,"yellow",n.Left);break;case"right":new g(t,o,i,50,50,"yellow",n.Right);break;case"down":new g(t,o,i,50,50,"yellow",n.Down)}i+=55}}(S,o,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof u&&t.commandControl||e instanceof m&&t.commandControl||e instanceof f&&t.flowControl||e instanceof g&&t.flowControl?e.mouseDown=!0:e instanceof h&&(t.commandControl?e.commandData.type=s.Empty:t.flowControl&&(e.flowType=n.Empty)))}),t.userInterfaces.forEach(function(e){e instanceof d&&t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0),e instanceof w&&t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e.mouseDown=!0),e instanceof y&&(t.mouseY>e.plusY&&t.mouseY<e.plusY+e.plusH&&t.mouseX>e.plusX&&t.mouseX<e.plusX+e.plusW&&(e.mouseDown=!0,e.mouseDownPlus=!0),t.mouseY>e.minusY&&t.mouseY<e.minusY+e.minusH&&t.mouseX>e.minusH&&t.mouseX<e.minusX+e.minusW&&(e.mouseDown=!0,e.mouseDownMinus=!0))})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof u||t instanceof f)&&t.mouseDown&&(t.mouseDown=!1,t.mouseUp())}),t.userInterfaces.forEach(function(t){t.mouseDown=!1,t instanceof w&&t.mouseUp()})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning?(t.programRunning=!1,t.nextStack=[]):(t.programRunning=!0,x(t,1)))}}(S),setInterval(function(){S.blocks.forEach(function(t){t.update()}),S.userInterfaces.forEach(function(t){t.update()}),S.ctx.clearRect(0,0,S.canvas.width,S.canvas.height),S.ctx.beginPath(),S.userInterfaces.forEach(function(t){t.draw()}),S.blocks.forEach(function(t){t instanceof f||t.draw()}),S.blocks.forEach(function(t){t instanceof f&&t.draw()}),S.ctx.stroke();var t=S.nextStack;S.nextStack=[],t.length>0&&S.programRunning?t.forEach(function(t){t.currentCallCount>0?(t.call(),S.nextStack.push(t)):t.call()}):S.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,