!function(t){var e={};function a(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=t,a.c=e,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)a.d(n,s,function(e){return t[e]}.bind(null,s));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var n,s,o=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.userInterfaces=t&&t.userInterfaces||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),i=a(0),r=function(){function t(t,e,a,n,s,o){this.GameState=t,this.X=e,this.Y=a,this.H=n,this.W=s,this.Color=o,this.gameState=t,this.x=e,this.y=a,this.h=n,this.w=s,this.color=o}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(n||(n={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(s||(s={}));var c=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),h=function(t){function e(e,a,o,i,r,c,h,l){var u=t.call(this,e,a,o,i,r,l)||this;return u.r=c,u.c=h,u.flowType=s.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,callCount:0,type:n.Empty},u}return c(e,t),e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r),l=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),u=function(t){function e(e,a,s,o,i,r,c,h,l){var u=t.call(this,e,a,s,o,i,h)||this;switch(u.baseUnits=r,u.callCount=c,u.totalUnits=u.baseUnits*u.callCount,u.mouseDown=!0,u.set=!1,u.type=l,u.image=new Image,l){case n.Start:u.image.src="data/textures/StartBlock.png";break;case n.Move:u.image.src="data/textures/MoveBlock.png";break;case n.Angle:u.image.src="data/textures/AngleBlock.png";break;case n.Thread:u.image.src="data/textures/ThreadBlock.png"}return u.gameState.blocks.push(u),u}return l(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.commandData.type===n.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.commandData.type=t.type,e.commandData.baseUnits=t.baseUnits,e.commandData.callCount=t.callCount,e.commandData.totalUnits=t.totalUnits,e.currentCallCount=t.callCount)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),m=function(t){function e(e,a,s,o,i,r,c){var h=t.call(this,e,a,s,o,i,r)||this;switch(h.updateData=function(t,e){h.callCount=t,h.baseUnits=e,h.totalUnits=h.baseUnits*h.callCount},h.mouseDown=!1,h.type=c,h.image=new Image,h.baseUnits=0,h.callCount=0,h.totalUnits=0,c){case n.Start:h.image.src="data/textures/StartBlock.png";break;case n.Move:h.image.src="data/textures/MoveBlock.png";break;case n.Angle:h.image.src="data/textures/AngleBlock.png";break;case n.Thread:h.image.src="data/textures/ThreadBlock.png"}return h.gameState.blocks.push(h),h}return l(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new u(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),f=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),p=function(t){function e(e,a,n,o,i,r,c){var h=t.call(this,e,a,n,o,i,r)||this;switch(h.gameState=e,h.type=c,h.mouseDown=!0,h.set=!1,h.image=new Image,c){case s.Up:h.image.src="data/textures/UpArrow.png";break;case s.Down:h.image.src="data/textures/DownArrow.png";break;case s.Left:h.image.src="data/textures/LeftArrow.png";break;case s.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return f(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.flowType===s.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.flowType=t.type)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),g=function(t){function e(e,a,n,o,i,r,c){var h=t.call(this,e,a,n,o,i,r)||this;switch(h.type=c,h.mouseDown=!1,h.image=new Image,c){case s.Up:h.image.src="data/textures/UpArrow.png";break;case s.Down:h.image.src="data/textures/DownArrow.png";break;case s.Left:h.image.src="data/textures/LeftArrow.png";break;case s.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return f(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new p(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),d=function(){function t(t,e,a,n,s,o,i){void 0===i&&(i=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=n,this.snapAmount=i,this.updateDataCallBack=o,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=s,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.gameState.userInterfaces.push(this);var r=Math.round(this.value*this.maxUnits/this.baseUnits);this.updateDataCallBack(r,this.baseUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH;var e=Math.round(this.value*this.maxUnits/this.baseUnits);this.updateDataCallBack(e,this.baseUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),w=function(){function t(t,e,a,n,s,o,i){this.gameState=t,this.x=e,this.y=a,this.h=n,this.w=s,this.maxUnits=o,this.threads=1,this.baseUnits=1,this.updateDataCallBack=i,this.mouseDown=!1,this.gameState.userInterfaces.push(this),this.updateDataCallBack(this.threads,this.baseUnits)}return t.prototype.recalculateExistingThreadCounts=function(){var t=[],e=[];this.gameState.blocks.forEach(function(a){a instanceof u?a.type===n.Start&&t.push(a):a instanceof h&&a.commandData.type===n.Start&&e.push(a)}),t.sort(function(t,e){return t.totalUnits>e.totalUnits?1:e.totalUnits>t.totalUnits?-1:0}),e.sort(function(t,e){return t.commandData.totalUnits>e.commandData.totalUnits?1:e.commandData.totalUnits>t.commandData.totalUnits?-1:0});for(var a=0;a<t.length;a++)a+1<t[a].totalUnits&&t[a].totalUnits--;for(a=0;a<e.length;a++)a+1<e[a].commandData.totalUnits&&e[a].commandData.totalUnits--},t.prototype.mouseUp=function(){var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===n.Start&&t++}),this.threads=t,this.updateDataCallBack(this.threads,this.baseUnits),this.recalculateExistingThreadCounts()},t.prototype.update=function(){if(this.mouseDown){this.mouseDown=!1;var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===n.Start&&t++}),this.threads=t,this.updateDataCallBack(this.threads,this.baseUnits)}},t.prototype.draw=function(){},t}();function y(t,e){var a,o;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case s.Up:a=e.r-1,o=e.c;break;case s.Down:a=e.r+1,o=e.c;break;case s.Right:o=e.c+1,a=e.r;break;case s.Left:o=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof h&&e.r===a&&e.c===o&&e.commandData.type!==n.Empty&&e.flowType!==s.Empty)switch(e.commandData.type){case n.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):y(t,e)}(t,e)},t.nextStack.push(e);break;case n.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):y(t,e)}(t,e)},t.nextStack.push(e);break;case n.Start:e.call=function(){return function(t,e){console.log("start"),y(t,e)}(t,e)},t.nextStack.push(e)}})}var b=new o;!function(t,e,a){for(var o=5,i=5,r=0,c=e.command_palette.block_height,l=e.command_palette.block_width,u=0;u<c;u++){for(var f=0;f<l;f++)new h(t,i,o,50,50,u,f,a),i+=55;o+=55,r=i,i=5}o+=20;for(var p=0;p<e.command_blocks.length;p++){switch(e.command_blocks[p]){case"start":var y=new m(t,i,o,50,50,"thistle",n.Start);new w(t,y.x,y.y,y.h,y.w,c*l,y.updateData);break;case"move":var b=new m(t,i,o,50,50,"thistle",n.Move);new d(t,i+20,o+60,100,n.Move,b.updateData);break;case"angle":var x=new m(t,i,o,50,50,"thistle",n.Angle);new d(t,i+20,o+60,360,n.Angle,x.updateData,8);break;case"thread":new m(t,i,o,50,50,"thistle",n.Thread);break;case"laser":new m(t,i,o,50,50,"green",n.Laser);break;case"scan":new m(t,i,o,50,50,"darkblue",n.Scan);break;case"grapple":new m(t,i,o,50,50,"maroon",n.Grapple)}i+=55}for(i=r+20,o=5,p=0;p<e.flow_blocks.length;p++){switch(e.flow_blocks[p]){case"up":new g(t,i,o,50,50,"yellow",s.Up);break;case"left":new g(t,i,o,50,50,"yellow",s.Left);break;case"right":new g(t,i,o,50,50,"yellow",s.Right);break;case"down":new g(t,i,o,50,50,"yellow",s.Down)}o+=55}}(b,i,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof u&&t.commandControl||e instanceof m&&t.commandControl||e instanceof p&&t.flowControl||e instanceof g&&t.flowControl?e.mouseDown=!0:e instanceof h&&(t.commandControl?e.commandData.type=n.Empty:t.flowControl&&(e.flowType=s.Empty)))}),t.userInterfaces.forEach(function(e){e instanceof d&&t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0),e instanceof w&&t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e.mouseDown=!0)})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof u||t instanceof p)&&t.mouseDown&&(t.mouseDown=!1,t.mouseUp())}),t.userInterfaces.forEach(function(t){t.mouseDown=!1,t instanceof w&&t.mouseUp()})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning?(t.programRunning=!1,t.nextStack=[]):(t.programRunning=!0,function(t,e){t.blocks.forEach(function(a){a instanceof h&&a.commandData.type===n.Start&&a.commandData.totalUnits===e&&a.flowType!==s.Empty&&y(t,a)})}(t,1)))}}(b),setInterval(function(){b.blocks.forEach(function(t){t.update()}),b.userInterfaces.forEach(function(t){t.update()}),b.ctx.clearRect(0,0,b.canvas.width,b.canvas.height),b.ctx.beginPath(),b.userInterfaces.forEach(function(t){t.draw()}),b.blocks.forEach(function(t){t instanceof p||t.draw()}),b.blocks.forEach(function(t){t instanceof p&&t.draw()}),b.ctx.stroke();var t=b.nextStack;b.nextStack=[],t.length>0&&b.programRunning?t.forEach(function(t){t.currentCallCount>0?(t.call(),b.nextStack.push(t)):t.call()}):b.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRW51bXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Jhc2VCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR3JpZEJsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy9Db21tYW5kQmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zsb3dCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UaHJlYWRPYnNlcnZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUHJvZ3JhbUV4ZWN1dGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR2VuZXJhdGVMZXZlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2V0VXBFdmVudExpc3RlbmVycy50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkNvbW1hbmRUeXBlcyIsIkZsb3dUeXBlcyIsIkdhbWVTdGF0ZV9HYW1lU3RhdGUiLCJvYmoiLCJ0aGlzIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYmxvY2tzIiwidXNlckludGVyZmFjZXMiLCJtb3VzZVgiLCJtb3VzZVkiLCJjb21tYW5kQ29udHJvbCIsImZsb3dDb250cm9sIiwibmV4dFN0YWNrIiwicHJvZ3JhbVJ1bm5pbmciLCJCYXNlQmxvY2siLCJHYW1lU3RhdGUiLCJYIiwiWSIsIkgiLCJXIiwiQ29sb3IiLCJnYW1lU3RhdGUiLCJ4IiwieSIsImgiLCJ3IiwiY29sb3IiLCJkcmF3IiwidXBkYXRlIiwiR3JpZEJsb2NrX0dyaWRCbG9jayIsIl9zdXBlciIsIkdyaWRCbG9jayIsIlJvdyIsIkNvbHVtbiIsIl90aGlzIiwiZmxvd1R5cGUiLCJFbXB0eSIsInB1c2giLCJjb21tYW5kRGF0YSIsImJhc2VVbml0cyIsInRvdGFsVW5pdHMiLCJjYWxsQ291bnQiLCJ0eXBlIiwiX19leHRlbmRzIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJDb21tYW5kQmxvY2tfQ29tbWFuZEJsb2NrIiwiQ29tbWFuZEJsb2NrIiwiVW5pdHMiLCJDYWxsQ291bnQiLCJUeXBlIiwibW91c2VEb3duIiwic2V0IiwiaW1hZ2UiLCJJbWFnZSIsIlN0YXJ0Iiwic3JjIiwiTW92ZSIsIkFuZ2xlIiwiVGhyZWFkIiwiQ29tbWFuZEJsb2NrX2V4dGVuZHMiLCJtb3VzZVVwIiwiZm9yRWFjaCIsImJsb2NrIiwiY3VycmVudENhbGxDb3VudCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInRyYW5zbGF0ZSIsImRyYXdJbWFnZSIsImZvbnQiLCJvZmZzZXRYIiwiZmlsbFRleHQiLCJ0b1N0cmluZyIsIkNvbW1hbmRCbG9ja19Db21tYW5kQmxvY2tCdXR0b24iLCJDb21tYW5kQmxvY2tCdXR0b24iLCJ1cGRhdGVEYXRhIiwibXVsdGlwbGljYXRpdmUiLCJGbG93QmxvY2tfRmxvd0Jsb2NrIiwiRmxvd0Jsb2NrIiwiVXAiLCJEb3duIiwiTGVmdCIsIlJpZ2h0IiwiRmxvd0Jsb2NrX2V4dGVuZHMiLCJzdHJva2VTdHlsZSIsIkZsb3dCbG9ja19GbG93QmxvY2tCdXR0b24iLCJGbG93QmxvY2tCdXR0b24iLCJTbGlkZXIiLCJNYXhVbml0cyIsIlVwZGF0ZURhdGFDYWxsQmFjayIsIlNuYXBBbW91bnQiLCJtYXhVbml0cyIsInNuYXBBbW91bnQiLCJ1cGRhdGVEYXRhQ2FsbEJhY2siLCJNYXRoIiwicm91bmQiLCJiYXJIIiwiYmFyVyIsImJhclgiLCJiYXJZIiwiYmFyQ29sb3IiLCJzbGlkZXJIIiwic2xpZGVyVyIsInNsaWRlclgiLCJzbGlkZXJZIiwic2xpZGVyQ29sb3IiLCJwZXJjZW50YWdlIiwiY2FsY3VsYXRlZENhbGxDb3VudCIsInRlbXBTbGlkZXJZIiwiVGhyZWFkT2JzZXJ2ZXJfVGhyZWFkT2JzZXJ2ZXIiLCJUaHJlYWRPYnNlcnZlciIsInRocmVhZHMiLCJyZWNhbGN1bGF0ZUV4aXN0aW5nVGhyZWFkQ291bnRzIiwidGVtcENvbW1hbmRUaHJlYWRBcnJheSIsInRlbXBHcmlkVGhyZWFkQXJyYXkiLCJzb3J0IiwiYSIsImIiLCJsZW5ndGgiLCJ0ZW1wVGhyZWFkQ291bnQiLCJ0ZW1wVGhyZWFkQ291bnRfMSIsImZpbmROZXh0Q2FsbCIsInByZXZCbG9jayIsInRhcmdldFJvdyIsInRhcmdldENvbCIsImNvbnNvbGUiLCJsb2ciLCJhbmdsZUNhbGwiLCJtb3ZlQ2FsbCIsInN0YXJ0Q2FsbCIsIm1haW5fZ2FtZVN0YXRlIiwibGV2ZWxPYmoiLCJwYWxldHRlQ29sb3IiLCJ5T2Zmc2V0IiwieE9mZnNldCIsIm1heFhPZmZzZXQiLCJjb21tYW5kUGFsZXR0ZUgiLCJjb21tYW5kUGFsZXR0ZVciLCJzdGFydEJsb2NrIiwibW92ZUJsb2NrIiwiYW5nbGVCbG9jayIsIkxhc2VyIiwiU2NhbiIsIkdyYXBwbGUiLCJHZW5lcmF0ZUxldmVsIiwibGV2ZWwxIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVzZXJJbnRlcmZhY2UiLCJldnQiLCJjbGllbnRYIiwibGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJjbGllbnRZIiwidG9wIiwiYm90dG9tIiwiaGVpZ2h0Iiwid2luZG93Iiwib25rZXl1cCIsImUiLCJrZXlDb2RlIiwidGhyZWFkIiwic3RhcnROZXdUaHJlYWRDYWxsIiwiU2V0VXBFdmVudExpc3RlbmVycyIsInNldEludGVydmFsIiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwic3Ryb2tlIiwiY2FsbFN0YWNrIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEs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QUFTLEdBQUtZLEVBQVV0SCxlQUNsQzRKLEVBQVUzRyxRQUFRLFNBQUFDLEdBRVZBLEVBQU1DLGlCQUFtQixHQUN6QkQsRUFBTWxHLE9BQ05zSyxFQUFVdkgsVUFBVXlCLEtBQUswQixJQUl6QkEsRUFBTWxHLFNBS2RzSyxFQUFVdEgsZ0JBQWlCLEdBRWhDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vU2xpZGVyXCI7XHJcbmltcG9ydCB7IEJhc2VVc2VySW50ZXJmYWNlIH0gZnJvbSBcIi4vQmFzZVVzZXJJbnRlcmZhY2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lU3RhdGUge1xyXG4gICAgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHJlYWRvbmx5IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcmVhZG9ubHkgcmVjdDogQ2xpZW50UmVjdCB8IERPTVJlY3Q7XHJcbiAgICBwdWJsaWMgYmxvY2tzOiBCYXNlQmxvY2tbXTtcclxuICAgIHB1YmxpYyB1c2VySW50ZXJmYWNlczogQmFzZVVzZXJJbnRlcmZhY2VbXTtcclxuICAgIHB1YmxpYyBtb3VzZVg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBtb3VzZVk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjb21tYW5kQ29udHJvbDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBmbG93Q29udHJvbDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBuZXh0U3RhY2s6IEdyaWRCbG9ja1tdO1xyXG4gICAgcHVibGljIHByb2dyYW1SdW5uaW5nOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3Iob2JqPzogSUdhbWVTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gb2JqICYmIG9iai5jYW52YXMgfHwgPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVTY3JlZW5cIik7XHJcbiAgICAgICAgdGhpcy5jdHggPSBvYmogJiYgb2JqLmN0eCB8fCA8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPiB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5yZWN0ID0gb2JqICYmIG9iai5yZWN0IHx8IDxDbGllbnRSZWN0IHwgRE9NUmVjdD4gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBvYmogJiYgb2JqLmJsb2NrcyB8fCBbXTtcclxuICAgICAgICB0aGlzLnVzZXJJbnRlcmZhY2VzID0gb2JqICYmIG9iai51c2VySW50ZXJmYWNlcyB8fCBbXTtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IG9iaiAmJiBvYmoubW91c2VYIHx8IDA7XHJcbiAgICAgICAgdGhpcy5tb3VzZVkgPSBvYmogJiYgb2JqLm1vdXNlWSB8fCAwO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZENvbnRyb2wgPSBvYmogJiYgb2JqLmNvbW1hbmRDb250cm9sIHx8IHRydWU7XHJcbiAgICAgICAgdGhpcy5mbG93Q29udHJvbCA9IG9iaiAmJiBvYmouZmxvd0NvbnRyb2wgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5uZXh0U3RhY2sgPSBvYmogJiYgb2JqLm5leHRTdGFjayB8fCBbXTtcclxuICAgICAgICB0aGlzLnByb2dyYW1SdW5uaW5nID0gb2JqICYmIG9iai5wcm9ncmFtUnVubmluZyB8fCBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJR2FtZVN0YXRlIHtcclxuICAgIHJlYWRvbmx5IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHJlYWRvbmx5IHJlY3Q6IENsaWVudFJlY3QgfCBET01SZWN0O1xyXG4gICAgYmxvY2tzOiBCYXNlQmxvY2tbXTtcclxuICAgIHVzZXJJbnRlcmZhY2VzOiBCYXNlVXNlckludGVyZmFjZVtdO1xyXG4gICAgbW91c2VYOiBudW1iZXI7XHJcbiAgICBtb3VzZVk6IG51bWJlcjtcclxuICAgIGNvbW1hbmRDb250cm9sOiBib29sZWFuO1xyXG4gICAgZmxvd0NvbnRyb2w6IGJvb2xlYW47XHJcbiAgICBuZXh0U3RhY2s6IGFueVtdO1xyXG4gICAgcHJvZ3JhbVJ1bm5pbmc6IGJvb2xlYW47XHJcbn0iLCJleHBvcnQgZW51bSBDb21tYW5kVHlwZXMge1xyXG4gICAgRW1wdHksXHJcbiAgICBTdGFydCxcclxuICAgIE1vdmUsXHJcbiAgICBBbmdsZSxcclxuICAgIFRocmVhZCxcclxuICAgIFNjYW4sXHJcbiAgICBMYXNlcixcclxuICAgIEdyYXBwbGVcclxufVxyXG5cclxuZXhwb3J0IGVudW0gRmxvd1R5cGVzIHtcclxuICAgIEVtcHR5LFxyXG4gICAgVXAsXHJcbiAgICBEb3duLFxyXG4gICAgTGVmdCxcclxuICAgIFJpZ2h0LFxyXG4gICAgQ29uZGl0aW9uYWxMZWZ0UmlnaHQsXHJcbiAgICBDb25kaXRpb25hbExlZnRVcCxcclxuICAgIENvbmRpdGlvbmFsTGVmdERvd24sXHJcbiAgICBDb25kaXRpb25hbFVwUmlnaHQsXHJcbiAgICBDb25kaXRpb25hbFVwRG93bixcclxuICAgIENvbmRpdGlvbmFsRG93blJpZ2h0XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQmxvY2sge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIEdhbWVTdGF0ZTogR2FtZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIFg6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBZOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgSDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIFc6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBDb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGU7XHJcbiAgICAgICAgdGhpcy54ID0gWDtcclxuICAgICAgICB0aGlzLnkgPSBZO1xyXG4gICAgICAgIHRoaXMuaCA9IEg7XHJcbiAgICAgICAgdGhpcy53ID0gVztcclxuICAgICAgICB0aGlzLmNvbG9yID0gQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdygpOiB2b2lkIHt9IFxyXG4gICAgdXBkYXRlKCk6IHZvaWQge31cclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBCYXNlQmxvY2sgfSBmcm9tIFwiLi9CYXNlQmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRCbG9jayBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHB1YmxpYyByOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYzogbnVtYmVyO1xyXG4gICAgcHVibGljIGNvbW1hbmREYXRhOiBJQ29tbWFuZERhdGE7XHJcbiAgICBwdWJsaWMgY3VycmVudENhbGxDb3VudDogbnVtYmVyO1xyXG4gICAgcHVibGljIGZsb3dUeXBlOiBGbG93VHlwZXM7XHJcbiAgICBwdWJsaWMgY2FsbDogYW55OyAvLyBjaGFuZ2UgdHlwZSBoZXJlIHRvIGdlbmVyaWMgbWV0aG9kIHNpZ25hdHVyZVxyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIFJvdzogbnVtYmVyLCBDb2x1bW46IG51bWJlciwgQ29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZSwgWCwgWSwgSCwgVywgQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuciA9IFJvdztcclxuICAgICAgICB0aGlzLmMgPSBDb2x1bW47XHJcbiAgICAgICAgdGhpcy5mbG93VHlwZSA9IEZsb3dUeXBlcy5FbXB0eTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmREYXRhID0ge1xyXG4gICAgICAgICAgICBiYXNlVW5pdHM6IDAsXHJcbiAgICAgICAgICAgIHRvdGFsVW5pdHM6IDAsXHJcbiAgICAgICAgICAgIGNhbGxDb3VudDogMCxcclxuICAgICAgICAgICAgdHlwZTogQ29tbWFuZFR5cGVzLkVtcHR5XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiogSW50ZXJmYWNlIHRvIGNvbW11bmljYXRlIGNvbW1hbmQgZGF0YS5cclxuKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ29tbWFuZERhdGEge1xyXG4gICAgLyoqXHJcbiAgICAqIEFtb3VudCBvZiB1bml0cyBwZXIgY2FsbC5cclxuICAgICovXHJcbiAgICBiYXNlVW5pdHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgKiBUb3RhbCB1bml0cyBhZnRlciBhbGwgY2FsbChzKS5cclxuICAgICovXHJcbiAgICB0b3RhbFVuaXRzOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICogQW1vdW50IG9mIGNhbGxzIGZvciBhIHNpbmdsZSBwYXNzIG9mIGV4ZWN1dGlvbi5cclxuICAgICovXHJcbiAgICBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgKiBUeXBlIG9mIGNvbW1hbmQgZm9yIHRoZSBleGVjdXRpb24gcHJvY2Vzcy5cclxuICAgICovXHJcbiAgICB0eXBlOiBDb21tYW5kVHlwZXM7XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IElDb21tYW5kRGF0YSwgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJsb2NrIGV4dGVuZHMgQmFzZUJsb2NrIGltcGxlbWVudHMgSUNvbW1hbmREYXRhIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyB0b3RhbFVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xyXG4gICAgcHVibGljIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBzZXQ6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSB0eXBlOiBDb21tYW5kVHlwZXM7XHJcbiAgICByZWFkb25seSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIFVuaXRzOiBudW1iZXIsIENhbGxDb3VudDogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBDb21tYW5kVHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLmJhc2VVbml0cyA9IFVuaXRzO1xyXG4gICAgICAgIHRoaXMuY2FsbENvdW50ID0gQ2FsbENvdW50O1xyXG4gICAgICAgIHRoaXMudG90YWxVbml0cyA9IHRoaXMuYmFzZVVuaXRzICogdGhpcy5jYWxsQ291bnQ7XHJcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9TdGFydEJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLk1vdmU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Nb3ZlQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuQW5nbGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9BbmdsZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlRocmVhZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1RocmVhZEJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbWV0aG9kIGNhbGxlZCBpbiBTZXRVcEV2ZW50TGlzdGVuZXJzLnRzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtb3VzZVVwKCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBpLmUuIGRyb3BwaW5nIGJsb2NrXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBHcmlkQmxvY2sgJiYgYmxvY2suY29tbWFuZERhdGEudHlwZSA9PT0gQ29tbWFuZFR5cGVzLkVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sueCA8IHRoaXMueCArIHRoaXMudyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLnggKyBibG9jay53ID4gdGhpcy54ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA8IHRoaXMueSArIHRoaXMuaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmggKyBibG9jay55ID4gdGhpcy55KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNuYXAgdGhpcyBjb21tYW5kIGJsb2NrIHRvIGVtcHR5IEdyaWRCbG9ja1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IGJsb2NrLng7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gYmxvY2sueTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IEdyaWRCbG9jaydzIGNvbW1hbmREYXRhIGFuZCBjdXJyZW50Q2FsbENvdW50IHByb3BlcnRpZXNcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5jb21tYW5kRGF0YS50eXBlID0gdGhpcy50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmNvbW1hbmREYXRhLmJhc2VVbml0cyA9IHRoaXMuYmFzZVVuaXRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmNvbW1hbmREYXRhLmNhbGxDb3VudCA9IHRoaXMuY2FsbENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMgPSB0aGlzLnRvdGFsVW5pdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suY3VycmVudENhbGxDb3VudCA9IHRoaXMuY2FsbENvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGRlbGV0ZSBpZiBkcm9wcGluZyBibG9jayBhbmQgaXQgZG9lc24ndCBoYXZlIGEgZW1wdHkgZ3JpZCBibG9jayB0byBiZSBzZXQgb25cclxuICAgICAgICBpZiAoIXRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhZyBjb21tYW5kIGJsb2NrXHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWCAtIHRoaXMudy8yO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgLSB0aGlzLmgvMjtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5mb250ID0gXCIxNXB4IEFyaWFsXCI7XHJcbiAgICAgICAgbGV0IG9mZnNldFggPSAzMDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudG90YWxVbml0cyA+IDk5KSB7XHJcbiAgICAgICAgICAgIG9mZnNldFggPSAyNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy50b3RhbFVuaXRzIDwgMTApIHtcclxuICAgICAgICAgICAgb2Zmc2V0WCA9IDM1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxUZXh0KCh0aGlzLnRvdGFsVW5pdHMpLnRvU3RyaW5nKCksIHRoaXMueCArIG9mZnNldFgsIHRoaXMueSArIDQ4KTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09OU0lERVI6IGV4dGVuZGluZyBDb21tYW5kQmxvY2sgY2xhc3NcclxuZXhwb3J0IGNsYXNzIENvbW1hbmRCbG9ja0J1dHRvbiBleHRlbmRzIEJhc2VCbG9jayBpbXBsZW1lbnRzIElDb21tYW5kRGF0YSB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBiYXNlVW5pdHM6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyB0b3RhbFVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xyXG4gICAgcHVibGljIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IHR5cGU6IENvbW1hbmRUeXBlcztcclxuICAgIHJlYWRvbmx5IGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogQ29tbWFuZFR5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmJhc2VVbml0cyA9IDA7XHJcbiAgICAgICAgdGhpcy5jYWxsQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxVbml0cyA9IDA7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9TdGFydEJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLk1vdmU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Nb3ZlQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuQW5nbGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9BbmdsZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlRocmVhZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1RocmVhZEJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgcGFzc2VkIGluIGFzIHJlZmVyZW5jZSB0byBjb3JyZXNwb25kaW5nIFVJLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlRGF0YSA9IChtdWx0aXBsaWNhdGl2ZTogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgICAgIHRoaXMuY2FsbENvdW50ID0gbXVsdGlwbGljYXRpdmU7XHJcbiAgICAgICAgdGhpcy5iYXNlVW5pdHMgPSBiYXNlVW5pdHM7XHJcbiAgICAgICAgdGhpcy50b3RhbFVuaXRzID0gdGhpcy5iYXNlVW5pdHMgKiB0aGlzLmNhbGxDb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgbmV3IENvbW1hbmRCbG9jayh0aGlzLmdhbWVTdGF0ZSwgdGhpcy54LCB0aGlzLnksIHRoaXMuaCwgdGhpcy53LCB0aGlzLmJhc2VVbml0cywgdGhpcy5jYWxsQ291bnQsIHRoaXMuQ29sb3IsIHRoaXMudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZm9udCA9IFwiMTVweCBBcmlhbFwiO1xyXG4gICAgICAgIGxldCBvZmZzZXRYID0gMzA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsVW5pdHMgPiA5OSkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMjU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnRvdGFsVW5pdHMgPCAxMCkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMzU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFRleHQoKHRoaXMudG90YWxVbml0cykudG9TdHJpbmcoKSwgdGhpcy54ICsgb2Zmc2V0WCwgdGhpcy55ICsgNDgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG93QmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcHVibGljIHNldDogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogRmxvd1R5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuVXA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9VcEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Eb3duQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuTGVmdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0xlZnRBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5SaWdodDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1JpZ2h0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBtZXRob2QgY2FsbGVkIGluIFNldFVwRXZlbnRMaXN0ZW5lcnMudHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1vdXNlVXAoKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIGRyb3AgZmxvdyBibG9ja1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrICYmIGJsb2NrLmZsb3dUeXBlID09PSBGbG93VHlwZXMuRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay54IDwgdGhpcy54ICsgdGhpcy53ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2sueCArIGJsb2NrLncgPiB0aGlzLnggJiZcclxuICAgICAgICAgICAgICAgICAgICBibG9jay55IDwgdGhpcy55ICsgdGhpcy5oICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suaCArIGJsb2NrLnkgPiB0aGlzLnkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc25hcCB0aGlzIGZsb3cgYmxvY2sgdG8gZW1wdHkgR3JpZEJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gYmxvY2sueDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSBibG9jay55O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5mbG93VHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY29uZGl0aW9uYWwgcHJvcGVydGllcyBoZXJlIGlmIGNvbmRpdGlvbmFsIGJsb2NrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZGVsZXRlIGlmIGRyb3BwaW5nIGJsb2NrIGFuZCBpdCBkb2Vzbid0IGhhdmUgYW4gZW1wdHkgZ3JpZCBibG9jayB0byBiZSBzZXQgb25cclxuICAgICAgICBpZiAoIXRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhZyBmbG93IGJsb2NrXHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWCAtIHRoaXMudy8yO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgLSB0aGlzLmgvMjtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5yZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLncsIHRoaXMuaCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTlNJREVSOiBFeHRlbmRpbmcgRmxvd0Jsb2NrIGhlcmVcclxuZXhwb3J0IGNsYXNzIEZsb3dCbG9ja0J1dHRvbiBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBGbG93VHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLlVwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVXBBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5Eb3duOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvRG93bkFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkxlZnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9MZWZ0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9SaWdodEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgbmV3IEZsb3dCbG9jayh0aGlzLmdhbWVTdGF0ZSwgdGhpcy54LCB0aGlzLnksIHRoaXMuaCwgdGhpcy53LCB0aGlzLkNvbG9yLCB0aGlzLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKC10aGlzLngsIC10aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMsIEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IEJhc2VVc2VySW50ZXJmYWNlIH0gZnJvbSBcIi4vQmFzZVVzZXJJbnRlcmZhY2VcIjtcclxuXHJcbi8vIG1heWJlIGFkZCBzdXBwb3J0IGZvciB0aHJlYWQgc3RhcnRlcj9cclxuZXhwb3J0IGNsYXNzIFNsaWRlciBpbXBsZW1lbnRzIEJhc2VVc2VySW50ZXJmYWNlIHtcclxuICAgIHB1YmxpYyBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIHNuYXBBbW91bnQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcGVyY2VudGFnZTogbnVtYmVyO1xyXG4gICAgcHVibGljIHZhbHVlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdXBkYXRlRGF0YUNhbGxCYWNrOiAoY2FsY3VsYXRlZENhbGxDb3VudDogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIHJlYWRvbmx5IG1heFVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBiYXNlVW5pdHM6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHR5cGU6IENvbW1hbmRUeXBlcyB8IEZsb3dUeXBlcztcclxuICAgIHB1YmxpYyBzbGlkZXJYOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgc2xpZGVyWTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2xpZGVySDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2xpZGVyVzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2xpZGVyQ29sb3I6IHN0cmluZztcclxuICAgIHB1YmxpYyBiYXJYOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYmFyWTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFySDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFyVzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFyQ29sb3I6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYIDpudW1iZXIsIFk6IG51bWJlciwgTWF4VW5pdHM6IG51bWJlciwgVHlwZTogQ29tbWFuZFR5cGVzIHwgRmxvd1R5cGVzLCBVcGRhdGVEYXRhQ2FsbEJhY2s6IChjYWxjdWxhdGVkQ2FsbENvdW50OiBudW1iZXIsIGJhc2VVbml0czogbnVtYmVyKSA9PiB2b2lkLCBTbmFwQW1vdW50OiBudW1iZXIgPSAxMCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tYXhVbml0cyA9IE1heFVuaXRzO1xyXG4gICAgICAgIHRoaXMuc25hcEFtb3VudCA9IFNuYXBBbW91bnQ7XHJcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhQ2FsbEJhY2sgPSBVcGRhdGVEYXRhQ2FsbEJhY2s7XHJcbiAgICAgICAgdGhpcy5iYXNlVW5pdHMgPSBNYXRoLnJvdW5kKHRoaXMubWF4VW5pdHMgLyB0aGlzLnNuYXBBbW91bnQpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5iYXJIID0gNzU7XHJcbiAgICAgICAgdGhpcy5iYXJXID0gMTA7XHJcbiAgICAgICAgdGhpcy5iYXJYID0gWDtcclxuICAgICAgICB0aGlzLmJhclkgPSBZO1xyXG4gICAgICAgIHRoaXMuYmFyQ29sb3IgPSBcInRoaXN0bGVcIjtcclxuICAgICAgICB0aGlzLnNsaWRlckggPSAxMDtcclxuICAgICAgICB0aGlzLnNsaWRlclcgPSAxNTtcclxuICAgICAgICB0aGlzLnNsaWRlclggPSBYO1xyXG4gICAgICAgIHRoaXMuc2xpZGVyWSA9IFkgKyB0aGlzLmJhckgvMiAtIHRoaXMuc2xpZGVySC8yO1xyXG4gICAgICAgIHRoaXMuc2xpZGVyQ29sb3IgPSBcInB1cnBsZVwiO1xyXG4gICAgICAgIHRoaXMucGVyY2VudGFnZSA9IDEgLSAodGhpcy5zbGlkZXJZIC0gdGhpcy5iYXJZICsgdGhpcy5zbGlkZXJILzIpIC8gdGhpcy5iYXJIO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKHRoaXMucGVyY2VudGFnZSAqIHRoaXMuc25hcEFtb3VudCkgLyB0aGlzLnNuYXBBbW91bnQ7XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJJbnRlcmZhY2VzLnB1c2godGhpcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBkYXRhXHJcbiAgICAgICAgbGV0IGNhbGN1bGF0ZWRDYWxsQ291bnQgPSBNYXRoLnJvdW5kKCh0aGlzLnZhbHVlICogdGhpcy5tYXhVbml0cykvdGhpcy5iYXNlVW5pdHMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKGNhbGN1bGF0ZWRDYWxsQ291bnQsIHRoaXMuYmFzZVVuaXRzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYmFyWSAtIHRoaXMuc2xpZGVySC8yIDwgdGhpcy5nYW1lU3RhdGUubW91c2VZICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhclkgKyB0aGlzLmJhckggLSB0aGlzLnNsaWRlckgvMiA+IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcFNsaWRlclkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVk7XHJcbiAgICAgICAgICAgICAgICAvLyBmaW5kIHBlcmNlbnRhZ2Ugc2xpZGVyIGlzIHVwIHZlcnRpY2FsIG9uIGJhclxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gMSAtICh0ZW1wU2xpZGVyWSAtIHRoaXMuYmFyWSArIHRoaXMuc2xpZGVySC8yKSAvIHRoaXMuYmFySDtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgdG8gYmUgdGhlIHJvdW5kZWQgcGVyY2VudGFnZSBiYXNlZCBvbiBzbmFwIGFtb3VudFxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IE1hdGgucm91bmQodGhpcy5wZXJjZW50YWdlICogdGhpcy5zbmFwQW1vdW50KSAvIHRoaXMuc25hcEFtb3VudDtcclxuICAgICAgICAgICAgICAgIC8vIHNldCBzbGlkZXJZIHZhbHVlIGJhc2VkIG9uIG5ldyB2YWx1ZSBmcm9tIHRoZSByb3VuZGVkIHBlcmNhbnRhZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVyWSA9IHRoaXMuYmFySCArIHRoaXMuYmFyWSAtICh0aGlzLnNsaWRlckgvMikgLSAodGhpcy52YWx1ZSAqIHRoaXMuYmFySCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNhbGN1bGF0ZWRDYWxsQ291bnQgPSBNYXRoLnJvdW5kKCh0aGlzLnZhbHVlICogdGhpcy5tYXhVbml0cykvdGhpcy5iYXNlVW5pdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKGNhbGN1bGF0ZWRDYWxsQ291bnQsIHRoaXMuYmFzZVVuaXRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhdyBiYXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5iYXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5iYXJYLCB0aGlzLmJhclksIHRoaXMuYmFyVywgdGhpcy5iYXJIKTtcclxuXHJcbiAgICAgICAgLy8gZHJhdyBzbGlkZXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5zbGlkZXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5zbGlkZXJYIC0gdGhpcy5zbGlkZXJILzQsIHRoaXMuc2xpZGVyWSwgdGhpcy5zbGlkZXJXLCB0aGlzLnNsaWRlckgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQmFzZVVzZXJJbnRlcmZhY2UgfSBmcm9tIFwiLi9CYXNlVXNlckludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIlxyXG5pbXBvcnQgeyBDb21tYW5kQmxvY2sgfSBmcm9tIFwiLi9Db21tYW5kQmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGhyZWFkT2JzZXJ2ZXIgaW1wbGVtZW50cyBCYXNlVXNlckludGVyZmFjZSB7XHJcbiAgICBwdWJsaWMgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdzogbnVtYmVyO1xyXG4gICAgcHVibGljIG1heFVuaXRzOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcHVibGljIHRocmVhZHM6IG51bWJlcjtcclxuICAgIHVwZGF0ZURhdGFDYWxsQmFjazogKHRvdGFsVGhyZWFkczogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIE1heFVuaXRzOiBudW1iZXIsIFVwZGF0ZURhdGFDYWxsQmFjazogKHRvdGFsVGhyZWFkczogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMueCA9IFg7XHJcbiAgICAgICAgdGhpcy55ID0gWTtcclxuICAgICAgICB0aGlzLmggPSBIO1xyXG4gICAgICAgIHRoaXMudyA9IFc7XHJcbiAgICAgICAgdGhpcy5tYXhVbml0cyA9IE1heFVuaXRzO1xyXG4gICAgICAgIHRoaXMudGhyZWFkcyA9IDE7XHJcbiAgICAgICAgdGhpcy5iYXNlVW5pdHMgPSAxO1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrID0gVXBkYXRlRGF0YUNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJJbnRlcmZhY2VzLnB1c2godGhpcyk7XHJcblxyXG4gICAgICAgIC8vIGluaXRpYWxpemUgZGF0YVxyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKHRoaXMudGhyZWFkcywgdGhpcy5iYXNlVW5pdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVjYWxjdWxhdGVFeGlzdGluZ1RocmVhZENvdW50cygpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZm9yIHZpc3VhbHNcclxuICAgICAgICBsZXQgdGVtcENvbW1hbmRUaHJlYWRBcnJheTogQ29tbWFuZEJsb2NrW10gPSBbXTtcclxuICAgICAgICAvLyBmb3IgZnVuY3Rpb25cclxuICAgICAgICBsZXQgdGVtcEdyaWRUaHJlYWRBcnJheTogR3JpZEJsb2NrW10gPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay50eXBlID09PSBDb21tYW5kVHlwZXMuU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wQ29tbWFuZFRocmVhZEFycmF5LnB1c2goYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2suY29tbWFuZERhdGEudHlwZSA9PT0gQ29tbWFuZFR5cGVzLlN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcEdyaWRUaHJlYWRBcnJheS5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzb3J0IHRlbXAgdGhyZWFkIGFycmF5cywgdG90YWxVbml0cyBpcyB0aGUgdGhyZWFkIGNvdW50XHJcbiAgICAgICAgdGVtcENvbW1hbmRUaHJlYWRBcnJheS5zb3J0KChhLGIpID0+IChhLnRvdGFsVW5pdHMgPiBiLnRvdGFsVW5pdHMpID8gMSA6ICgoYi50b3RhbFVuaXRzID4gYS50b3RhbFVuaXRzKSA/IC0xIDogMCkpO1xyXG4gICAgICAgIHRlbXBHcmlkVGhyZWFkQXJyYXkuc29ydCgoYSxiKSA9PiAoYS5jb21tYW5kRGF0YS50b3RhbFVuaXRzID4gYi5jb21tYW5kRGF0YS50b3RhbFVuaXRzKSA/IDEgOiAoKGIuY29tbWFuZERhdGEudG90YWxVbml0cyA+IGEuY29tbWFuZERhdGEudG90YWxVbml0cykgPyAtMSA6IDApKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wQ29tbWFuZFRocmVhZEFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpICsgMSA8IHRlbXBDb21tYW5kVGhyZWFkQXJyYXlbaV0udG90YWxVbml0cykge1xyXG4gICAgICAgICAgICAgICAgLy8gc3VidHJhY3QgdGhyZWFkIGNvdW50IGlmIG5vdCBpbiBvcmRlciBpLmUuIDEsIDIsIDQuIC0+IDQgdHVybnMgaW50byAzXHJcbiAgICAgICAgICAgICAgICB0ZW1wQ29tbWFuZFRocmVhZEFycmF5W2ldLnRvdGFsVW5pdHMtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wR3JpZFRocmVhZEFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpICsgMSA8IHRlbXBHcmlkVGhyZWFkQXJyYXlbaV0uY29tbWFuZERhdGEudG90YWxVbml0cykge1xyXG4gICAgICAgICAgICAgICAgLy8gc3VidHJhY3QgdGhyZWFkIGNvdW50IGlmIG5vdCBpbiBvcmRlciBpLmUuIDEsIDIsIDQuIC0+IDQgdHVybnMgaW50byAzXHJcbiAgICAgICAgICAgICAgICB0ZW1wR3JpZFRocmVhZEFycmF5W2ldLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbW91c2VVcCgpIDogdm9pZCB7IFxyXG4gICAgICAgIGxldCB0ZW1wVGhyZWFkQ291bnQgPSAxO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLnR5cGUgPT09IENvbW1hbmRUeXBlcy5TdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBUaHJlYWRDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudGhyZWFkcyA9IHRlbXBUaHJlYWRDb3VudDtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhQ2FsbEJhY2sodGhpcy50aHJlYWRzLCB0aGlzLmJhc2VVbml0cyk7XHJcblxyXG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVFeGlzdGluZ1RocmVhZENvdW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wVGhyZWFkQ291bnQgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2sudHlwZSA9PT0gQ29tbWFuZFR5cGVzLlN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBUaHJlYWRDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRocmVhZHMgPSB0ZW1wVGhyZWFkQ291bnQ7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGFDYWxsQmFjayh0aGlzLnRocmVhZHMsIHRoaXMuYmFzZVVuaXRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSA6IHZvaWQge1xyXG5cclxuICAgIH1cclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuZnVuY3Rpb24gbW92ZUNhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibW92ZVwiKTtcclxuICAgICAgICBibG9jay5jdXJyZW50Q2FsbENvdW50LS07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFuZ2xlQ2FsbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgYmxvY2s6IEdyaWRCbG9jaykge1xyXG4gICAgaWYgKGJsb2NrLmN1cnJlbnRDYWxsQ291bnQgPiAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJhbmdsZVwiKTtcclxuICAgICAgICBibG9jay5jdXJyZW50Q2FsbENvdW50LS07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIHdpbGwgb25seSBoYXZlIGZpbmROZXh0RXhlY3V0aW9uIGJpdFxyXG4vLyB3b24ndCBkbyBhbnl0aGluZyBleGNlcHQgY29udGludWUgZXhlY3V0aW9uIGlmIHBsYXllcnMgdXNlIGl0IGxpa2UgYSBub3JtYWwgY29tbWFuZCBibG9ja1xyXG5mdW5jdGlvbiBzdGFydENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGNvbnNvbGUubG9nKFwic3RhcnRcIik7XHJcbiAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydE5ld1RocmVhZENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIHRocmVhZDogbnVtYmVyKSB7XHJcbiAgICAvLyBsb2NhdGUgdGhyZWFkXHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEdyaWRCbG9jaykge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2suY29tbWFuZERhdGEudHlwZSA9PT0gQ29tbWFuZFR5cGVzLlN0YXJ0XHJcbiAgICAgICAgICAgICAgICAmJiBibG9jay5jb21tYW5kRGF0YS50b3RhbFVuaXRzID09PSB0aHJlYWRcclxuICAgICAgICAgICAgICAgICYmIGJsb2NrLmZsb3dUeXBlICE9PSBGbG93VHlwZXMuRW1wdHkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IHRocmVhZFxyXG4gICAgICAgICAgICAgICAgZmluZE5leHRDYWxsKGdhbWVTdGF0ZSwgYmxvY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmROZXh0Q2FsbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgcHJldkJsb2NrOiBHcmlkQmxvY2spIDogdm9pZCB7XHJcbiAgICBsZXQgdGFyZ2V0Um93OiBudW1iZXI7XHJcbiAgICBsZXQgdGFyZ2V0Q29sOiBudW1iZXI7XHJcbiAgICAvLyByZXNldCBjYWxsIGNvdW50XHJcbiAgICBwcmV2QmxvY2suY3VycmVudENhbGxDb3VudCA9IHByZXZCbG9jay5jb21tYW5kRGF0YS5jYWxsQ291bnQ7XHJcbiAgICAvLyBUT0RPOiBhZGQgY29uZGl0aW9uYWxzXHJcbiAgICAvLyB0aGlzIHdpbGwgd29yayB3ZWxsIGhlcmUgc2luY2UgZWFjaCBjYWxsIGZpbmRzIHRoZSBuZXh0IGNhbGxcclxuICAgIC8vIGFmdGVyIGl0IGhhcyBhbHJlYWR5IGV4ZWN1dGVkXHJcbiAgICBzd2l0Y2gocHJldkJsb2NrLmZsb3dUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBGbG93VHlwZXMuVXA6XHJcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHByZXZCbG9jay5yIC0gMTtcclxuICAgICAgICAgICAgdGFyZ2V0Q29sID0gcHJldkJsb2NrLmM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRmxvd1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHByZXZCbG9jay5yICsgMTtcclxuICAgICAgICAgICAgdGFyZ2V0Q29sID0gcHJldkJsb2NrLmM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRmxvd1R5cGVzLlJpZ2h0OlxyXG4gICAgICAgICAgICB0YXJnZXRDb2wgPSBwcmV2QmxvY2suYyArIDE7XHJcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHByZXZCbG9jay5yO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEZsb3dUeXBlcy5MZWZ0OlxyXG4gICAgICAgICAgICB0YXJnZXRDb2wgPSBwcmV2QmxvY2suYyAtIDE7XHJcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHByZXZCbG9jay5yO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEdyaWRCbG9jaykge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2suciA9PT0gdGFyZ2V0Um93ICYmIGJsb2NrLmMgPT09IHRhcmdldENvbFxyXG4gICAgICAgICAgICAgICAgJiYgYmxvY2suY29tbWFuZERhdGEudHlwZSAhPT0gQ29tbWFuZFR5cGVzLkVtcHR5XHJcbiAgICAgICAgICAgICAgICAmJiBibG9jay5mbG93VHlwZSAhPT0gRmxvd1R5cGVzLkVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2goYmxvY2suY29tbWFuZERhdGEudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLkFuZ2xlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jYWxsID0gKCkgPT4gYW5nbGVDYWxsKGdhbWVTdGF0ZSwgYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lU3RhdGUubmV4dFN0YWNrLnB1c2goYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jYWxsID0gKCkgPT4gbW92ZUNhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jYWxsID0gKCkgPT4gc3RhcnRDYWxsKGdhbWVTdGF0ZSwgYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lU3RhdGUubmV4dFN0YWNrLnB1c2goYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZGVjbGFyYXRpb25zL2pzb24uZC50c1wiIC8+XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgbGV2ZWwxIGZyb20gJy4uL2RhdGEvbGV2ZWxzL2xldmVsMS5qc29uJztcclxuaW1wb3J0IHsgR2VuZXJhdGVMZXZlbCB9IGZyb20gXCIuL0dlbmVyYXRlTGV2ZWxcIjtcclxuaW1wb3J0IHsgU2V0VXBFdmVudExpc3RlbmVycyB9IGZyb20gXCIuL1NldFVwRXZlbnRMaXN0ZW5lcnNcIjtcclxuaW1wb3J0IHsgRmxvd0Jsb2NrIH0gZnJvbSBcIi4vRmxvd0Jsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9jayB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5cclxuLy8gVE9ETzogYWRkIHNwZWNpYWwgdW5pdCBsb2dpYyBmb3Igc3RhcnQgYmxvY2sgLyB0aHJlYWQgYmxvY2tzIHNpbmNlIHRoZXkgZG9uJ3QgZm9sbG93IHNhbWUgcnVsZXNcclxuLy8gLT4gaS5lLiB3aWxsIG5lZWQgdG8gZG8gYSBzd2l0Y2ggb24gdHlwZSB3aGVuIHVwZGF0aW5nIHVuaXQgdmFsdWVzIHdpdGhpbiBjb21tYW5kIGJsb2NrIGJ1dHRvbnMgdXBkYXRlIG1ldGhvZFxyXG4vLyBUT0RPOiBhZGQgYmlnIHllbGxvdyBibG9jayB0aGF0IHJlbmRlcnMgYmVoaW5kIGdyaWQgYmxvY2tzIHRvIGluZGljYXRlIHdoaWNoIGJsb2NrIGlzIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZFxyXG4vLyBUT0RPOiBoYXZlIEZsb3dCbG9ja0J1dHRvbiBhbmQgQ29tbWFuZEJsb2NrQnV0dG9ucyBleHRlbmQgZnJvbSB0aGVpciByZXNwZWN0aXZlIGJsb2Nrc1xyXG4vLyBUT0RPOiBwdXNoIG1vc3QgcmVjZW50bHkgY2xpY2tlZCBjb21tYW5kIC8gZmxvdyBibG9jayB0byB0b3Agb2YgYmxvY2sgYXJyYXkgdG8gcmVuZGVyIGl0IG9uIHRvcCBvZiBldmVyeXRoaW5nIGVsc2VcclxuLy8gVE9ETzogc3dpdGNoIHNwYWNlYmFyIGNvbnRyb2wgYnV0dG9uIHRvIGNsaWNrYWJsZSByYWRpbyBidXR0b25cclxuLy8gVE9ETzogYWRkIGJhc2UgVUkgY2xhc3MgLyBzd2l0Y2ggc2xpZGVyW10gdG8gYmFzZVVJRWxlbWVudFtdIGluIEdhbWVTdGF0ZVxyXG4vLyBUT0RPOiBhZGQgZXhlY3V0ZSBwcm9ncmFtIC8gc3RvcCBwcm9ncmFtIGJ1dHRvbnNcclxuLy8gVE9ETzogYWRkIG1hbmlmb2xkIGNvbGxpc2lvbiBzeXN0ZW0gZm9yIGdyaWRibG9jayBjb2xsaXNpb24gd2l0aCBmbG93IGFuZCBjb21tYW5kIGJsb2Nrcy5cclxuLy8gLT4gaS5lLiBzbmFwIGNvbW1hbmQgYmxvY2sgdG8gZ3JpZCBibG9jayB0aGF0IGhhcyB0aGUgYmlnZ2VzdCBtYW5pZm9sZFxyXG5cclxuLy8gc2V0IHVwIGdhbWUgc3RhdGVcclxudmFyIGdhbWVTdGF0ZSA9IG5ldyBHYW1lU3RhdGUoKTtcclxuR2VuZXJhdGVMZXZlbChnYW1lU3RhdGUsIGxldmVsMSwgXCJsaWdodGJsdWVcIik7XHJcblNldFVwRXZlbnRMaXN0ZW5lcnMoZ2FtZVN0YXRlKTtcclxuXHJcbmZ1bmN0aW9uIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgZ2FtZVN0YXRlLmN0eC5jbGVhclJlY3QoMCwgMCwgZ2FtZVN0YXRlLmNhbnZhcy53aWR0aCwgZ2FtZVN0YXRlLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgZ2FtZVN0YXRlLmN0eC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAvLyByZW5kZXIgVUkgZWxlbWVudHNcclxuICAgIGdhbWVTdGF0ZS51c2VySW50ZXJmYWNlcy5mb3JFYWNoKHVzZXJJbnRlcmZhY2UgPT4ge1xyXG4gICAgICAgIHVzZXJJbnRlcmZhY2UuZHJhdygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gcmVuZGVyIGFsbCBub24tZmxvdyBibG9ja3MgZmlyc3RcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKCEoYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spKSB7XHJcbiAgICAgICAgICAgIGJsb2NrLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyByZW5kZXIgYWxsIGZsb3cgYmxvY2tzIGxhc3QgdG8gbGF5ZXIgdGhlbSBvbiB0b3Agb2YgY29tbWFuZCBibG9ja3NcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKSB7XHJcbiAgICAgICAgICAgIGJsb2NrLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lU3RhdGUuY3R4LnN0cm9rZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICBibG9jay51cGRhdGUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGdhbWVTdGF0ZS51c2VySW50ZXJmYWNlcy5mb3JFYWNoKHVzZXJJbnRlcmZhY2UgPT4ge1xyXG4gICAgICAgIHVzZXJJbnRlcmZhY2UudXBkYXRlKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSA6IHZvaWQge1xyXG4gICAgdXBkYXRlKCk7XHJcbiAgICBkcmF3KCk7XHJcblxyXG4gICAgY29uc3QgY2FsbFN0YWNrID0gZ2FtZVN0YXRlLm5leHRTdGFjaztcclxuICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sgPSBbXTtcclxuXHJcbiAgICBpZiAoY2FsbFN0YWNrLmxlbmd0aCA+IDAgJiYgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nKSB7XHJcbiAgICAgICAgY2FsbFN0YWNrLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICAvLyB3aWxsIGNhbGwgY29tbWFuZCBhbmQgcHVzaCBpdCBiYWNrIG9uIHN0YWNrXHJcbiAgICAgICAgICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYmxvY2suY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLm5leHRTdGFjay5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBlbHNlIGp1c3QgY2FsbCBvbmNlIGFuZCBmaW5kIG5leHQgY2FsbFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbn0sIDEyKTsiLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2tCdXR0b24gfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiLi9TbGlkZXJcIjtcclxuaW1wb3J0IHsgVGhyZWFkT2JzZXJ2ZXIgfSBmcm9tIFwiLi9UaHJlYWRPYnNlcnZlclwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEdlbmVyYXRlTGV2ZWwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGxldmVsT2JqOiBvYmplY3QsIHBhbGV0dGVDb2xvcjogc3RyaW5nKSB7XHJcbiAgICBsZXQgeU9mZnNldDogbnVtYmVyID0gNTtcclxuICAgIGxldCB4T2Zmc2V0OiBudW1iZXIgPSA1O1xyXG4gICAgbGV0IG1heFhPZmZzZXQ6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgbWF4WU9mZnNldDogbnVtYmVyID0gMDtcclxuICAgIGxldCBjb21tYW5kUGFsZXR0ZUg6IG51bWJlciA9IGxldmVsT2JqW1wiY29tbWFuZF9wYWxldHRlXCJdW1wiYmxvY2tfaGVpZ2h0XCJdO1xyXG4gICAgbGV0IGNvbW1hbmRQYWxldHRlVzogbnVtYmVyID0gbGV2ZWxPYmpbXCJjb21tYW5kX3BhbGV0dGVcIl1bXCJibG9ja193aWR0aFwiXVxyXG5cclxuICAgIC8vIHNldCB1cCBncmlkIGZvciBDb21tYW5kIFBhbGV0dGVcclxuICAgIC8vIGFzc2lnbiByb3cgYW5kIGNvbHVtbiB2YWx1ZXMgdG8gZ3JpZCBibG9ja3NcclxuICAgIGZvciAodmFyIHIgPSAwOyByIDwgY29tbWFuZFBhbGV0dGVIOyByKyspIHtcclxuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvbW1hbmRQYWxldHRlVzsgYysrKSB7XHJcbiAgICAgICAgICAgIG5ldyBHcmlkQmxvY2soZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIHIsIGMsIHBhbGV0dGVDb2xvcik7XHJcbiAgICAgICAgICAgIHhPZmZzZXQgKz0gNTU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlPZmZzZXQgKz0gNTU7XHJcbiAgICAgICAgbWF4WE9mZnNldCA9IHhPZmZzZXQ7XHJcbiAgICAgICAgeE9mZnNldCA9IDU7XHJcbiAgICB9XHJcblxyXG4gICAgbWF4WU9mZnNldCA9IHlPZmZzZXQ7XHJcbiAgICB5T2Zmc2V0ID0gbWF4WU9mZnNldCArIDIwO1xyXG5cclxuICAgIC8vIHNldCB1cCBDb21tYW5kIEJsb2NrIEJ1dHRvbnNcclxuICAgIC8vIENPTlNJREVSOiBBY2NvbW1vZGF0aW5nIGZvciBjb21tYW5kIHBhbGV0dGUgd2lkdGhcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxPYmpbXCJjb21tYW5kX2Jsb2Nrc1wiXS5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICBzd2l0Y2gobGV2ZWxPYmpbXCJjb21tYW5kX2Jsb2Nrc1wiXVtpXSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic3RhcnRcIjpcclxuICAgICAgICAgICAgICAgIGxldCBzdGFydEJsb2NrID0gbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ0aGlzdGxlXCIsIENvbW1hbmRUeXBlcy5TdGFydCk7XHJcbiAgICAgICAgICAgICAgICBuZXcgVGhyZWFkT2JzZXJ2ZXIoZ2FtZVN0YXRlLCBzdGFydEJsb2NrLngsIHN0YXJ0QmxvY2sueSwgc3RhcnRCbG9jay5oLCBzdGFydEJsb2NrLncsIGNvbW1hbmRQYWxldHRlSCAqIGNvbW1hbmRQYWxldHRlVywgc3RhcnRCbG9jay51cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgbGV0IG1vdmVCbG9jayA9IG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuTW92ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgdXAgc2xpZGVyLCBwYXNzIGluIHJlZmVyZW5jZSB0byBtb3ZlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBuZXcgU2xpZGVyKGdhbWVTdGF0ZSwgeE9mZnNldCArIDIwLCB5T2Zmc2V0ICsgNjAsIDEwMCwgQ29tbWFuZFR5cGVzLk1vdmUsIG1vdmVCbG9jay51cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYW5nbGVcIjpcclxuICAgICAgICAgICAgICAgIGxldCBhbmdsZUJsb2NrID0gbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ0aGlzdGxlXCIsIENvbW1hbmRUeXBlcy5BbmdsZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgdXAgc2xpZGVyLCBwYXNzIGluIHJlZmVyZW5jZSB0byBhbmdsZSBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgbmV3IFNsaWRlcihnYW1lU3RhdGUsIHhPZmZzZXQgKyAyMCwgeU9mZnNldCArIDYwLCAzNjAsIENvbW1hbmRUeXBlcy5BbmdsZSwgYW5nbGVCbG9jay51cGRhdGVEYXRhLCA4KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwidGhyZWFkXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZFR5cGVzLlRocmVhZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImxhc2VyXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcImdyZWVuXCIsIENvbW1hbmRUeXBlcy5MYXNlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNjYW5cIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwiZGFya2JsdWVcIiwgQ29tbWFuZFR5cGVzLlNjYW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJncmFwcGxlXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcIm1hcm9vblwiLCBDb21tYW5kVHlwZXMuR3JhcHBsZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgeE9mZnNldCArPSA1NTtcclxuICAgIH1cclxuXHJcbiAgICB4T2Zmc2V0ID0gbWF4WE9mZnNldCArIDIwO1xyXG4gICAgeU9mZnNldCA9IDU7XHJcblxyXG4gICAgLy8gc2V0IHVwIEZsb3cgQmxvY2sgQnV0dG9uc1xyXG4gICAgLy8gQ09OU0lERVI6IEFjY29tbW9kYXRpbmcgZm9yIGNvbW1hbmQgcGFsZXR0ZSBoZWlnaHRcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxPYmpbXCJmbG93X2Jsb2Nrc1wiXS5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICBzd2l0Y2gobGV2ZWxPYmpbXCJmbG93X2Jsb2Nrc1wiXVtpXSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidXBcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5VcCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5MZWZ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5SaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRvd25cIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5Eb3duKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB5T2Zmc2V0ICs9IDU1O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9jaywgQ29tbWFuZEJsb2NrQnV0dG9uIH0gZnJvbSBcIi4vQ29tbWFuZEJsb2NrXCI7XHJcbmltcG9ydCB7IEdyaWRCbG9jayB9IGZyb20gXCIuL0dyaWRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2ssIEZsb3dCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0Zsb3dCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMsIEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IHN0YXJ0TmV3VGhyZWFkQ2FsbCB9IGZyb20gXCIuL1Byb2dyYW1FeGVjdXRpb25cIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vU2xpZGVyXCI7XHJcbmltcG9ydCB7IFRocmVhZE9ic2VydmVyIH0gZnJvbSBcIi4vVGhyZWFkT2JzZXJ2ZXJcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTZXRVcEV2ZW50TGlzdGVuZXJzKGdhbWVTdGF0ZTogR2FtZVN0YXRlKSB7XHJcbiAgICBnYW1lU3RhdGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBDb2xsaXNpb24gZGV0ZWN0aW9uIGJldHdlZW4gY2xpY2tlZCBvZmZzZXQgYW5kIGJsb2NrLlxyXG4gICAgICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChnYW1lU3RhdGUubW91c2VZID4gYmxvY2sueSAmJiBnYW1lU3RhdGUubW91c2VZIDwgYmxvY2sueSArIGJsb2NrLmhcclxuICAgICAgICAgICAgICAgICYmIGdhbWVTdGF0ZS5tb3VzZVggPiBibG9jay54ICYmIGdhbWVTdGF0ZS5tb3VzZVggPCBibG9jay54ICsgYmxvY2sudykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgQ29tbWFuZEJsb2NrICYmIGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIHx8IGJsb2NrIGluc3RhbmNlb2YgQ29tbWFuZEJsb2NrQnV0dG9uICYmIGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIHx8IGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrICYmIGdhbWVTdGF0ZS5mbG93Q29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIHx8IGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrQnV0dG9uICYmIGdhbWVTdGF0ZS5mbG93Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChibG9jayBpbnN0YW5jZW9mIEdyaWRCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHJhZGlvIGJ1dHRvbiBmb3IgZmxvdyBvciBjb21tYW5kIGNvbnRyb2xcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNvbW1hbmREYXRhLnR5cGUgPSBDb21tYW5kVHlwZXMuRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVTdGF0ZS5mbG93Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5mbG93VHlwZSA9IEZsb3dUeXBlcy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIHNsaWRlcnMgYmVpbmcgY2xpY2tlZFxyXG4gICAgICAgIGdhbWVTdGF0ZS51c2VySW50ZXJmYWNlcy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICBpZiAocyBpbnN0YW5jZW9mIFNsaWRlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5tb3VzZVkgPiBzLnNsaWRlclkgJiYgZ2FtZVN0YXRlLm1vdXNlWSA8IHMuc2xpZGVyWSArIHMuc2xpZGVySFxyXG4gICAgICAgICAgICAgICAgICAgICYmIGdhbWVTdGF0ZS5tb3VzZVggPiBzLnNsaWRlclggJiYgZ2FtZVN0YXRlLm1vdXNlWCA8IHMuc2xpZGVyWCArIHMuc2xpZGVyVykge1xyXG4gICAgICAgICAgICAgICAgICAgIHMubW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocyBpbnN0YW5jZW9mIFRocmVhZE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLm1vdXNlWSA+IHMueSAmJiBnYW1lU3RhdGUubW91c2VZIDwgcy55ICsgcy5oXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IHMueCAmJiBnYW1lU3RhdGUubW91c2VYIDwgcy54ICsgcy53KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICAvLyBtYWtlIHN1cmUgYWxsIGNsaWNrYWJsZSBlbnRpdGllcyBhcmVuJ3QgY2xpY2thYmxlIG9uIG1vdXNldXBcclxuICAgIGdhbWVTdGF0ZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGZ1bmN0aW9uKCkgOiB2b2lkIHtcclxuICAgICAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2tcclxuICAgICAgICAgICAgICAgIHx8IGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2subW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2subW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2subW91c2VVcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGdhbWVTdGF0ZS51c2VySW50ZXJmYWNlcy5mb3JFYWNoKHVzZXJJbnRlcmZhY2UgPT4ge1xyXG4gICAgICAgICAgICB1c2VySW50ZXJmYWNlLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAodXNlckludGVyZmFjZSBpbnN0YW5jZW9mIFRocmVhZE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICB1c2VySW50ZXJmYWNlLm1vdXNlVXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgZmFsc2UpO1xyXG5cclxuICAgIGdhbWVTdGF0ZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24oZXZ0OiBNb3VzZUV2ZW50KSA6IHZvaWQge1xyXG4gICAgICAgIGdhbWVTdGF0ZS5tb3VzZVggPSAoZXZ0LmNsaWVudFggLSBnYW1lU3RhdGUucmVjdC5sZWZ0KSAvIChnYW1lU3RhdGUucmVjdC5yaWdodCAtIGdhbWVTdGF0ZS5yZWN0LmxlZnQpICogZ2FtZVN0YXRlLmNhbnZhcy53aWR0aDtcclxuICAgICAgICBnYW1lU3RhdGUubW91c2VZID0gKGV2dC5jbGllbnRZIC0gZ2FtZVN0YXRlLnJlY3QudG9wKSAvIChnYW1lU3RhdGUucmVjdC5ib3R0b20gLSBnYW1lU3RhdGUucmVjdC50b3ApICogZ2FtZVN0YXRlLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgd2luZG93Lm9ua2V5dXAgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgLy8gaS5lLiBTcGFjZUJhciBwcmVzc2VkXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzIpIHtcclxuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5mbG93Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmZsb3dDb250cm9sID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb21tYW5kIENvbnRyb2whXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuZmxvd0NvbnRyb2wgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGbG93IENvbnRyb2whXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpLmUuIFMga2V5IHByZXNzZWRcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSA4Mykge1xyXG4gICAgICAgICAgICBpZiAoIWdhbWVTdGF0ZS5wcm9ncmFtUnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgcHJvZ3JhbVxyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TmV3VGhyZWFkQ2FsbChnYW1lU3RhdGUsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIFMga2V5IGlzIHByZXNzZWQgd2hpbGUgcHJvZ3JhbSBpcyBydW5uaW5nXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc3RvcCBwcm9ncmFtXHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUucHJvZ3JhbVJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=