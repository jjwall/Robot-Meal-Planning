!function(t){var e={};function a(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=t,a.c=e,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)a.d(n,o,function(e){return t[e]}.bind(null,o));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var n,o,s=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.sliders=t&&t.sliders||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),i=a(0),r=function(){function t(t,e,a,n,o,s){this.GameState=t,this.X=e,this.Y=a,this.H=n,this.W=o,this.Color=s,this.gameState=t,this.x=e,this.y=a,this.h=n,this.w=o,this.color=s}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(n||(n={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(o||(o={}));var c=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),l=function(t){function e(e,a,o,s,i,r,c,l,h){var u=t.call(this,e,a,o,s,i,l)||this;switch(u.baseUnits=r,u.callCount=c,u.totalUnits=u.baseUnits*u.callCount,u.mouseDown=!0,u.set=!1,u.type=h,u.image=new Image,h){case n.Start:u.image.src="data/textures/StartBlock.png";break;case n.Move:u.image.src="data/textures/MoveBlock.png";break;case n.Angle:u.image.src="data/textures/AngleBlock.png";break;case n.Thread:u.image.src="data/textures/ThreadBlock.png"}return u.gameState.blocks.push(u),u}return c(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),h=function(t){function e(e,a,o,s,i,r,c){var l=t.call(this,e,a,o,s,i,r)||this;switch(l.updateData=function(t,e){l.callCount=t,l.baseUnits=e,l.totalUnits=l.baseUnits*l.callCount},l.mouseDown=!1,l.type=c,l.image=new Image,l.baseUnits=0,l.callCount=0,l.totalUnits=0,c){case n.Start:l.image.src="data/textures/StartBlock.png";break;case n.Move:l.image.src="data/textures/MoveBlock.png";break;case n.Angle:l.image.src="data/textures/AngleBlock.png";break;case n.Thread:l.image.src="data/textures/ThreadBlock.png"}return l.gameState.blocks.push(l),l}return c(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new l(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),u=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),m=function(t){function e(e,a,n,s,i,r,c){var l=t.call(this,e,a,n,s,i,r)||this;switch(l.gameState=e,l.type=c,l.mouseDown=!0,l.set=!1,l.image=new Image,c){case o.Up:l.image.src="data/textures/UpArrow.png";break;case o.Down:l.image.src="data/textures/DownArrow.png";break;case o.Left:l.image.src="data/textures/LeftArrow.png";break;case o.Right:l.image.src="data/textures/RightArrow.png"}return l.gameState.blocks.push(l),l}return u(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),f=function(t){function e(e,a,n,s,i,r,c){var l=t.call(this,e,a,n,s,i,r)||this;switch(l.type=c,l.mouseDown=!1,l.image=new Image,c){case o.Up:l.image.src="data/textures/UpArrow.png";break;case o.Down:l.image.src="data/textures/DownArrow.png";break;case o.Left:l.image.src="data/textures/LeftArrow.png";break;case o.Right:l.image.src="data/textures/RightArrow.png"}return l.gameState.blocks.push(l),l}return u(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new m(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),p=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),g=function(t){function e(e,a,s,i,r,c,l,h){var u=t.call(this,e,a,s,i,r,h)||this;return u.r=c,u.c=l,u.flowType=o.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,callCount:0,type:n.Empty},u}return p(e,t),e.prototype.update=function(){var t=this;this.gameState.blocks.forEach(function(e){(e instanceof l||e instanceof m)&&!1===e.mouseDown&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.commandData.type===n.Empty&&e instanceof l?(e.x=t.x,e.y=t.y,e.set=!0,t.commandData.type=e.type,t.commandData.baseUnits=e.baseUnits,t.commandData.callCount=e.callCount,t.commandData.totalUnits=e.totalUnits,t.currentCallCount=e.callCount):t.flowType===o.Empty&&e instanceof m&&(e.x=t.x,e.y=t.y,e.set=!0,t.flowType=e.type))})},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r),d=function(){function t(t,e,a,n,o,s,i){void 0===i&&(i=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=n,this.snapAmount=i,this.updateDataCallBack=s,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=o,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.gameState.sliders.push(this);var r=Math.round(this.value*this.maxUnits/this.baseUnits);this.updateDataCallBack(r,this.baseUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH;var e=Math.round(this.value*this.maxUnits/this.baseUnits);this.updateDataCallBack(e,this.baseUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}();function w(t,e){var a,s;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case o.Up:a=e.r-1,s=e.c;break;case o.Down:a=e.r+1,s=e.c;break;case o.Right:s=e.c+1,a=e.r;break;case o.Left:s=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof g&&e.r===a&&e.c===s&&e.commandData.type!==n.Empty&&e.flowType!==o.Empty)switch(e.commandData.type){case n.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):w(t,e)}(t,e)},t.nextStack.push(e);break;case n.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):w(t,e)}(t,e)},t.nextStack.push(e);break;case n.Start:e.call=function(){return function(t,e){console.log("start"),w(t,e)}(t,e)},t.nextStack.push(e)}})}var y=new s;!function(t,e,a){for(var s=5,i=5,r=0,c=0;c<e.command_palette.block_height;c++){for(var l=0;l<e.command_palette.block_width;l++)new g(t,i,s,50,50,c,l,a),i+=55;s+=55,r=i,i=5}s+=20;for(var u=0;u<e.command_blocks.length;u++){switch(e.command_blocks[u]){case"start":new h(t,i,s,50,50,"thistle",n.Start);break;case"move":var m=new h(t,i,s,50,50,"thistle",n.Move);new d(t,i+20,s+60,100,n.Move,m.updateData);break;case"angle":var p=new h(t,i,s,50,50,"thistle",n.Angle);new d(t,i+20,s+60,360,n.Angle,p.updateData,8);break;case"thread":new h(t,i,s,50,50,"thistle",n.Thread);break;case"laser":new h(t,i,s,50,50,"green",n.Laser);break;case"scan":new h(t,i,s,50,50,"darkblue",n.Scan);break;case"grapple":new h(t,i,s,50,50,"maroon",n.Grapple)}i+=55}for(i=r+20,s=5,u=0;u<e.flow_blocks.length;u++){switch(e.flow_blocks[u]){case"up":new f(t,i,s,50,50,"yellow",o.Up);break;case"left":new f(t,i,s,50,50,"yellow",o.Left);break;case"right":new f(t,i,s,50,50,"yellow",o.Right);break;case"down":new f(t,i,s,50,50,"yellow",o.Down)}s+=55}}(y,i,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof l&&t.commandControl||e instanceof h&&t.commandControl||e instanceof m&&t.flowControl||e instanceof f&&t.flowControl?e.mouseDown=!0:e instanceof g&&(t.commandControl?e.commandData.type=n.Empty:t.flowControl&&(e.flowType=o.Empty)))}),t.sliders.forEach(function(e){t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0)})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof l||t instanceof m)&&t.mouseDown&&(t.mouseDown=!1)}),t.sliders.forEach(function(t){t.mouseDown=!1})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning||(t.programRunning=!0,function(t,e){t.blocks.forEach(function(e){e instanceof g&&e.commandData.type===n.Start&&e.flowType!==o.Empty&&w(t,e)})}(t)))}}(y),setInterval(function(){y.blocks.forEach(function(t){t.update()}),y.sliders.forEach(function(t){t.update()}),y.ctx.clearRect(0,0,y.canvas.width,y.canvas.height),y.ctx.beginPath(),y.sliders.forEach(function(t){t.draw()}),y.blocks.forEach(function(t){t instanceof m||t.draw()}),y.blocks.forEach(function(t){t instanceof m&&t.draw()}),y.ctx.stroke();var t=y.nextStack;y.nextStack=[],t.length>0?t.forEach(function(t){t.currentCallCount>0?(t.call(),y.nextStack.push(t)):t.call()}):y.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRW51bXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Jhc2VCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbWFuZEJsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy9GbG93QmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dyaWRCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9Qcm9ncmFtRXhlY3V0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy8uL3NyYy9HZW5lcmF0ZUxldmVsLnRzIiwid2VicGFjazovLy8uL3NyYy9TZXRVcEV2ZW50TGlzdGVuZXJzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ29tbWFuZFR5cGVzIiwiRmxvd1R5cGVzIiwiR2FtZVN0YXRlX0dhbWVTdGF0ZSIsIm9iaiIsInRoaXMiLCJjYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3R4IiwiZ2V0Q29udGV4dCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJibG9ja3MiLCJzbGlkZXJzIiwibW91c2VYIiwibW91c2VZIiwiY29tbWFuZENvbnRyb2wiLCJmbG93Q29udHJvbCIsIm5leHRTdGFjayIsInByb2dyYW1SdW5uaW5nIiwiQmFzZUJsb2NrIiwiR2FtZVN0YXRlIiwiWCIsIlkiLCJIIiwiVyIsIkNvbG9yIiwiZ2FtZVN0YXRlIiwieCIsInkiLCJoIiwidyIsImNvbG9yIiwiZHJhdyIsInVwZGF0ZSIsIkNvbW1hbmRCbG9ja19Db21tYW5kQmxvY2siLCJfc3VwZXIiLCJDb21tYW5kQmxvY2siLCJVbml0cyIsIkNhbGxDb3VudCIsIlR5cGUiLCJfdGhpcyIsImJhc2VVbml0cyIsImNhbGxDb3VudCIsInRvdGFsVW5pdHMiLCJtb3VzZURvd24iLCJzZXQiLCJ0eXBlIiwiaW1hZ2UiLCJJbWFnZSIsIlN0YXJ0Iiwic3JjIiwiTW92ZSIsIkFuZ2xlIiwiVGhyZWFkIiwicHVzaCIsIl9fZXh0ZW5kcyIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiZm9udCIsIm9mZnNldFgiLCJmaWxsVGV4dCIsInRvU3RyaW5nIiwiQ29tbWFuZEJsb2NrX0NvbW1hbmRCbG9ja0J1dHRvbiIsIkNvbW1hbmRCbG9ja0J1dHRvbiIsInVwZGF0ZURhdGEiLCJjYWxjdWxhdGVkQ2FsbENvdW50IiwiRmxvd0Jsb2NrX0Zsb3dCbG9jayIsIkZsb3dCbG9jayIsIlVwIiwiRG93biIsIkxlZnQiLCJSaWdodCIsIkZsb3dCbG9ja19leHRlbmRzIiwic3Ryb2tlU3R5bGUiLCJGbG93QmxvY2tfRmxvd0Jsb2NrQnV0dG9uIiwiRmxvd0Jsb2NrQnV0dG9uIiwiR3JpZEJsb2NrX0dyaWRCbG9jayIsIkdyaWRCbG9jayIsIlJvdyIsIkNvbHVtbiIsImZsb3dUeXBlIiwiRW1wdHkiLCJjb21tYW5kRGF0YSIsIkdyaWRCbG9ja19leHRlbmRzIiwiZm9yRWFjaCIsImJsb2NrIiwiY3VycmVudENhbGxDb3VudCIsIlNsaWRlciIsIk1heFVuaXRzIiwiVXBkYXRlRGF0YUNhbGxCYWNrIiwiU25hcEFtb3VudCIsIm1heFVuaXRzIiwic25hcEFtb3VudCIsInVwZGF0ZURhdGFDYWxsQmFjayIsIk1hdGgiLCJyb3VuZCIsImJhckgiLCJiYXJXIiwiYmFyWCIsImJhclkiLCJiYXJDb2xvciIsInNsaWRlckgiLCJzbGlkZXJXIiwic2xpZGVyWCIsInNsaWRlclkiLCJzbGlkZXJDb2xvciIsInBlcmNlbnRhZ2UiLCJ0ZW1wU2xpZGVyWSIsImZpbmROZXh0Q2FsbCIsInByZXZCbG9jayIsInRhcmdldFJvdyIsInRhcmdldENvbCIsImNvbnNvbGUiLCJsb2ciLCJhbmdsZUNhbGwiLCJtb3ZlQ2FsbCIsInN0YXJ0Q2FsbCIsIm1haW5fZ2FtZVN0YXRlIiwibGV2ZWxPYmoiLCJwYWxldHRlQ29sb3IiLCJ5T2Zmc2V0IiwieE9mZnNldCIsIm1heFhPZmZzZXQiLCJsZW5ndGgiLCJtb3ZlQmxvY2siLCJhbmdsZUJsb2NrIiwiTGFzZXIiLCJTY2FuIiwiR3JhcHBsZSIsIkdlbmVyYXRlTGV2ZWwiLCJsZXZlbDEiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwiY2xpZW50WCIsImxlZnQiLCJyaWdodCIsIndpZHRoIiwiY2xpZW50WSIsInRvcCIsImJvdHRvbSIsImhlaWdodCIsIndpbmRvdyIsIm9ua2V5dXAiLCJlIiwia2V5Q29kZSIsInRocmVhZCIsInN0YXJ0TmV3VGhyZWFkQ2FsbCIsIlNldFVwRXZlbnRMaXN0ZW5lcnMiLCJzZXRJbnRlcnZhbCIsInNsaWRlciIsImNsZWFyUmVjdCIsImJlZ2luUGF0aCIsInN0cm9rZSIsImNhbGxTdGFjayJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FB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aUUsR0FDdEJBLEVBQU8xSCxTQUlYMEYsRUFBVS9HLE9BQU84RSxRQUFRLFNBQUFDLEdBQ2ZBLGFBQWlCbkIsR0FDbkJtQixFQUFNMUQsU0FLZDBGLEVBQVUvRyxPQUFPOEUsUUFBUSxTQUFBQyxHQUNqQkEsYUFBaUJuQixHQUNqQm1CLEVBQU0xRCxTQUlkMEYsRUFBVW5ILElBQUlzSixTQWlCZCxJQUFNQyxFQUFZcEMsRUFBVXpHLFVBQzVCeUcsRUFBVXpHLGFBRU42SSxFQUFVOUIsT0FBUyxFQUNuQjhCLEVBQVVyRSxRQUFRLFNBQUFDLEdBRVZBLEVBQU1DLGlCQUFtQixHQUN6QkQsRUFBTXhILE9BQ053SixFQUFVekcsVUFBVXFDLEtBQUtvQyxJQUl6QkEsRUFBTXhILFNBS2R3SixFQUFVeEcsZ0JBQWlCLEdBRWhDIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vU2xpZGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlIHtcclxuICAgIHJlYWRvbmx5IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHJlYWRvbmx5IHJlY3Q6IENsaWVudFJlY3QgfCBET01SZWN0O1xyXG4gICAgcHVibGljIGJsb2NrczogQmFzZUJsb2NrW107XHJcbiAgICBwdWJsaWMgc2xpZGVyczogU2xpZGVyW107XHJcbiAgICBwdWJsaWMgbW91c2VYOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbW91c2VZOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY29tbWFuZENvbnRyb2w6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgZmxvd0NvbnRyb2w6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgbmV4dFN0YWNrOiBHcmlkQmxvY2tbXTtcclxuICAgIHB1YmxpYyBwcm9ncmFtUnVubmluZzogYm9vbGVhbjtcclxuICAgIGNvbnN0cnVjdG9yKG9iaj86IElHYW1lU3RhdGUpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IG9iaiAmJiBvYmouY2FudmFzIHx8IDxIVE1MQ2FudmFzRWxlbWVudD4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lU2NyZWVuXCIpO1xyXG4gICAgICAgIHRoaXMuY3R4ID0gb2JqICYmIG9iai5jdHggfHwgPENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRD4gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMucmVjdCA9IG9iaiAmJiBvYmoucmVjdCB8fCA8Q2xpZW50UmVjdCB8IERPTVJlY3Q+IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHRoaXMuYmxvY2tzID0gb2JqICYmIG9iai5ibG9ja3MgfHwgW107XHJcbiAgICAgICAgdGhpcy5zbGlkZXJzID0gb2JqICYmIG9iai5zbGlkZXJzIHx8IFtdO1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gb2JqICYmIG9iai5tb3VzZVggfHwgMDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IG9iaiAmJiBvYmoubW91c2VZIHx8IDA7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kQ29udHJvbCA9IG9iaiAmJiBvYmouY29tbWFuZENvbnRyb2wgfHwgdHJ1ZTtcclxuICAgICAgICB0aGlzLmZsb3dDb250cm9sID0gb2JqICYmIG9iai5mbG93Q29udHJvbCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLm5leHRTdGFjayA9IG9iaiAmJiBvYmoubmV4dFN0YWNrIHx8IFtdO1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbVJ1bm5pbmcgPSBvYmogJiYgb2JqLnByb2dyYW1SdW5uaW5nIHx8IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHYW1lU3RhdGUge1xyXG4gICAgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHJlYWRvbmx5IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcmVhZG9ubHkgcmVjdDogQ2xpZW50UmVjdCB8IERPTVJlY3Q7XHJcbiAgICBibG9ja3M6IEJhc2VCbG9ja1tdO1xyXG4gICAgc2xpZGVyczogU2xpZGVyW107XHJcbiAgICBtb3VzZVg6IG51bWJlcjtcclxuICAgIG1vdXNlWTogbnVtYmVyO1xyXG4gICAgY29tbWFuZENvbnRyb2w6IGJvb2xlYW47XHJcbiAgICBmbG93Q29udHJvbDogYm9vbGVhbjtcclxuICAgIG5leHRTdGFjazogYW55W107XHJcbiAgICBwcm9ncmFtUnVubmluZzogYm9vbGVhbjtcclxufSIsImV4cG9ydCBlbnVtIENvbW1hbmRUeXBlcyB7XHJcbiAgICBFbXB0eSxcclxuICAgIFN0YXJ0LFxyXG4gICAgTW92ZSxcclxuICAgIEFuZ2xlLFxyXG4gICAgVGhyZWFkLFxyXG4gICAgU2NhbixcclxuICAgIExhc2VyLFxyXG4gICAgR3JhcHBsZVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBGbG93VHlwZXMge1xyXG4gICAgRW1wdHksXHJcbiAgICBVcCxcclxuICAgIERvd24sXHJcbiAgICBMZWZ0LFxyXG4gICAgUmlnaHQsXHJcbiAgICBDb25kaXRpb25hbExlZnRSaWdodCxcclxuICAgIENvbmRpdGlvbmFsTGVmdFVwLFxyXG4gICAgQ29uZGl0aW9uYWxMZWZ0RG93bixcclxuICAgIENvbmRpdGlvbmFsVXBSaWdodCxcclxuICAgIENvbmRpdGlvbmFsVXBEb3duLFxyXG4gICAgQ29uZGl0aW9uYWxEb3duUmlnaHRcclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgR2FtZVN0YXRlOiBHYW1lU3RhdGUsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgWDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIFk6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBIOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgVzogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIENvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLnggPSBYO1xyXG4gICAgICAgIHRoaXMueSA9IFk7XHJcbiAgICAgICAgdGhpcy5oID0gSDtcclxuICAgICAgICB0aGlzLncgPSBXO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCk6IHZvaWQge30gXHJcbiAgICB1cGRhdGUoKTogdm9pZCB7fVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBJQ29tbWFuZERhdGEgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21tYW5kQmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sgaW1wbGVtZW50cyBJQ29tbWFuZERhdGEge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBiYXNlVW5pdHM6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNhbGxDb3VudDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdG90YWxVbml0czogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgc2V0OiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogQ29tbWFuZFR5cGVzO1xyXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBVbml0czogbnVtYmVyLCBDYWxsQ291bnQ6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogQ29tbWFuZFR5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy5iYXNlVW5pdHMgPSBVbml0cztcclxuICAgICAgICB0aGlzLmNhbGxDb3VudCA9IENhbGxDb3VudDtcclxuICAgICAgICB0aGlzLnRvdGFsVW5pdHMgPSB0aGlzLmJhc2VVbml0cyAqIHRoaXMuY2FsbENvdW50O1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvU3RhcnRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTW92ZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLkFuZ2xlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvQW5nbGVCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5UaHJlYWQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9UaHJlYWRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBkcmFnIGNvbW1hbmQgYmxvY2tcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5nYW1lU3RhdGUubW91c2VYIC0gdGhpcy53LzI7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWSAtIHRoaXMuaC8yO1xyXG4gICAgICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZGVsZXRlIGlmIGRyb3BwaW5nIGJsb2NrIGFuZCBpdCBkb2Vzbid0IGhhdmUgYSBlbXB0eSBncmlkIGJsb2NrIHRvIGJlIHNldCBvblxyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZURvd24gJiYgIXRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5mb250ID0gXCIxNXB4IEFyaWFsXCI7XHJcbiAgICAgICAgbGV0IG9mZnNldFggPSAzMDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudG90YWxVbml0cyA+IDk5KSB7XHJcbiAgICAgICAgICAgIG9mZnNldFggPSAyNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy50b3RhbFVuaXRzIDwgMTApIHtcclxuICAgICAgICAgICAgb2Zmc2V0WCA9IDM1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxUZXh0KCh0aGlzLnRvdGFsVW5pdHMpLnRvU3RyaW5nKCksIHRoaXMueCArIG9mZnNldFgsIHRoaXMueSArIDQ4KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBvbkNsaWNrKCkge1xyXG4gICAgLy8gfVxyXG59XHJcblxyXG4vLyBDT05TSURFUjogZXh0ZW5kaW5nIENvbW1hbmRCbG9jayBjbGFzc1xyXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJsb2NrQnV0dG9uIGV4dGVuZHMgQmFzZUJsb2NrIGltcGxlbWVudHMgSUNvbW1hbmREYXRhIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcHVibGljIGJhc2VVbml0czogbnVtYmVyO1xyXG4gICAgcHVibGljIGNhbGxDb3VudDogbnVtYmVyO1xyXG4gICAgcHVibGljIHRvdGFsVW5pdHM6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogQ29tbWFuZFR5cGVzO1xyXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBDb21tYW5kVHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuYmFzZVVuaXRzID0gMDtcclxuICAgICAgICB0aGlzLmNhbGxDb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbFVuaXRzID0gMDtcclxuICAgICAgICBzd2l0Y2goVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5TdGFydDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1N0YXJ0QmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuTW92ZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL01vdmVCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5BbmdsZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0FuZ2xlQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuVGhyZWFkOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVGhyZWFkQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBmdW5jdGlvbiB0byBiZSBwYXNzZWQgaW4gYXMgcmVmZXJlbmNlIHRvIGNvcnJlc3BvbmRpbmcgVUkuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVEYXRhID0gKGNhbGN1bGF0ZWRDYWxsQ291bnQ6IG51bWJlciwgYmFzZVVuaXRzOiBudW1iZXIpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLmNhbGxDb3VudCA9IGNhbGN1bGF0ZWRDYWxsQ291bnQ7XHJcbiAgICAgICAgdGhpcy5iYXNlVW5pdHMgPSBiYXNlVW5pdHM7XHJcbiAgICAgICAgdGhpcy50b3RhbFVuaXRzID0gdGhpcy5iYXNlVW5pdHMgKiB0aGlzLmNhbGxDb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgbmV3IENvbW1hbmRCbG9jayh0aGlzLmdhbWVTdGF0ZSwgdGhpcy54LCB0aGlzLnksIHRoaXMuaCwgdGhpcy53LCB0aGlzLmJhc2VVbml0cywgdGhpcy5jYWxsQ291bnQsIHRoaXMuQ29sb3IsIHRoaXMudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZm9udCA9IFwiMTVweCBBcmlhbFwiO1xyXG4gICAgICAgIGxldCBvZmZzZXRYID0gMzA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsVW5pdHMgPiA5OSkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMjU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnRvdGFsVW5pdHMgPCAxMCkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMzU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFRleHQoKHRoaXMudG90YWxVbml0cykudG9TdHJpbmcoKSwgdGhpcy54ICsgb2Zmc2V0WCwgdGhpcy55ICsgNDgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBleHBvcnQgZnVuY3Rpb24gaXNDb21tYW5kQmxvY2sob2JqOiBvYmplY3QpIDogb2JqIGlzIENvbW1hbmRCbG9jayB7XHJcbi8vICAgICB2YXIgY29tbWFuZEJsb2NrT2JqIDogQ29tbWFuZEJsb2NrID0gPENvbW1hbmRCbG9jaz5vYmo7XHJcbiAgICBcclxuLy8gICAgIHJldHVybiBjb21tYW5kQmxvY2tPYmoubW91c2VEb3duICE9PSB1bmRlZmluZWQ7XHJcbi8vIH0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRmxvd0Jsb2NrIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHJlYWRvbmx5IHR5cGU6IEZsb3dUeXBlcztcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcHVibGljIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBzZXQ6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIENvbG9yOiBzdHJpbmcsIFR5cGU6IEZsb3dUeXBlcykge1xyXG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZSwgWCwgWSwgSCwgVywgQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLlVwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVXBBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5Eb3duOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvRG93bkFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkxlZnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9MZWZ0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9SaWdodEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIGRyYWcgZmxvdyBibG9ja1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVggLSB0aGlzLncvMjtcclxuICAgICAgICAgICAgdGhpcy55ID0gdGhpcy5nYW1lU3RhdGUubW91c2VZIC0gdGhpcy5oLzI7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkZWxldGUgaWYgZHJvcHBpbmcgYmxvY2sgYW5kIGl0IGRvZXNuJ3QgaGF2ZSBhIGVtcHR5IGdyaWQgYmxvY2sgdG8gYmUgc2V0IG9uXHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlRG93biAmJiAhdGhpcy5zZXQpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nYW1lU3RhdGUuYmxvY2tzLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKC10aGlzLngsIC10aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gQ09OU0lERVI6IEV4dGVuZGluZyBGbG93QmxvY2sgaGVyZVxyXG5leHBvcnQgY2xhc3MgRmxvd0Jsb2NrQnV0dG9uIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICByZWFkb25seSB0eXBlOiBGbG93VHlwZXM7XHJcbiAgICByZWFkb25seSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIENvbG9yOiBzdHJpbmcsIFR5cGU6IEZsb3dUeXBlcykge1xyXG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZSwgWCwgWSwgSCwgVywgQ29sb3IpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuVXA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9VcEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Eb3duQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuTGVmdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0xlZnRBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5SaWdodDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1JpZ2h0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuZXcgRmxvd0Jsb2NrKHRoaXMuZ2FtZVN0YXRlLCB0aGlzLngsIHRoaXMueSwgdGhpcy5oLCB0aGlzLncsIHRoaXMuQ29sb3IsIHRoaXMudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgucmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kQmxvY2sgfSBmcm9tIFwiLi9Db21tYW5kQmxvY2tcIjtcclxuaW1wb3J0IHsgRmxvd0Jsb2NrIH0gZnJvbSBcIi4vRmxvd0Jsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcywgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkQmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgcjogbnVtYmVyO1xyXG4gICAgcHVibGljIGM6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjb21tYW5kRGF0YTogSUNvbW1hbmREYXRhO1xyXG4gICAgcHVibGljIGN1cnJlbnRDYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBmbG93VHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcHVibGljIGNhbGw6IGFueTsgLy8gY2hhbmdlIHR5cGUgaGVyZSB0byBnZW5lcmljIG1ldGhvZCBzaWduYXR1cmVcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBSb3c6IG51bWJlciwgQ29sdW1uOiBudW1iZXIsIENvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLnIgPSBSb3c7XHJcbiAgICAgICAgdGhpcy5jID0gQ29sdW1uO1xyXG4gICAgICAgIHRoaXMuZmxvd1R5cGUgPSBGbG93VHlwZXMuRW1wdHk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRGF0YSA9IHtcclxuICAgICAgICAgICAgYmFzZVVuaXRzOiAwLFxyXG4gICAgICAgICAgICB0b3RhbFVuaXRzOiAwLFxyXG4gICAgICAgICAgICBjYWxsQ291bnQ6IDAsXHJcbiAgICAgICAgICAgIHR5cGU6IENvbW1hbmRUeXBlcy5FbXB0eVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBzZWUgaWYgY29tbWFuZCBibG9jayBpcyBiZWluZyBkcm9wcGVkIG9uIGVtcHR5IGdyaWQgYmxvY2tcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9ja1xyXG4gICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay5tb3VzZURvd24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrLnggPCB0aGlzLnggKyB0aGlzLncgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueCArIGJsb2NrLncgPiB0aGlzLnggJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA8IHRoaXMueSArIHRoaXMuaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5oICsgYmxvY2sueSA+IHRoaXMueSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbW1hbmREYXRhLnR5cGUgPT09IENvbW1hbmRUeXBlcy5FbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNuYXAgY29tbWFuZCBibG9jayB0byB0aGlzIGVtcHR5IGdyaWQgc3F1YXJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY29tbWFuZERhdGEgYW5kIGN1cnJlbnRDYWxsQ291bnQgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kRGF0YS50eXBlID0gYmxvY2sudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZERhdGEuYmFzZVVuaXRzID0gYmxvY2suYmFzZVVuaXRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kRGF0YS5jYWxsQ291bnQgPSBibG9jay5jYWxsQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMgPSBibG9jay50b3RhbFVuaXRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2FsbENvdW50ID0gYmxvY2suY2FsbENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZmxvd1R5cGUgPT09IEZsb3dUeXBlcy5FbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dUeXBlID0gYmxvY2sudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjb25kaXRpb25hbCBwcm9wZXJ0aWVzIGhlcmUgaWYgY29uZGl0aW9uYWwgYmxvY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiogSW50ZXJmYWNlIHRvIGNvbW11bmljYXRlIGNvbW1hbmQgZGF0YS5cclxuKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ29tbWFuZERhdGEge1xyXG4gICAgLyoqXHJcbiAgICAqIEFtb3VudCBvZiB1bml0cyBwZXIgY2FsbC5cclxuICAgICovXHJcbiAgICBiYXNlVW5pdHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgKiBUb3RhbCB1bml0cyBhZnRlciBhbGwgY2FsbChzKS5cclxuICAgICovXHJcbiAgICB0b3RhbFVuaXRzOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICogQW1vdW50IG9mIGNhbGxzIGZvciBhIHNpbmdsZSBwYXNzIG9mIGV4ZWN1dGlvbi5cclxuICAgICovXHJcbiAgICBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgKiBUeXBlIG9mIGNvbW1hbmQgZm9yIHRoZSBleGVjdXRpb24gcHJvY2Vzcy5cclxuICAgICovXHJcbiAgICB0eXBlOiBDb21tYW5kVHlwZXM7XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuLy8gbWF5YmUgYWRkIHN1cHBvcnQgZm9yIHRocmVhZCBzdGFydGVyP1xyXG5leHBvcnQgY2xhc3MgU2xpZGVyIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIHNuYXBBbW91bnQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcGVyY2VudGFnZTogbnVtYmVyO1xyXG4gICAgcHVibGljIHZhbHVlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdXBkYXRlRGF0YUNhbGxCYWNrOiAoY2FsY3VsYXRlZENhbGxDb3VudDogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlcikgPT4gdm9pZCA7XHJcbiAgICByZWFkb25seSBtYXhVbml0czogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSB0eXBlOiBDb21tYW5kVHlwZXMgfCBGbG93VHlwZXM7XHJcbiAgICBwdWJsaWMgc2xpZGVyWDogbnVtYmVyO1xyXG4gICAgcHVibGljIHNsaWRlclk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsaWRlckg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsaWRlclc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsaWRlckNvbG9yOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgYmFyWDogbnVtYmVyO1xyXG4gICAgcHVibGljIGJhclk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJhckg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJhclc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJhckNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWCA6bnVtYmVyLCBZOiBudW1iZXIsIE1heFVuaXRzOiBudW1iZXIsIFR5cGU6IENvbW1hbmRUeXBlcyB8IEZsb3dUeXBlcywgVXBkYXRlRGF0YUNhbGxCYWNrOiAoY2FsY3VsYXRlZENhbGxDb3VudDogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlcikgPT4gdm9pZCwgU25hcEFtb3VudDogbnVtYmVyID0gMTApIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubWF4VW5pdHMgPSBNYXhVbml0cztcclxuICAgICAgICB0aGlzLnNuYXBBbW91bnQgPSBTbmFwQW1vdW50O1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrID0gVXBkYXRlRGF0YUNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMuYmFzZVVuaXRzID0gTWF0aC5yb3VuZCh0aGlzLm1heFVuaXRzIC8gdGhpcy5zbmFwQW1vdW50KTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMuYmFySCA9IDc1O1xyXG4gICAgICAgIHRoaXMuYmFyVyA9IDEwO1xyXG4gICAgICAgIHRoaXMuYmFyWCA9IFg7XHJcbiAgICAgICAgdGhpcy5iYXJZID0gWTtcclxuICAgICAgICB0aGlzLmJhckNvbG9yID0gXCJ0aGlzdGxlXCI7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJIID0gMTA7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJXID0gMTU7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJYID0gWDtcclxuICAgICAgICB0aGlzLnNsaWRlclkgPSBZICsgdGhpcy5iYXJILzIgLSB0aGlzLnNsaWRlckgvMjtcclxuICAgICAgICB0aGlzLnNsaWRlckNvbG9yID0gXCJwdXJwbGVcIjtcclxuICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSAxIC0gKHRoaXMuc2xpZGVyWSAtIHRoaXMuYmFyWSArIHRoaXMuc2xpZGVySC8yKSAvIHRoaXMuYmFySDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gTWF0aC5yb3VuZCh0aGlzLnBlcmNlbnRhZ2UgKiB0aGlzLnNuYXBBbW91bnQpIC8gdGhpcy5zbmFwQW1vdW50O1xyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5zbGlkZXJzLnB1c2godGhpcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBkYXRhXHJcbiAgICAgICAgbGV0IGNhbGN1bGF0ZWRDYWxsQ291bnQgPSBNYXRoLnJvdW5kKCh0aGlzLnZhbHVlICogdGhpcy5tYXhVbml0cykvdGhpcy5iYXNlVW5pdHMpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKGNhbGN1bGF0ZWRDYWxsQ291bnQsIHRoaXMuYmFzZVVuaXRzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYmFyWSAtIHRoaXMuc2xpZGVySC8yIDwgdGhpcy5nYW1lU3RhdGUubW91c2VZICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhclkgKyB0aGlzLmJhckggLSB0aGlzLnNsaWRlckgvMiA+IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcFNsaWRlclkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVk7XHJcbiAgICAgICAgICAgICAgICAvLyBmaW5kIHBlcmNlbnRhZ2Ugc2xpZGVyIGlzIHVwIHZlcnRpY2FsIG9uIGJhclxyXG4gICAgICAgICAgICAgICAgdGhpcy5wZXJjZW50YWdlID0gMSAtICh0ZW1wU2xpZGVyWSAtIHRoaXMuYmFyWSArIHRoaXMuc2xpZGVySC8yKSAvIHRoaXMuYmFySDtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgdG8gYmUgdGhlIHJvdW5kZWQgcGVyY2VudGFnZSBiYXNlZCBvbiBzbmFwIGFtb3VudFxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IE1hdGgucm91bmQodGhpcy5wZXJjZW50YWdlICogdGhpcy5zbmFwQW1vdW50KSAvIHRoaXMuc25hcEFtb3VudDtcclxuICAgICAgICAgICAgICAgIC8vIHNldCBzbGlkZXJZIHZhbHVlIGJhc2VkIG9uIG5ldyB2YWx1ZSBmcm9tIHRoZSByb3VuZGVkIHBlcmNhbnRhZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGVyWSA9IHRoaXMuYmFySCArIHRoaXMuYmFyWSAtICh0aGlzLnNsaWRlckgvMikgLSAodGhpcy52YWx1ZSAqIHRoaXMuYmFySCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGNhbGN1bGF0ZWRDYWxsQ291bnQgPSBNYXRoLnJvdW5kKCh0aGlzLnZhbHVlICogdGhpcy5tYXhVbml0cykvdGhpcy5iYXNlVW5pdHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKGNhbGN1bGF0ZWRDYWxsQ291bnQsIHRoaXMuYmFzZVVuaXRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhdyBiYXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5iYXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5iYXJYLCB0aGlzLmJhclksIHRoaXMuYmFyVywgdGhpcy5iYXJIKTtcclxuXHJcbiAgICAgICAgLy8gZHJhdyBzbGlkZXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5zbGlkZXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5zbGlkZXJYIC0gdGhpcy5zbGlkZXJILzQsIHRoaXMuc2xpZGVyWSwgdGhpcy5zbGlkZXJXLCB0aGlzLnNsaWRlckgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEdyaWRCbG9jayB9IGZyb20gXCIuL0dyaWRCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMsIEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcblxyXG5mdW5jdGlvbiBtb3ZlQ2FsbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgYmxvY2s6IEdyaWRCbG9jaykge1xyXG4gICAgaWYgKGJsb2NrLmN1cnJlbnRDYWxsQ291bnQgPiAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJtb3ZlXCIpO1xyXG4gICAgICAgIGJsb2NrLmN1cnJlbnRDYWxsQ291bnQtLTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbmROZXh0Q2FsbChnYW1lU3RhdGUsIGJsb2NrKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYW5nbGVDYWxsKGdhbWVTdGF0ZTogR2FtZVN0YXRlLCBibG9jazogR3JpZEJsb2NrKSB7XHJcbiAgICBpZiAoYmxvY2suY3VycmVudENhbGxDb3VudCA+IDApIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcImFuZ2xlXCIpO1xyXG4gICAgICAgIGJsb2NrLmN1cnJlbnRDYWxsQ291bnQtLTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbmROZXh0Q2FsbChnYW1lU3RhdGUsIGJsb2NrKTtcclxuICAgIH1cclxufVxyXG5cclxuLy8gZnVuY3Rpb24gd2lsbCBvbmx5IGhhdmUgZmluZE5leHRFeGVjdXRpb24gYml0XHJcbi8vIHdvbid0IGRvIGFueXRoaW5nIGV4Y2VwdCBjb250aW51ZSBleGVjdXRpb24gaWYgcGxheWVycyB1c2UgaXQgbGlrZSBhIG5vcm1hbCBjb21tYW5kIGJsb2NrXHJcbmZ1bmN0aW9uIHN0YXJ0Q2FsbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgYmxvY2s6IEdyaWRCbG9jaykge1xyXG4gICAgY29uc29sZS5sb2coXCJzdGFydFwiKTtcclxuICAgIGZpbmROZXh0Q2FsbChnYW1lU3RhdGUsIGJsb2NrKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0TmV3VGhyZWFkQ2FsbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgdGhyZWFkOiBudW1iZXIpIHtcclxuICAgIC8vIGxvY2F0ZSB0aHJlYWRcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgIGlmIChibG9jay5jb21tYW5kRGF0YS50eXBlID09PSBDb21tYW5kVHlwZXMuU3RhcnQgLy8mJiB0aHJlYWROdW1iZXIgPT09IHRocmVhZFxyXG4gICAgICAgICAgICAgICAgJiYgYmxvY2suZmxvd1R5cGUgIT09IEZsb3dUeXBlcy5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgdGhyZWFkXHJcbiAgICAgICAgICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZE5leHRDYWxsKGdhbWVTdGF0ZTogR2FtZVN0YXRlLCBwcmV2QmxvY2s6IEdyaWRCbG9jaykgOiB2b2lkIHtcclxuICAgIGxldCB0YXJnZXRSb3c6IG51bWJlcjtcclxuICAgIGxldCB0YXJnZXRDb2w6IG51bWJlcjtcclxuICAgIC8vIHJlc2V0IGNhbGwgY291bnRcclxuICAgIHByZXZCbG9jay5jdXJyZW50Q2FsbENvdW50ID0gcHJldkJsb2NrLmNvbW1hbmREYXRhLmNhbGxDb3VudDtcclxuICAgIC8vIFRPRE86IGFkZCBjb25kaXRpb25hbHNcclxuICAgIC8vIHRoaXMgd2lsbCB3b3JrIHdlbGwgaGVyZSBzaW5jZSBlYWNoIGNhbGwgZmluZHMgdGhlIG5leHQgY2FsbFxyXG4gICAgLy8gYWZ0ZXIgaXQgaGFzIGFscmVhZHkgZXhlY3V0ZWRcclxuICAgIHN3aXRjaChwcmV2QmxvY2suZmxvd1R5cGUpIHtcclxuICAgICAgICBjYXNlIEZsb3dUeXBlcy5VcDpcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnIgLSAxO1xyXG4gICAgICAgICAgICB0YXJnZXRDb2wgPSBwcmV2QmxvY2suYztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGbG93VHlwZXMuRG93bjpcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnIgKyAxO1xyXG4gICAgICAgICAgICB0YXJnZXRDb2wgPSBwcmV2QmxvY2suYztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGbG93VHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgIHRhcmdldENvbCA9IHByZXZCbG9jay5jICsgMTtcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRmxvd1R5cGVzLkxlZnQ6XHJcbiAgICAgICAgICAgIHRhcmdldENvbCA9IHByZXZCbG9jay5jIC0gMTtcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgIGlmIChibG9jay5yID09PSB0YXJnZXRSb3cgJiYgYmxvY2suYyA9PT0gdGFyZ2V0Q29sXHJcbiAgICAgICAgICAgICAgICAmJiBibG9jay5jb21tYW5kRGF0YS50eXBlICE9PSBDb21tYW5kVHlwZXMuRW1wdHlcclxuICAgICAgICAgICAgICAgICYmIGJsb2NrLmZsb3dUeXBlICE9PSBGbG93VHlwZXMuRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChibG9jay5jb21tYW5kRGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuQW5nbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwgPSAoKSA9PiBhbmdsZUNhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLk1vdmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwgPSAoKSA9PiBtb3ZlQ2FsbChnYW1lU3RhdGUsIGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVN0YXRlLm5leHRTdGFjay5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwgPSAoKSA9PiBzdGFydENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9kZWNsYXJhdGlvbnMvanNvbi5kLnRzXCIgLz5cclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCBsZXZlbDEgZnJvbSAnLi4vZGF0YS9sZXZlbHMvbGV2ZWwxLmpzb24nO1xyXG5pbXBvcnQgeyBHZW5lcmF0ZUxldmVsIH0gZnJvbSBcIi4vR2VuZXJhdGVMZXZlbFwiO1xyXG5pbXBvcnQgeyBTZXRVcEV2ZW50TGlzdGVuZXJzIH0gZnJvbSBcIi4vU2V0VXBFdmVudExpc3RlbmVyc1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2sgfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vU2xpZGVyXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcblxyXG4vLyBUT0RPOiBhZGQgc3BlY2lhbCB1bml0IGxvZ2ljIGZvciBzdGFydCBibG9jayAvIHRocmVhZCBibG9ja3Mgc2luY2UgdGhleSBkb24ndCBmb2xsb3cgc2FtZSBydWxlc1xyXG4vLyAtPiBpLmUuIHdpbGwgbmVlZCB0byBkbyBhIHN3aXRjaCBvbiB0eXBlIHdoZW4gdXBkYXRpbmcgdW5pdCB2YWx1ZXMgd2l0aGluIGNvbW1hbmQgYmxvY2sgYnV0dG9ucyB1cGRhdGUgbWV0aG9kXHJcbi8vIFRPRE86IGFkZCBiaWcgeWVsbG93IGJsb2NrIHRoYXQgcmVuZGVycyBiZWhpbmQgZ3JpZCBibG9ja3MgdG8gaW5kaWNhdGUgd2hpY2ggYmxvY2sgaXMgY3VycmVudGx5IGJlaW5nIGV4ZWN1dGVkXHJcbi8vIFRPRE86IGhhdmUgRmxvd0Jsb2NrQnV0dG9uIGFuZCBDb21tYW5kQmxvY2tCdXR0b25zIGV4dGVuZCBmcm9tIHRoZWlyIHJlc3BlY3RpdmUgYmxvY2tzXHJcbi8vIFRPRE86IHB1c2ggbW9zdCByZWNlbnRseSBjbGlja2VkIGNvbW1hbmQgLyBmbG93IGJsb2NrIHRvIHRvcCBvZiBibG9jayBhcnJheSB0byByZW5kZXIgaXQgb24gdG9wIG9mIGV2ZXJ5dGhpbmcgZWxzZVxyXG4vLyBUT0RPOiBzd2l0Y2ggc3BhY2ViYXIgY29udHJvbCBidXR0b24gdG8gY2xpY2thYmxlIHJhZGlvIGJ1dHRvblxyXG4vLyBUT0RPOiBhZGQgYmFzZSBVSSBjbGFzcyAvIHN3aXRjaCBzbGlkZXJbXSB0byBiYXNlVUlFbGVtZW50W10gaW4gR2FtZVN0YXRlXHJcbi8vIFRPRE86IGFkZCBleGVjdXRlIHByb2dyYW0gLyBzdG9wIHByb2dyYW0gYnV0dG9uc1xyXG4vLyBUT0RPOiBhZGQgbWFuaWZvbGQgY29sbGlzaW9uIHN5c3RlbSBmb3IgZ3JpZGJsb2NrIGNvbGxpc2lvbiB3aXRoIGZsb3cgYW5kIGNvbW1hbmQgYmxvY2tzLlxyXG4vLyAtPiBpLmUuIHNuYXAgY29tbWFuZCBibG9jayB0byBncmlkIGJsb2NrIHRoYXQgaGFzIHRoZSBiaWdnZXN0IG1hbmlmb2xkXHJcblxyXG4vLyBzZXQgdXAgZ2FtZSBzdGF0ZVxyXG52YXIgZ2FtZVN0YXRlID0gbmV3IEdhbWVTdGF0ZSgpO1xyXG5HZW5lcmF0ZUxldmVsKGdhbWVTdGF0ZSwgbGV2ZWwxLCBcImxpZ2h0Ymx1ZVwiKTtcclxuU2V0VXBFdmVudExpc3RlbmVycyhnYW1lU3RhdGUpO1xyXG5cclxuZnVuY3Rpb24gZHJhdygpIDogdm9pZCB7XHJcbiAgICBnYW1lU3RhdGUuY3R4LmNsZWFyUmVjdCgwLCAwLCBnYW1lU3RhdGUuY2FudmFzLndpZHRoLCBnYW1lU3RhdGUuY2FudmFzLmhlaWdodCk7XHJcbiAgICBnYW1lU3RhdGUuY3R4LmJlZ2luUGF0aCgpO1xyXG5cclxuICAgIC8vIHJlbmRlciBVSSBlbGVtZW50c1xyXG4gICAgZ2FtZVN0YXRlLnNsaWRlcnMuZm9yRWFjaChzbGlkZXIgPT4ge1xyXG4gICAgICAgIHNsaWRlci5kcmF3KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyByZW5kZXIgYWxsIG5vbi1mbG93IGJsb2NrcyBmaXJzdFxyXG4gICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICBpZiAoIShibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9jaykpIHtcclxuICAgICAgICAgICAgYmxvY2suZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHJlbmRlciBhbGwgZmxvdyBibG9ja3MgbGFzdCB0byBsYXllciB0aGVtIG9uIHRvcCBvZiBjb21tYW5kIGJsb2Nrc1xyXG4gICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spIHtcclxuICAgICAgICAgICAgYmxvY2suZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGdhbWVTdGF0ZS5jdHguc3Ryb2tlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGJsb2NrLnVwZGF0ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZ2FtZVN0YXRlLnNsaWRlcnMuZm9yRWFjaChzbGlkZXIgPT4ge1xyXG4gICAgICAgIHNsaWRlci51cGRhdGUoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5zZXRJbnRlcnZhbChmdW5jdGlvbigpIDogdm9pZCB7XHJcbiAgICB1cGRhdGUoKTtcclxuICAgIGRyYXcoKTtcclxuXHJcbiAgICBjb25zdCBjYWxsU3RhY2sgPSBnYW1lU3RhdGUubmV4dFN0YWNrO1xyXG4gICAgZ2FtZVN0YXRlLm5leHRTdGFjayA9IFtdO1xyXG5cclxuICAgIGlmIChjYWxsU3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNhbGxTdGFjay5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgLy8gd2lsbCBjYWxsIGNvbW1hbmQgYW5kIHB1c2ggaXQgYmFjayBvbiBzdGFja1xyXG4gICAgICAgICAgICBpZiAoYmxvY2suY3VycmVudENhbGxDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwoKTtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZWxzZSBqdXN0IGNhbGwgb25jZSBhbmQgZmluZCBuZXh0IGNhbGxcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBibG9jay5jYWxsKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdhbWVTdGF0ZS5wcm9ncmFtUnVubmluZyA9IGZhbHNlO1xyXG4gICAgfVxyXG59LCAxMik7IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEdyaWRCbG9jayB9IGZyb20gXCIuL0dyaWRCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kQmxvY2tCdXR0b24gfSBmcm9tIFwiLi9Db21tYW5kQmxvY2tcIjtcclxuaW1wb3J0IHsgRmxvd0Jsb2NrQnV0dG9uIH0gZnJvbSBcIi4vRmxvd0Jsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcywgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vU2xpZGVyXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gR2VuZXJhdGVMZXZlbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgbGV2ZWxPYmo6IG9iamVjdCwgcGFsZXR0ZUNvbG9yOiBzdHJpbmcpIHtcclxuICAgIGxldCB5T2Zmc2V0OiBudW1iZXIgPSA1O1xyXG4gICAgbGV0IHhPZmZzZXQ6IG51bWJlciA9IDU7XHJcbiAgICBsZXQgbWF4WE9mZnNldDogbnVtYmVyID0gMDtcclxuICAgIGxldCBtYXhZT2Zmc2V0OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vIHNldCB1cCBncmlkIGZvciBDb21tYW5kIFBhbGV0dGVcclxuICAgIC8vIGFzc2lnbiByb3cgYW5kIGNvbHVtbiB2YWx1ZXMgdG8gZ3JpZCBibG9ja3NcclxuICAgIGZvciAodmFyIHIgPSAwOyByIDwgbGV2ZWxPYmpbXCJjb21tYW5kX3BhbGV0dGVcIl1bXCJibG9ja19oZWlnaHRcIl07IHIrKykge1xyXG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgbGV2ZWxPYmpbXCJjb21tYW5kX3BhbGV0dGVcIl1bXCJibG9ja193aWR0aFwiXTsgYysrKSB7XHJcbiAgICAgICAgICAgIG5ldyBHcmlkQmxvY2soZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIHIsIGMsIHBhbGV0dGVDb2xvcik7XHJcbiAgICAgICAgICAgIHhPZmZzZXQgKz0gNTU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlPZmZzZXQgKz0gNTU7XHJcbiAgICAgICAgbWF4WE9mZnNldCA9IHhPZmZzZXQ7XHJcbiAgICAgICAgeE9mZnNldCA9IDU7XHJcbiAgICB9XHJcblxyXG4gICAgbWF4WU9mZnNldCA9IHlPZmZzZXQ7XHJcbiAgICB5T2Zmc2V0ID0gbWF4WU9mZnNldCArIDIwO1xyXG5cclxuICAgIC8vIHNldCB1cCBDb21tYW5kIEJsb2NrIEJ1dHRvbnNcclxuICAgIC8vIENPTlNJREVSOiBBY2NvbW1vZGF0aW5nIGZvciBjb21tYW5kIHBhbGV0dGUgd2lkdGhcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxPYmpbXCJjb21tYW5kX2Jsb2Nrc1wiXS5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICBzd2l0Y2gobGV2ZWxPYmpbXCJjb21tYW5kX2Jsb2Nrc1wiXVtpXSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic3RhcnRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICBsZXQgbW92ZUJsb2NrID0gbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ0aGlzdGxlXCIsIENvbW1hbmRUeXBlcy5Nb3ZlKTtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB1cCBzbGlkZXIsIHBhc3MgaW4gcmVmZXJlbmNlIHRvIG1vdmUgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIG5ldyBTbGlkZXIoZ2FtZVN0YXRlLCB4T2Zmc2V0ICsgMjAsIHlPZmZzZXQgKyA2MCwgMTAwLCBDb21tYW5kVHlwZXMuTW92ZSwgbW92ZUJsb2NrLnVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhbmdsZVwiOlxyXG4gICAgICAgICAgICAgICAgbGV0IGFuZ2xlQmxvY2sgPSBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZFR5cGVzLkFuZ2xlKTtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB1cCBzbGlkZXIsIHBhc3MgaW4gcmVmZXJlbmNlIHRvIGFuZ2xlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBuZXcgU2xpZGVyKGdhbWVTdGF0ZSwgeE9mZnNldCArIDIwLCB5T2Zmc2V0ICsgNjAsIDM2MCwgQ29tbWFuZFR5cGVzLkFuZ2xlLCBhbmdsZUJsb2NrLnVwZGF0ZURhdGEsIDgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0aHJlYWRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuVGhyZWFkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibGFzZXJcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwiZ3JlZW5cIiwgQ29tbWFuZFR5cGVzLkxhc2VyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic2NhblwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJkYXJrYmx1ZVwiLCBDb21tYW5kVHlwZXMuU2Nhbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImdyYXBwbGVcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwibWFyb29uXCIsIENvbW1hbmRUeXBlcy5HcmFwcGxlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB4T2Zmc2V0ICs9IDU1O1xyXG4gICAgfVxyXG5cclxuICAgIHhPZmZzZXQgPSBtYXhYT2Zmc2V0ICsgMjA7XHJcbiAgICB5T2Zmc2V0ID0gNTtcclxuXHJcbiAgICAvLyBzZXQgdXAgRmxvdyBCbG9jayBCdXR0b25zXHJcbiAgICAvLyBDT05TSURFUjogQWNjb21tb2RhdGluZyBmb3IgY29tbWFuZCBwYWxldHRlIGhlaWdodFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbE9ialtcImZsb3dfYmxvY2tzXCJdLmxlbmd0aDsgaSArKykge1xyXG4gICAgICAgIHN3aXRjaChsZXZlbE9ialtcImZsb3dfYmxvY2tzXCJdW2ldKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1cFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLlVwKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLkxlZnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLlJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZG93blwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLkRvd24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlPZmZzZXQgKz0gNTU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQ29tbWFuZEJsb2NrLCBDb21tYW5kQmxvY2tCdXR0b24gfSBmcm9tIFwiLi9Db21tYW5kQmxvY2tcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IEZsb3dCbG9jaywgRmxvd0Jsb2NrQnV0dG9uIH0gZnJvbSBcIi4vRmxvd0Jsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcywgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuaW1wb3J0IHsgc3RhcnROZXdUaHJlYWRDYWxsIH0gZnJvbSBcIi4vUHJvZ3JhbUV4ZWN1dGlvblwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNldFVwRXZlbnRMaXN0ZW5lcnMoZ2FtZVN0YXRlOiBHYW1lU3RhdGUpIHtcclxuICAgIGdhbWVTdGF0ZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIENvbGxpc2lvbiBkZXRlY3Rpb24gYmV0d2VlbiBjbGlja2VkIG9mZnNldCBhbmQgYmxvY2suXHJcbiAgICAgICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5tb3VzZVkgPiBibG9jay55ICYmIGdhbWVTdGF0ZS5tb3VzZVkgPCBibG9jay55ICsgYmxvY2suaFxyXG4gICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IGJsb2NrLnggJiYgZ2FtZVN0YXRlLm1vdXNlWCA8IGJsb2NrLnggKyBibG9jay53KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2sgJiYgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2tCdXR0b24gJiYgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2sgJiYgZ2FtZVN0YXRlLmZsb3dDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2tCdXR0b24gJiYgZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2subW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgcmFkaW8gYnV0dG9uIGZvciBmbG93IG9yIGNvbW1hbmQgY29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suY29tbWFuZERhdGEudHlwZSA9IENvbW1hbmRUeXBlcy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmZsb3dUeXBlID0gRmxvd1R5cGVzLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBmb3Igc2xpZGVycyBiZWluZyBjbGlja2VkXHJcbiAgICAgICAgZ2FtZVN0YXRlLnNsaWRlcnMuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5tb3VzZVkgPiBzLnNsaWRlclkgJiYgZ2FtZVN0YXRlLm1vdXNlWSA8IHMuc2xpZGVyWSArIHMuc2xpZGVySFxyXG4gICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IHMuc2xpZGVyWCAmJiBnYW1lU3RhdGUubW91c2VYIDwgcy5zbGlkZXJYICsgcy5zbGlkZXJXKSB7XHJcbiAgICAgICAgICAgICAgICBzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgLy8gbWFrZSBzdXJlIGFsbCBjbGlja2FibGUgZW50aXRpZXMgYXJlbid0IGNsaWNrYWJsZSBvbiBtb3VzZXVwXHJcbiAgICBnYW1lU3RhdGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbigpIDogdm9pZCB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgQ29tbWFuZEJsb2NrXHJcbiAgICAgICAgICAgICAgICB8fCBibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGdhbWVTdGF0ZS5zbGlkZXJzLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgIHMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgZ2FtZVN0YXRlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihldnQ6IE1vdXNlRXZlbnQpIDogdm9pZCB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLm1vdXNlWCA9IChldnQuY2xpZW50WCAtIGdhbWVTdGF0ZS5yZWN0LmxlZnQpIC8gKGdhbWVTdGF0ZS5yZWN0LnJpZ2h0IC0gZ2FtZVN0YXRlLnJlY3QubGVmdCkgKiBnYW1lU3RhdGUuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGdhbWVTdGF0ZS5tb3VzZVkgPSAoZXZ0LmNsaWVudFkgLSBnYW1lU3RhdGUucmVjdC50b3ApIC8gKGdhbWVTdGF0ZS5yZWN0LmJvdHRvbSAtIGdhbWVTdGF0ZS5yZWN0LnRvcCkgKiBnYW1lU3RhdGUuY2FudmFzLmhlaWdodDtcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICB3aW5kb3cub25rZXl1cCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAvLyBpLmUuIFNwYWNlQmFyIHByZXNzZWRcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuZmxvd0NvbnRyb2wgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbW1hbmQgQ29udHJvbCFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5mbG93Q29udHJvbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZsb3cgQ29udHJvbCFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGkuZS4gUyBrZXkgcHJlc3NlZFxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDgzKSB7XHJcbiAgICAgICAgICAgIGlmICghZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUucHJvZ3JhbVJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgc3RhcnROZXdUaHJlYWRDYWxsKGdhbWVTdGF0ZSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9