!function(t){var e={};function s(a){if(e[a])return e[a].exports;var i=e[a]={i:a,l:!1,exports:{}};return t[a].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=t,s.c=e,s.d=function(t,e,a){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)s.d(a,i,function(e){return t[e]}.bind(null,i));return a},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle","thread"],flow_blocks:["up","down","left","right"]}},function(t,e,s){"use strict";s.r(e);var a,i,n=function(){return function(t){this.blocks=[],this.entities=[],this.userInterfaces=[],this.mouseX=0,this.mouseY=0,this.commandControl=!0,this.flowControl=!1,this.nextStack=[],this.programRunning=!1,this.canvas=t,this.ctx=t.getContext("2d"),this.rect=t.getBoundingClientRect()}}(),o=s(0);!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(a||(a={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(i||(i={}));var h=function(){function t(t,e,s,n,o,h,r,l){t.push(this),this.x=e,this.y=s,this.h=n,this.w=o,this.color=l,this.r=h,this.c=r,this.flowType=i.Empty,this.commandData={baseUnits:0,totalUnits:0,unitsPerCall:0,callCount:0,type:a.Empty}}return t.prototype.draw=function(t){t.fillStyle=this.color,t.fillRect(this.x,this.y,this.w,this.h)},t.prototype.update=function(){},t}(),r=function(){function t(t,e,s,i,n,o,h,r,l,c,u){switch(this.gameState=t,this.x=e,this.y=s,this.h=i,this.w=n,this.color=c,this.baseUnits=o,this.callCount=h,this.unitsPerCall=r,this.totalUnits=l,this.mouseDown=!0,this.set=!1,this.type=u,this.image=new Image,u){case a.Start:this.image.src="data/textures/StartBlock.png";break;case a.Move:this.image.src="data/textures/MoveBlock.png";break;case a.Angle:this.image.src="data/textures/AngleBlock.png";break;case a.Thread:this.image.src="data/textures/ThreadBlock.png"}this.gameState.blocks.push(this)}return t.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){if(e instanceof h&&e.commandData.type===a.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y){t.x=e.x,t.y=e.y,t.set=!0;var s={type:t.type,baseUnits:t.baseUnits,callCount:t.callCount,unitsPerCall:t.unitsPerCall,totalUnits:t.totalUnits};e.commandData.type=s.type,e.commandData.baseUnits=s.baseUnits,e.commandData.callCount=s.callCount,e.commandData.unitsPerCall=s.unitsPerCall,e.commandData.totalUnits=s.totalUnits,e.currentCallCount=t.callCount}}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},t.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},t}(),l=function(){function t(t,e,s,i,n,o,h){var r=this;switch(this.updateData=function(t,e,s,a){r.callCount=t,r.baseUnits=e,r.unitsPerCall=s,r.totalUnits=a},this.gameState=t,this.x=e,this.y=s,this.h=i,this.w=n,this.color=o,this.mouseDown=!1,this.type=h,this.image=new Image,this.baseUnits=0,this.callCount=0,this.unitsPerCall=0,this.totalUnits=0,h){case a.Start:this.image.src="data/textures/StartBlock.png";break;case a.Move:this.image.src="data/textures/MoveBlock.png";break;case a.Angle:this.image.src="data/textures/AngleBlock.png";break;case a.Thread:this.image.src="data/textures/ThreadBlock.png"}this.gameState.blocks.push(this)}return t.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new r(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.unitsPerCall,this.totalUnits,this.color,this.type))},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},t}(),c=function(){function t(t,e,s,a,n,o,h){switch(this.gameState=t,this.x=e,this.y=s,this.h=a,this.w=n,this.color=o,this.type=h,this.mouseDown=!0,this.set=!1,this.image=new Image,h){case i.Up:this.image.src="data/textures/UpArrow.png";break;case i.Down:this.image.src="data/textures/DownArrow.png";break;case i.Left:this.image.src="data/textures/LeftArrow.png";break;case i.Right:this.image.src="data/textures/RightArrow.png"}this.gameState.blocks.push(this)}return t.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.flowType===i.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.flowType=t.type)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},t.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},t.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},t}(),u=function(){function t(t,e,s,a,n,o,h){switch(this.gameState=t,this.x=e,this.y=s,this.h=a,this.w=n,this.color=o,this.type=h,this.mouseDown=!1,this.image=new Image,h){case i.Up:this.image.src="data/textures/UpArrow.png";break;case i.Down:this.image.src="data/textures/DownArrow.png";break;case i.Left:this.image.src="data/textures/LeftArrow.png";break;case i.Right:this.image.src="data/textures/RightArrow.png"}this.gameState.blocks.push(this)}return t.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new c(this.gameState,this.x,this.y,this.h,this.w,this.color,this.type))},t.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},t}(),m=function(){function t(t,e,s,a,i,n,o,h){void 0===h&&(h=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=a,this.unitsPerCall=i,this.snapAmount=h,this.updateDataCallBack=o,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=n,this.barH=75,this.barW=10,this.barX=e,this.barY=s,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=s+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.totalUnits=Math.round(this.value*this.maxUnits),this.gameState.userInterfaces.push(this);var r=this.totalUnits/this.unitsPerCall;this.updateDataCallBack(r,this.baseUnits,this.unitsPerCall,this.totalUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH,this.totalUnits=Math.round(this.value*this.maxUnits);var e=this.totalUnits/this.unitsPerCall;this.updateDataCallBack(e,this.baseUnits,this.unitsPerCall,this.totalUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),p=function(){function t(t,e,s,a,i,n){this.gameState=t,this.x=e,this.y=s,this.h=a,this.w=i,this.threads=1,this.updateDataCallBack=n,this.mouseDown=!1,this.gameState.userInterfaces.push(this),this.updateDataCallBack(0,1,0,this.threads)}return t.prototype.recalculateExistingThreadCounts=function(){var t=[],e=[];this.gameState.blocks.forEach(function(s){s instanceof r?s.type===a.Start&&t.push(s):s instanceof h&&s.commandData.type===a.Start&&e.push(s)}),t.sort(function(t,e){return t.totalUnits>e.totalUnits?1:e.totalUnits>t.totalUnits?-1:0}),e.sort(function(t,e){return t.commandData.totalUnits>e.commandData.totalUnits?1:e.commandData.totalUnits>t.commandData.totalUnits?-1:0});for(var s=0;s<t.length;s++)s+1<t[s].totalUnits&&t[s].totalUnits--;for(s=0;s<e.length;s++)s+1<e[s].commandData.totalUnits&&e[s].commandData.totalUnits--},t.prototype.mouseUp=function(){var t=1;this.gameState.blocks.forEach(function(e){e instanceof r&&e.type===a.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,0,this.threads),this.recalculateExistingThreadCounts()},t.prototype.update=function(){if(this.mouseDown){this.mouseDown=!1;var t=1;this.gameState.blocks.forEach(function(e){e instanceof r&&e.type===a.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,0,this.threads)}},t.prototype.draw=function(){},t}(),f=function(){function t(t,e,s,a){this.gameState=t,this.minusX=e,this.minusY=s,this.minusH=10,this.minusW=15,this.plusX=e+25,this.plusY=s,this.plusH=10,this.plusW=15,this.updateDataCallBack=a,this.color="purple",this.mouseDown=!1,this.mouseDownMinus=!1,this.mouseDownPlus=!1,this.targetThread=1,this.updateDataCallBack(0,1,0,this.targetThread),this.gameState.userInterfaces.push(this)}return t.prototype.update=function(){this.mouseDownPlus?(this.mouseDownPlus=!1,this.mouseDown=!1,this.targetThread++,this.updateDataCallBack(0,1,0,this.targetThread)):this.mouseDownMinus&&(this.mouseDownMinus=!1,this.mouseDown=!1,this.targetThread>1&&(this.targetThread--,this.updateDataCallBack(0,1,0,this.targetThread))),this.mouseDown||(this.mouseDownMinus=!1,this.mouseDownPlus=!1)},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.minusX,this.minusY,this.minusW,this.minusH),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.plusX,this.plusY,this.plusW,this.plusH),this.gameState.ctx.fillStyle="thistle",this.gameState.ctx.font="17px Arial",this.gameState.ctx.fillText("-",this.minusX+this.minusW/3,this.minusY+this.minusH),this.gameState.ctx.fillText("+",this.plusX+this.plusW/4-1,this.plusY+this.plusH+1)},t}();var g=function(){function t(t,e,s,a,i){this.gameState=t,this.x=e,this.y=s,this.h=a,this.w=i,this.angle=0,this.color="grey",this.image=new Image,this.image.src="data/textures/RobotGun.png"}return t.prototype.update=function(){},t.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.rotate(this.angle*Math.PI/180),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(-this.h/2,-this.w/2,this.w,this.h),this.gameState.ctx.drawImage(this.image,-this.w/2,-this.h/2),this.gameState.ctx.rotate(-this.angle*Math.PI/180),this.gameState.ctx.translate(-this.x,-this.y)},t.prototype.move=function(t){var e=Math.cos(this.angle*Math.PI/180)*t,s=Math.sin(this.angle*Math.PI/180)*t;this.x+=e,this.y+=s},t.prototype.turnClockWise=function(t){this.angle+=t},t}();function d(t,e,s){t.blocks.forEach(function(s){s instanceof h&&s.commandData.type===a.Start&&s.commandData.totalUnits===e&&s.flowType!==i.Empty&&w(t,s)}),void 0!==s&&(console.log("thread"),w(t,s))}function w(t,e){var s,n;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case i.Up:s=e.r-1,n=e.c;break;case i.Down:s=e.r+1,n=e.c;break;case i.Right:n=e.c+1,s=e.r;break;case i.Left:n=e.c-1,s=e.r}t.blocks.forEach(function(e){if(e instanceof h&&e.r===s&&e.c===n&&e.commandData.type!==a.Empty&&e.flowType!==i.Empty)switch(e.commandData.type){case a.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--,t.entities.forEach(function(t){t instanceof g&&t.turnClockWise(e.commandData.unitsPerCall)})):w(t,e)}(t,e)},t.nextStack.push(e);break;case a.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--,t.entities.forEach(function(t){t instanceof g&&t.move(e.commandData.unitsPerCall)})):w(t,e)}(t,e)},t.nextStack.push(e);break;case a.Start:e.call=function(){return function(t,e){console.log("start"),w(t,e)}(t,e)},t.nextStack.push(e);break;case a.Thread:e.call=function(){return d(t,e.commandData.totalUnits,e)},t.nextStack.push(e)}})}!function(t){var e=new n(t);!function(t,e,s){for(var n=5,o=5,r=0,c=e.command_palette.block_height,g=e.command_palette.block_width,d=0;d<c;d++){for(var w=0;w<g;w++)new h(t.blocks,o,n,50,50,d,w,s),o+=55;n+=55,r=o,o=5}n+=20;for(var y=0;y<e.command_blocks.length;y++){switch(e.command_blocks[y]){case"start":var x=new l(t,o,n,50,50,"thistle",a.Start);new p(t,x.x,x.y,x.h,x.w,x.updateData);break;case"move":var S=new l(t,o,n,50,50,"thistle",a.Move);new m(t,o+20,n+60,100,.5,a.Move,S.updateData);break;case"angle":var b=new l(t,o,n,50,50,"thistle",a.Angle);new m(t,o+20,n+60,360,1,a.Angle,b.updateData,8);break;case"thread":var k=new l(t,o,n,50,50,"thistle",a.Thread);new f(t,175,360,k.updateData);break;case"laser":new l(t,o,n,50,50,"green",a.Laser);break;case"scan":new l(t,o,n,50,50,"darkblue",a.Scan);break;case"grapple":new l(t,o,n,50,50,"maroon",a.Grapple)}o+=55}for(o=r+20,n=5,y=0;y<e.flow_blocks.length;y++){switch(e.flow_blocks[y]){case"up":new u(t,o,n,50,50,"yellow",i.Up);break;case"left":new u(t,o,n,50,50,"yellow",i.Left);break;case"right":new u(t,o,n,50,50,"yellow",i.Right);break;case"down":new u(t,o,n,50,50,"yellow",i.Down)}n+=55}}(e,o,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof r&&t.commandControl||e instanceof l&&t.commandControl||e instanceof c&&t.flowControl||e instanceof u&&t.flowControl?e.mouseDown=!0:e instanceof h&&(t.commandControl?e.commandData.type=a.Empty:t.flowControl&&(e.flowType=i.Empty)))}),t.userInterfaces.forEach(function(e){e instanceof m?t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0):e instanceof p?t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e.mouseDown=!0):e instanceof f&&(t.mouseY>e.plusY&&t.mouseY<e.plusY+e.plusH&&t.mouseX>e.plusX&&t.mouseX<e.plusX+e.plusW&&(e.mouseDown=!0,e.mouseDownPlus=!0),t.mouseY>e.minusY&&t.mouseY<e.minusY+e.minusH&&t.mouseX>e.minusX&&t.mouseX<e.minusX+e.minusW&&(e.mouseDown=!0,e.mouseDownMinus=!0))})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof r||t instanceof c)&&t.mouseDown&&(t.mouseDown=!1,t.mouseUp())}),t.userInterfaces.forEach(function(t){t.mouseDown=!1,t instanceof p&&t.mouseUp()})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning?(t.programRunning=!1,t.nextStack=[]):(t.programRunning=!0,d(t,1)))}}(e);var s=new g(e,375,200,25,25);e.entities.push(s),setInterval(function(){!function(t,e){t.forEach(function(t){t.update()}),e.forEach(function(t){t.update()})}(e.blocks,e.userInterfaces),function(t,e,s,a,i){t.clearRect(0,0,e.width,e.height),t.beginPath(),s.forEach(function(t){t.draw()}),i.forEach(function(e){e instanceof c||e.draw(t)}),i.forEach(function(t){t instanceof c&&t.draw()}),a.forEach(function(t){t.draw()}),t.stroke()}(e.ctx,e.canvas,e.userInterfaces,e.entities,e.blocks);var t=e.nextStack;e.nextStack=[],t.length>0&&e.programRunning?t.forEach(function(t){t.currentCallCount>0?(t.call(),e.nextStack.push(t)):t.call()}):e.programRunning=!1},12)}(document.getElementById("gameScreen"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,