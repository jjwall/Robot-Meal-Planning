!function(t){var e={};function a(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)a.d(s,i,function(e){return t[e]}.bind(null,i));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle","thread"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var s,i,n=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.entities=t&&t.entities||[],this.userInterfaces=t&&t.userInterfaces||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),o=a(0),r=function(){function t(t,e,a,s,i,n){this.GameState=t,this.X=e,this.Y=a,this.H=s,this.W=i,this.Color=n,this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=i,this.color=n}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(s||(s={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(i||(i={}));var h=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),c=function(t){function e(e,a,n,o,r,h,c,l){var u=t.call(this,e,a,n,o,r,l)||this;return u.r=h,u.c=c,u.flowType=i.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,callCount:0,type:s.Empty},u}return h(e,t),e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r),l=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),u=function(t){function e(e,a,i,n,o,r,h,c,l,u){var m=t.call(this,e,a,i,n,o,l)||this;switch(m.baseUnits=r,m.callCount=h,m.totalUnits=c,m.mouseDown=!0,m.set=!1,m.type=u,m.image=new Image,u){case s.Start:m.image.src="data/textures/StartBlock.png";break;case s.Move:m.image.src="data/textures/MoveBlock.png";break;case s.Angle:m.image.src="data/textures/AngleBlock.png";break;case s.Thread:m.image.src="data/textures/ThreadBlock.png"}return m.gameState.blocks.push(m),m}return l(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof c&&e.commandData.type===s.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.commandData.type=t.type,e.commandData.baseUnits=t.baseUnits,e.commandData.callCount=t.callCount,e.commandData.totalUnits=t.totalUnits,e.currentCallCount=t.callCount)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),m=function(t){function e(e,a,i,n,o,r,h){var c=t.call(this,e,a,i,n,o,r)||this;switch(c.updateData=function(t,e,a){c.callCount=t,c.baseUnits=e,c.totalUnits=a},c.mouseDown=!1,c.type=h,c.image=new Image,c.baseUnits=0,c.callCount=0,c.totalUnits=0,h){case s.Start:c.image.src="data/textures/StartBlock.png";break;case s.Move:c.image.src="data/textures/MoveBlock.png";break;case s.Angle:c.image.src="data/textures/AngleBlock.png";break;case s.Thread:c.image.src="data/textures/ThreadBlock.png"}return c.gameState.blocks.push(c),c}return l(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new u(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.totalUnits,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),p=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),f=function(t){function e(e,a,s,n,o,r,h){var c=t.call(this,e,a,s,n,o,r)||this;switch(c.gameState=e,c.type=h,c.mouseDown=!0,c.set=!1,c.image=new Image,h){case i.Up:c.image.src="data/textures/UpArrow.png";break;case i.Down:c.image.src="data/textures/DownArrow.png";break;case i.Left:c.image.src="data/textures/LeftArrow.png";break;case i.Right:c.image.src="data/textures/RightArrow.png"}return c.gameState.blocks.push(c),c}return p(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof c&&e.flowType===i.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.flowType=t.type)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),g=function(t){function e(e,a,s,n,o,r,h){var c=t.call(this,e,a,s,n,o,r)||this;switch(c.type=h,c.mouseDown=!1,c.image=new Image,h){case i.Up:c.image.src="data/textures/UpArrow.png";break;case i.Down:c.image.src="data/textures/DownArrow.png";break;case i.Left:c.image.src="data/textures/LeftArrow.png";break;case i.Right:c.image.src="data/textures/RightArrow.png"}return c.gameState.blocks.push(c),c}return p(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new f(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),d=function(){function t(t,e,a,s,i,n,o){void 0===o&&(o=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=s,this.snapAmount=o,this.updateDataCallBack=n,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=i,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount;var r=Math.round(this.value*this.maxUnits/this.baseUnits);this.totalUnits=r*this.baseUnits,this.gameState.userInterfaces.push(this),this.updateDataCallBack(r,this.baseUnits,this.totalUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH;var e=Math.round(this.value*this.maxUnits/this.baseUnits);this.totalUnits=e*this.baseUnits,this.updateDataCallBack(e,this.baseUnits,this.totalUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),w=function(){function t(t,e,a,s,i,n){this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=i,this.threads=1,this.updateDataCallBack=n,this.mouseDown=!1,this.gameState.userInterfaces.push(this),this.updateDataCallBack(0,1,this.threads)}return t.prototype.recalculateExistingThreadCounts=function(){var t=[],e=[];this.gameState.blocks.forEach(function(a){a instanceof u?a.type===s.Start&&t.push(a):a instanceof c&&a.commandData.type===s.Start&&e.push(a)}),t.sort(function(t,e){return t.totalUnits>e.totalUnits?1:e.totalUnits>t.totalUnits?-1:0}),e.sort(function(t,e){return t.commandData.totalUnits>e.commandData.totalUnits?1:e.commandData.totalUnits>t.commandData.totalUnits?-1:0});for(var a=0;a<t.length;a++)a+1<t[a].totalUnits&&t[a].totalUnits--;for(a=0;a<e.length;a++)a+1<e[a].commandData.totalUnits&&e[a].commandData.totalUnits--},t.prototype.mouseUp=function(){var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,this.threads),this.recalculateExistingThreadCounts()},t.prototype.update=function(){if(this.mouseDown){this.mouseDown=!1;var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,this.threads)}},t.prototype.draw=function(){},t}(),y=function(){function t(t,e,a,s){this.gameState=t,this.minusX=e,this.minusY=a,this.minusH=10,this.minusW=15,this.plusX=e+25,this.plusY=a,this.plusH=10,this.plusW=15,this.updateDataCallBack=s,this.color="purple",this.mouseDown=!1,this.mouseDownMinus=!1,this.mouseDownPlus=!1,this.targetThread=1,this.updateDataCallBack(0,1,this.targetThread),this.gameState.userInterfaces.push(this)}return t.prototype.update=function(){this.mouseDownPlus?(this.mouseDownPlus=!1,this.mouseDown=!1,this.targetThread++,this.updateDataCallBack(0,1,this.targetThread)):this.mouseDownMinus&&(this.mouseDownMinus=!1,this.mouseDown=!1,this.targetThread>1&&(this.targetThread--,this.updateDataCallBack(0,1,this.targetThread))),this.mouseDown||(this.mouseDownMinus=!1,this.mouseDownPlus=!1)},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.minusX,this.minusY,this.minusW,this.minusH),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.plusX,this.plusY,this.plusW,this.plusH),this.gameState.ctx.fillStyle="thistle",this.gameState.ctx.font="17px Arial",this.gameState.ctx.fillText("-",this.minusX+this.minusW/3,this.minusY+this.minusH),this.gameState.ctx.fillText("+",this.plusX+this.plusW/4-1,this.plusY+this.plusH+1)},t}();var x=function(){function t(t,e,a,s,i){this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=i,this.angle=0,this.color="grey"}return t.prototype.update=function(){},t.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.rotate(this.angle*Math.PI/180),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(-this.h/2,-this.w/2,this.w,this.h),this.gameState.ctx.rotate(-this.angle*Math.PI/180),this.gameState.ctx.translate(-this.x,-this.y)},t.prototype.move=function(t){var e=Math.cos(this.angle*Math.PI/180)*t,a=Math.sin(this.angle*Math.PI/180)*t;this.x+=e,this.y+=a},t.prototype.turnClockWise=function(t){this.angle+=t},t}();function S(t,e,a){t.blocks.forEach(function(a){a instanceof c&&a.commandData.type===s.Start&&a.commandData.totalUnits===e&&a.flowType!==i.Empty&&b(t,a)}),void 0!==a&&(console.log("thread"),b(t,a))}function b(t,e){var a,n;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case i.Up:a=e.r-1,n=e.c;break;case i.Down:a=e.r+1,n=e.c;break;case i.Right:n=e.c+1,a=e.r;break;case i.Left:n=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof c&&e.r===a&&e.c===n&&e.commandData.type!==s.Empty&&e.flowType!==i.Empty)switch(e.commandData.type){case s.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--,t.entities.forEach(function(t){t instanceof x&&t.turnClockWise(45)})):b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--,t.entities.forEach(function(t){t instanceof x&&t.move(2)})):b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Start:e.call=function(){return function(t,e){console.log("start"),b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Thread:e.call=function(){return S(t,e.commandData.totalUnits,e)},t.nextStack.push(e)}})}var k=new n;!function(t,e,a){for(var n=5,o=5,r=0,h=e.command_palette.block_height,l=e.command_palette.block_width,u=0;u<h;u++){for(var p=0;p<l;p++)new c(t,o,n,50,50,u,p,a),o+=55;n+=55,r=o,o=5}n+=20;for(var f=0;f<e.command_blocks.length;f++){switch(e.command_blocks[f]){case"start":var x=new m(t,o,n,50,50,"thistle",s.Start);new w(t,x.x,x.y,x.h,x.w,x.updateData);break;case"move":var S=new m(t,o,n,50,50,"thistle",s.Move);new d(t,o+20,n+60,100,s.Move,S.updateData);break;case"angle":var b=new m(t,o,n,50,50,"thistle",s.Angle);new d(t,o+20,n+60,360,s.Angle,b.updateData,8);break;case"thread":var k=new m(t,o,n,50,50,"thistle",s.Thread);new y(t,175,360,k.updateData);break;case"laser":new m(t,o,n,50,50,"green",s.Laser);break;case"scan":new m(t,o,n,50,50,"darkblue",s.Scan);break;case"grapple":new m(t,o,n,50,50,"maroon",s.Grapple)}o+=55}for(o=r+20,n=5,f=0;f<e.flow_blocks.length;f++){switch(e.flow_blocks[f]){case"up":new g(t,o,n,50,50,"yellow",i.Up);break;case"left":new g(t,o,n,50,50,"yellow",i.Left);break;case"right":new g(t,o,n,50,50,"yellow",i.Right);break;case"down":new g(t,o,n,50,50,"yellow",i.Down)}n+=55}}(k,o,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof u&&t.commandControl||e instanceof m&&t.commandControl||e instanceof f&&t.flowControl||e instanceof g&&t.flowControl?e.mouseDown=!0:e instanceof c&&(t.commandControl?e.commandData.type=s.Empty:t.flowControl&&(e.flowType=i.Empty)))}),t.userInterfaces.forEach(function(e){e instanceof d?t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0):e instanceof w?t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e.mouseDown=!0):e instanceof y&&(t.mouseY>e.plusY&&t.mouseY<e.plusY+e.plusH&&t.mouseX>e.plusX&&t.mouseX<e.plusX+e.plusW&&(e.mouseDown=!0,e.mouseDownPlus=!0),t.mouseY>e.minusY&&t.mouseY<e.minusY+e.minusH&&t.mouseX>e.minusX&&t.mouseX<e.minusX+e.minusW&&(e.mouseDown=!0,e.mouseDownMinus=!0))})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof u||t instanceof f)&&t.mouseDown&&(t.mouseDown=!1,t.mouseUp())}),t.userInterfaces.forEach(function(t){t.mouseDown=!1,t instanceof w&&t.mouseUp()})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning?(t.programRunning=!1,t.nextStack=[]):(t.programRunning=!0,S(t,1)))}}(k);var D=new x(k,375,200,25,25);k.entities.push(D),setInterval(function(){k.blocks.forEach(function(t){t.update()}),k.userInterfaces.forEach(function(t){t.update()}),k.ctx.clearRect(0,0,k.canvas.width,k.canvas.height),k.ctx.beginPath(),k.userInterfaces.forEach(function(t){t.draw()}),k.blocks.forEach(function(t){t instanceof f||t.draw()}),k.blocks.forEach(function(t){t instanceof f&&t.draw()}),k.entities.forEach(function(t){t.draw()}),k.ctx.stroke();var t=k.nextStack;k.nextStack=[],t.length>0&&k.programRunning?t.forEach(function(t){t.currentCallCount>0?(t.call(),k.nextStack.push(t)):t.call()}):k.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRW51bXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Jhc2VCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR3JpZEJsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy9Db21tYW5kQmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zsb3dCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9UaHJlYWRPYnNlcnZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUGx1c01pbnVzLnRzIiwid2VicGFjazovLy8uL3NyYy9Sb2JvdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUHJvZ3JhbUV4ZWN1dGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvR2VuZXJhdGVMZXZlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2V0VXBFdmVudExpc3RlbmVycy50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkNvbW1hbmRUeXBlcyIsIkZsb3dUeXBlcyIsIkdhbWVTdGF0ZV9HYW1lU3RhdGUiLCJvYmoiLCJ0aGlzIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImN0eCIsImdldENvbnRleHQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYmxvY2tzIiwiZW50aXRpZXMiLCJ1c2VySW50ZXJmYWNlcyIsIm1vdXNlWCIsIm1vdXNlWSIsImNvbW1hbmRDb250cm9sIiwiZmxvd0NvbnRyb2wiLCJuZXh0U3RhY2siLCJwcm9ncmFtUnVubmluZyIsIkJhc2VCbG9jayIsIkdhbWVTdGF0ZSIsIlgiLCJZIiwiSCIsIlciLCJDb2xvciIsImdhbWVTdGF0ZSIsIngiLCJ5IiwiaCIsInciLCJjb2xvciIsImRyYXciLCJ1cGRhdGUiLCJHcmlkQmxvY2tfR3JpZEJsb2NrIiwiX3N1cGVyIiwiR3JpZEJsb2NrIiwiUm93IiwiQ29sdW1uIiwiX3RoaXMiLCJmbG93VHlwZSIsIkVtcHR5IiwicHVzaCIsImNvbW1hbmREYXRhIiwiYmFzZVVuaXRzIiwidG90YWxVbml0cyIsImNhbGxDb3VudCIsInR5cGUiLCJfX2V4dGVuZHMiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIkNvbW1hbmRCbG9ja19Db21tYW5kQmxvY2siLCJDb21tYW5kQmxvY2siLCJCYXNlVW5pdHMiLCJDYWxsQ291bnQiLCJUb3RhbFVuaXRzIiwiVHlwZSIsIm1vdXNlRG93biIsInNldCIsImltYWdlIiwiSW1hZ2UiLCJTdGFydCIsInNyYyIsIk1vdmUiLCJBbmdsZSIsIlRocmVhZCIsIkNvbW1hbmRCbG9ja19leHRlbmRzIiwibW91c2VVcCIsImZvckVhY2giLCJibG9jayIsImN1cnJlbnRDYWxsQ291bnQiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJmb250Iiwib2Zmc2V0WCIsImZpbGxUZXh0IiwidG9TdHJpbmciLCJDb21tYW5kQmxvY2tfQ29tbWFuZEJsb2NrQnV0dG9uIiwiQ29tbWFuZEJsb2NrQnV0dG9uIiwidXBkYXRlRGF0YSIsImNhbGN1bGF0ZWRDYWxsQ291bnQiLCJGbG93QmxvY2tfRmxvd0Jsb2NrIiwiRmxvd0Jsb2NrIiwiVXAiLCJEb3duIiwiTGVmdCIsIlJpZ2h0IiwiRmxvd0Jsb2NrX2V4dGVuZHMiLCJzdHJva2VTdHlsZSIsIkZsb3dCbG9ja19GbG93QmxvY2tCdXR0b24iLCJGbG93QmxvY2tCdXR0b24iLCJTbGlkZXIiLCJNYXhVbml0cyIsIlVwZGF0ZURhdGFDYWxsQmFjayIsIlNuYXBBbW91bnQiLCJtYXhVbml0cyIsInNuYXBBbW91bnQiLCJ1cGRhdGVEYXRhQ2FsbEJhY2siLCJNYXRoIiwicm91bmQiLCJiYXJIIiwiYmFyVyIsImJhclgiLCJiYXJZIiwiYmFyQ29sb3IiLCJzbGlkZXJIIiwic2xpZGVyVyIsInNsaWRlclgiLCJzbGlkZXJZIiwic2xpZGVyQ29sb3IiLCJwZXJjZW50YWdlIiwidGVtcFNsaWRlclkiLCJUaHJlYWRPYnNlcnZlcl9UaHJlYWRPYnNlcnZlciIsIlRocmVhZE9ic2VydmVyIiwidGhyZWFkcyIsInJlY2FsY3VsYXRlRXhpc3RpbmdUaHJlYWRDb3VudHMiLCJ0ZW1wQ29tbWFuZFRocmVhZEFycmF5IiwidGVtcEdyaWRUaHJlYWRBcnJheSIsInNvcnQiLCJhIiwiYiIsImxlbmd0aCIsInRlbXBUaHJlYWRDb3VudCIsInRlbXBUaHJlYWRDb3VudF8xIiwiUGx1c01pbnVzIiwibWludXNYIiwibWludXNZIiwibWludXNIIiwibWludXNXIiwicGx1c1giLCJwbHVzWSIsInBsdXNIIiwicGx1c1ciLCJtb3VzZURvd25NaW51cyIsIm1vdXNlRG93blBsdXMiLCJ0YXJnZXRUaHJlYWQiLCJSb2JvdCIsImFuZ2xlIiwicm90YXRlIiwiUEkiLCJtb3ZlIiwiZGlzdGFuY2UiLCJ4MiIsImNvcyIsInkyIiwic2luIiwidHVybkNsb2NrV2lzZSIsImRlZ3JlZXMiLCJzdGFydE5ld1RocmVhZENhbGwiLCJ0aHJlYWRCbG9jayIsImZpbmROZXh0Q2FsbCIsInVuZGVmaW5lZCIsImNvbnNvbGUiLCJsb2ciLCJwcmV2QmxvY2siLCJ0YXJnZXRSb3ciLCJ0YXJnZXRDb2wiLCJlbnRpdHkiLCJhbmdsZUNhbGwiLCJtb3ZlQ2FsbCIsInN0YXJ0Q2FsbCIsIm1haW5fZ2FtZVN0YXRlIiwibGV2ZWxPYmoiLCJwYWxldHRlQ29sb3IiLCJ5T2Zmc2V0IiwieE9mZnNldCIsIm1heFhPZmZzZXQiLCJjb21tYW5kUGFsZXR0ZUgiLCJjb21tYW5kUGFsZXR0ZVciLCJzdGFydEJsb2NrIiwibW92ZUJsb2NrIiwiYW5nbGVCbG9jayIsIkxhc2VyIiwiU2NhbiIsIkdyYXBwbGUiLCJHZW5lcmF0ZUxldmVsIiwibGV2ZWwxIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVzZXJJbnRlcmZhY2UiLCJldnQiLCJjbGllbnRYIiwibGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJjbGllbnRZIiwidG9wIiwiYm90dG9tIiwiaGVpZ2h0Iiwid2luZG93Iiwib25rZXl1cCIsImUiLCJrZXlDb2RlIiwiU2V0VXBFdmVudExpc3RlbmVycyIsInJvYm90Iiwic2V0SW50ZXJ2YWwiLCJjbGVhclJlY3QiLCJiZWdpblBhdGgiLCJzdHJva2UiLCJjYWxsU3RhY2siXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNB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LFVBQVV5QixLQUFLMkIsSUFJekJBLEVBQU1wRyxTQUtkbU0sRUFBVWxKLGdCQUFpQixHQUVoQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCJpbXBvcnQgeyBCYXNlQmxvY2sgfSBmcm9tIFwiLi9CYXNlQmxvY2tcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IElCYXNlVXNlckludGVyZmFjZSB9IGZyb20gXCIuL0lCYXNlVXNlckludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBJQmFzZUVudGl0eSB9IGZyb20gXCIuL0lCYXNlRW50aXR5XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlIHtcclxuICAgIHJlYWRvbmx5IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHJlYWRvbmx5IHJlY3Q6IENsaWVudFJlY3QgfCBET01SZWN0O1xyXG4gICAgcHVibGljIGJsb2NrczogQmFzZUJsb2NrW107XHJcbiAgICBwdWJsaWMgZW50aXRpZXM6IElCYXNlRW50aXR5W107XHJcbiAgICBwdWJsaWMgdXNlckludGVyZmFjZXM6IElCYXNlVXNlckludGVyZmFjZVtdO1xyXG4gICAgcHVibGljIG1vdXNlWDogbnVtYmVyO1xyXG4gICAgcHVibGljIG1vdXNlWTogbnVtYmVyO1xyXG4gICAgcHVibGljIGNvbW1hbmRDb250cm9sOiBib29sZWFuO1xyXG4gICAgcHVibGljIGZsb3dDb250cm9sOiBib29sZWFuO1xyXG4gICAgcHVibGljIG5leHRTdGFjazogR3JpZEJsb2NrW107XHJcbiAgICBwdWJsaWMgcHJvZ3JhbVJ1bm5pbmc6IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBJR2FtZVN0YXRlKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBvYmogJiYgb2JqLmNhbnZhcyB8fCA8SFRNTENhbnZhc0VsZW1lbnQ+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZVNjcmVlblwiKTtcclxuICAgICAgICB0aGlzLmN0eCA9IG9iaiAmJiBvYmouY3R4IHx8IDxDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ+IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnJlY3QgPSBvYmogJiYgb2JqLnJlY3QgfHwgPENsaWVudFJlY3QgfCBET01SZWN0PiB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0aGlzLmJsb2NrcyA9IG9iaiAmJiBvYmouYmxvY2tzIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBvYmogJiYgb2JqLmVudGl0aWVzIHx8IFtdO1xyXG4gICAgICAgIHRoaXMudXNlckludGVyZmFjZXMgPSBvYmogJiYgb2JqLnVzZXJJbnRlcmZhY2VzIHx8IFtdO1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gb2JqICYmIG9iai5tb3VzZVggfHwgMDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IG9iaiAmJiBvYmoubW91c2VZIHx8IDA7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kQ29udHJvbCA9IG9iaiAmJiBvYmouY29tbWFuZENvbnRyb2wgfHwgdHJ1ZTtcclxuICAgICAgICB0aGlzLmZsb3dDb250cm9sID0gb2JqICYmIG9iai5mbG93Q29udHJvbCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLm5leHRTdGFjayA9IG9iaiAmJiBvYmoubmV4dFN0YWNrIHx8IFtdO1xyXG4gICAgICAgIHRoaXMucHJvZ3JhbVJ1bm5pbmcgPSBvYmogJiYgb2JqLnByb2dyYW1SdW5uaW5nIHx8IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElHYW1lU3RhdGUge1xyXG4gICAgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHJlYWRvbmx5IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcmVhZG9ubHkgcmVjdDogQ2xpZW50UmVjdCB8IERPTVJlY3Q7XHJcbiAgICBibG9ja3M6IEJhc2VCbG9ja1tdO1xyXG4gICAgZW50aXRpZXM6IElCYXNlRW50aXR5W107XHJcbiAgICB1c2VySW50ZXJmYWNlczogSUJhc2VVc2VySW50ZXJmYWNlW107XHJcbiAgICBtb3VzZVg6IG51bWJlcjtcclxuICAgIG1vdXNlWTogbnVtYmVyO1xyXG4gICAgY29tbWFuZENvbnRyb2w6IGJvb2xlYW47XHJcbiAgICBmbG93Q29udHJvbDogYm9vbGVhbjtcclxuICAgIG5leHRTdGFjazogYW55W107XHJcbiAgICBwcm9ncmFtUnVubmluZzogYm9vbGVhbjtcclxufSIsImV4cG9ydCBlbnVtIENvbW1hbmRUeXBlcyB7XHJcbiAgICBFbXB0eSxcclxuICAgIFN0YXJ0LFxyXG4gICAgTW92ZSxcclxuICAgIEFuZ2xlLFxyXG4gICAgVGhyZWFkLFxyXG4gICAgU2NhbixcclxuICAgIExhc2VyLFxyXG4gICAgR3JhcHBsZVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBGbG93VHlwZXMge1xyXG4gICAgRW1wdHksXHJcbiAgICBVcCxcclxuICAgIERvd24sXHJcbiAgICBMZWZ0LFxyXG4gICAgUmlnaHQsXHJcbiAgICBDb25kaXRpb25hbExlZnRSaWdodCxcclxuICAgIENvbmRpdGlvbmFsTGVmdFVwLFxyXG4gICAgQ29uZGl0aW9uYWxMZWZ0RG93bixcclxuICAgIENvbmRpdGlvbmFsVXBSaWdodCxcclxuICAgIENvbmRpdGlvbmFsVXBEb3duLFxyXG4gICAgQ29uZGl0aW9uYWxEb3duUmlnaHRcclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgR2FtZVN0YXRlOiBHYW1lU3RhdGUsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgWDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIFk6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBIOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgVzogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIENvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLnggPSBYO1xyXG4gICAgICAgIHRoaXMueSA9IFk7XHJcbiAgICAgICAgdGhpcy5oID0gSDtcclxuICAgICAgICB0aGlzLncgPSBXO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCk6IHZvaWQge30gXHJcbiAgICB1cGRhdGUoKTogdm9pZCB7fVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMsIEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR3JpZEJsb2NrIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcHVibGljIHI6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY29tbWFuZERhdGE6IElDb21tYW5kRGF0YTtcclxuICAgIHB1YmxpYyBjdXJyZW50Q2FsbENvdW50OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgZmxvd1R5cGU6IEZsb3dUeXBlcztcclxuICAgIHB1YmxpYyBjYWxsOiAoKSA9PiB2b2lkO1xyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIFJvdzogbnVtYmVyLCBDb2x1bW46IG51bWJlciwgQ29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZSwgWCwgWSwgSCwgVywgQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuciA9IFJvdztcclxuICAgICAgICB0aGlzLmMgPSBDb2x1bW47XHJcbiAgICAgICAgdGhpcy5mbG93VHlwZSA9IEZsb3dUeXBlcy5FbXB0eTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmREYXRhID0ge1xyXG4gICAgICAgICAgICBiYXNlVW5pdHM6IDAsXHJcbiAgICAgICAgICAgIHRvdGFsVW5pdHM6IDAsXHJcbiAgICAgICAgICAgIGNhbGxDb3VudDogMCxcclxuICAgICAgICAgICAgdHlwZTogQ29tbWFuZFR5cGVzLkVtcHR5XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiogSW50ZXJmYWNlIHRvIGNvbW11bmljYXRlIGNvbW1hbmQgZGF0YS5cclxuKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ29tbWFuZERhdGEge1xyXG4gICAgLyoqXHJcbiAgICAqIEFtb3VudCBvZiB1bml0cyBwZXIgY2FsbC5cclxuICAgICovXHJcbiAgICBiYXNlVW5pdHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgKiBUb3RhbCB1bml0cyBhZnRlciBhbGwgY2FsbChzKS5cclxuICAgICovXHJcbiAgICB0b3RhbFVuaXRzOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICogQW1vdW50IG9mIGNhbGxzIGZvciBhIHNpbmdsZSBwYXNzIG9mIGV4ZWN1dGlvbi5cclxuICAgICovXHJcbiAgICBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgKiBUeXBlIG9mIGNvbW1hbmQgZm9yIHRoZSBleGVjdXRpb24gcHJvY2Vzcy5cclxuICAgICovXHJcbiAgICB0eXBlOiBDb21tYW5kVHlwZXM7XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IElDb21tYW5kRGF0YSwgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJsb2NrIGV4dGVuZHMgQmFzZUJsb2NrIGltcGxlbWVudHMgSUNvbW1hbmREYXRhIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyB0b3RhbFVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xyXG4gICAgcHVibGljIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBzZXQ6IGJvb2xlYW47XHJcbiAgICByZWFkb25seSB0eXBlOiBDb21tYW5kVHlwZXM7XHJcbiAgICByZWFkb25seSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIEJhc2VVbml0czogbnVtYmVyLCBDYWxsQ291bnQ6IG51bWJlciwgVG90YWxVbml0czogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBDb21tYW5kVHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLmJhc2VVbml0cyA9IEJhc2VVbml0cztcclxuICAgICAgICB0aGlzLmNhbGxDb3VudCA9IENhbGxDb3VudDtcclxuICAgICAgICB0aGlzLnRvdGFsVW5pdHMgPSBUb3RhbFVuaXRzO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvU3RhcnRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTW92ZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLkFuZ2xlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvQW5nbGVCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5UaHJlYWQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9UaHJlYWRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG1ldGhvZCBjYWxsZWQgaW4gU2V0VXBFdmVudExpc3RlbmVycy50c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbW91c2VVcCgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gaS5lLiBkcm9wcGluZyBibG9ja1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrICYmIGJsb2NrLmNvbW1hbmREYXRhLnR5cGUgPT09IENvbW1hbmRUeXBlcy5FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLnggPCB0aGlzLnggKyB0aGlzLncgJiZcclxuICAgICAgICAgICAgICAgICAgICBibG9jay54ICsgYmxvY2sudyA+IHRoaXMueCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLnkgPCB0aGlzLnkgKyB0aGlzLmggJiZcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5oICsgYmxvY2sueSA+IHRoaXMueSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzbmFwIHRoaXMgY29tbWFuZCBibG9jayB0byBlbXB0eSBHcmlkQmxvY2tcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSBibG9jay54O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IGJsb2NrLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCBHcmlkQmxvY2sncyBjb21tYW5kRGF0YSBhbmQgY3VycmVudENhbGxDb3VudCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suY29tbWFuZERhdGEudHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5jb21tYW5kRGF0YS5iYXNlVW5pdHMgPSB0aGlzLmJhc2VVbml0cztcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5jb21tYW5kRGF0YS5jYWxsQ291bnQgPSB0aGlzLmNhbGxDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5jb21tYW5kRGF0YS50b3RhbFVuaXRzID0gdGhpcy50b3RhbFVuaXRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmN1cnJlbnRDYWxsQ291bnQgPSB0aGlzLmNhbGxDb3VudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBkZWxldGUgaWYgZHJvcHBpbmcgYmxvY2sgYW5kIGl0IGRvZXNuJ3QgaGF2ZSBhIGVtcHR5IGdyaWQgYmxvY2sgdG8gYmUgc2V0IG9uXHJcbiAgICAgICAgaWYgKCF0aGlzLnNldCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIGRyYWcgY29tbWFuZCBibG9ja1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVggLSB0aGlzLncvMjtcclxuICAgICAgICAgICAgdGhpcy55ID0gdGhpcy5nYW1lU3RhdGUubW91c2VZIC0gdGhpcy5oLzI7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZm9udCA9IFwiMTVweCBBcmlhbFwiO1xyXG4gICAgICAgIGxldCBvZmZzZXRYID0gMzA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsVW5pdHMgPiA5OSkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMjU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudG90YWxVbml0cyA8IDEwKSB7XHJcbiAgICAgICAgICAgIG9mZnNldFggPSAzNTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsVGV4dCgodGhpcy50b3RhbFVuaXRzKS50b1N0cmluZygpLCB0aGlzLnggKyBvZmZzZXRYLCB0aGlzLnkgKyA0OCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTlNJREVSOiBleHRlbmRpbmcgQ29tbWFuZEJsb2NrIGNsYXNzXHJcbmV4cG9ydCBjbGFzcyBDb21tYW5kQmxvY2tCdXR0b24gZXh0ZW5kcyBCYXNlQmxvY2sgaW1wbGVtZW50cyBJQ29tbWFuZERhdGEge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY2FsbENvdW50OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdG90YWxVbml0czogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICByZWFkb25seSB0eXBlOiBDb21tYW5kVHlwZXM7XHJcbiAgICByZWFkb25seSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIENvbG9yOiBzdHJpbmcsIFR5cGU6IENvbW1hbmRUeXBlcykge1xyXG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZSwgWCwgWSwgSCwgVywgQ29sb3IpO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5iYXNlVW5pdHMgPSAwO1xyXG4gICAgICAgIHRoaXMuY2FsbENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnRvdGFsVW5pdHMgPSAwO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvU3RhcnRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTW92ZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLkFuZ2xlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvQW5nbGVCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5UaHJlYWQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9UaHJlYWRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIHBhc3NlZCBpbiBhcyByZWZlcmVuY2UgdG8gY29ycmVzcG9uZGluZyBVSS5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZURhdGEgPSAoY2FsY3VsYXRlZENhbGxDb3VudDogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlciwgdG90YWxVbml0czogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5jYWxsQ291bnQgPSBjYWxjdWxhdGVkQ2FsbENvdW50O1xyXG4gICAgICAgIHRoaXMuYmFzZVVuaXRzID0gYmFzZVVuaXRzO1xyXG4gICAgICAgIHRoaXMudG90YWxVbml0cyA9IHRvdGFsVW5pdHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2sodGhpcy5nYW1lU3RhdGUsIHRoaXMueCwgdGhpcy55LCB0aGlzLmgsIHRoaXMudywgdGhpcy5iYXNlVW5pdHMsIHRoaXMuY2FsbENvdW50LCB0aGlzLnRvdGFsVW5pdHMsIHRoaXMuQ29sb3IsIHRoaXMudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZm9udCA9IFwiMTVweCBBcmlhbFwiO1xyXG4gICAgICAgIGxldCBvZmZzZXRYID0gMzA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsVW5pdHMgPiA5OSkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMjU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnRvdGFsVW5pdHMgPCAxMCkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMzU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFRleHQoKHRoaXMudG90YWxVbml0cykudG9TdHJpbmcoKSwgdGhpcy54ICsgb2Zmc2V0WCwgdGhpcy55ICsgNDgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG93QmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcHVibGljIHNldDogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogRmxvd1R5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuVXA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9VcEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Eb3duQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuTGVmdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0xlZnRBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5SaWdodDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1JpZ2h0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBtZXRob2QgY2FsbGVkIGluIFNldFVwRXZlbnRMaXN0ZW5lcnMudHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1vdXNlVXAoKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIGRyb3AgZmxvdyBibG9ja1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrICYmIGJsb2NrLmZsb3dUeXBlID09PSBGbG93VHlwZXMuRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay54IDwgdGhpcy54ICsgdGhpcy53ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2sueCArIGJsb2NrLncgPiB0aGlzLnggJiZcclxuICAgICAgICAgICAgICAgICAgICBibG9jay55IDwgdGhpcy55ICsgdGhpcy5oICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suaCArIGJsb2NrLnkgPiB0aGlzLnkpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc25hcCB0aGlzIGZsb3cgYmxvY2sgdG8gZW1wdHkgR3JpZEJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gYmxvY2sueDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSBibG9jay55O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5mbG93VHlwZSA9IHRoaXMudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY29uZGl0aW9uYWwgcHJvcGVydGllcyBoZXJlIGlmIGNvbmRpdGlvbmFsIGJsb2NrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZGVsZXRlIGlmIGRyb3BwaW5nIGJsb2NrIGFuZCBpdCBkb2Vzbid0IGhhdmUgYW4gZW1wdHkgZ3JpZCBibG9jayB0byBiZSBzZXQgb25cclxuICAgICAgICBpZiAoIXRoaXMuc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhZyBmbG93IGJsb2NrXHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWCAtIHRoaXMudy8yO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgLSB0aGlzLmgvMjtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5yZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLncsIHRoaXMuaCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIENPTlNJREVSOiBFeHRlbmRpbmcgRmxvd0Jsb2NrIGhlcmVcclxuZXhwb3J0IGNsYXNzIEZsb3dCbG9ja0J1dHRvbiBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBGbG93VHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLlVwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVXBBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5Eb3duOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvRG93bkFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkxlZnQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9MZWZ0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9SaWdodEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgbmV3IEZsb3dCbG9jayh0aGlzLmdhbWVTdGF0ZSwgdGhpcy54LCB0aGlzLnksIHRoaXMuaCwgdGhpcy53LCB0aGlzLkNvbG9yLCB0aGlzLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKC10aGlzLngsIC10aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMsIEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IElCYXNlVXNlckludGVyZmFjZSB9IGZyb20gXCIuL0lCYXNlVXNlckludGVyZmFjZVwiO1xyXG5cclxuLy8gbWF5YmUgYWRkIHN1cHBvcnQgZm9yIHRocmVhZCBzdGFydGVyP1xyXG5leHBvcnQgY2xhc3MgU2xpZGVyIGltcGxlbWVudHMgSUJhc2VVc2VySW50ZXJmYWNlIHtcclxuICAgIHB1YmxpYyBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIHNuYXBBbW91bnQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcGVyY2VudGFnZTogbnVtYmVyO1xyXG4gICAgcHVibGljIHZhbHVlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdXBkYXRlRGF0YUNhbGxCYWNrOiAoY2FsbENvdW50OiBudW1iZXIsIGJhc2VVbml0czogbnVtYmVyLCB0b3RhbFVuaXRzOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgICByZWFkb25seSBtYXhVbml0czogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRvdGFsVW5pdHM6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHR5cGU6IENvbW1hbmRUeXBlcyB8IEZsb3dUeXBlcztcclxuICAgIHB1YmxpYyBzbGlkZXJYOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgc2xpZGVyWTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2xpZGVySDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2xpZGVyVzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgc2xpZGVyQ29sb3I6IHN0cmluZztcclxuICAgIHB1YmxpYyBiYXJYOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYmFyWTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFySDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFyVzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFyQ29sb3I6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYIDpudW1iZXIsIFk6IG51bWJlciwgTWF4VW5pdHM6IG51bWJlciwgVHlwZTogQ29tbWFuZFR5cGVzIHwgRmxvd1R5cGVzLCBVcGRhdGVEYXRhQ2FsbEJhY2s6IChjYWxsQ291bnQ6IG51bWJlciwgYmFzZVVuaXRzOiBudW1iZXIsIHRvdGFsVW5pdHM6IG51bWJlcikgPT4gdm9pZCwgU25hcEFtb3VudDogbnVtYmVyID0gMTApIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubWF4VW5pdHMgPSBNYXhVbml0cztcclxuICAgICAgICB0aGlzLnNuYXBBbW91bnQgPSBTbmFwQW1vdW50O1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrID0gVXBkYXRlRGF0YUNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMuYmFzZVVuaXRzID0gTWF0aC5yb3VuZCh0aGlzLm1heFVuaXRzIC8gdGhpcy5zbmFwQW1vdW50KTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMuYmFySCA9IDc1O1xyXG4gICAgICAgIHRoaXMuYmFyVyA9IDEwO1xyXG4gICAgICAgIHRoaXMuYmFyWCA9IFg7XHJcbiAgICAgICAgdGhpcy5iYXJZID0gWTtcclxuICAgICAgICB0aGlzLmJhckNvbG9yID0gXCJ0aGlzdGxlXCI7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJIID0gMTA7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJXID0gMTU7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJYID0gWDtcclxuICAgICAgICB0aGlzLnNsaWRlclkgPSBZICsgdGhpcy5iYXJILzIgLSB0aGlzLnNsaWRlckgvMjtcclxuICAgICAgICB0aGlzLnNsaWRlckNvbG9yID0gXCJwdXJwbGVcIjtcclxuICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSAxIC0gKHRoaXMuc2xpZGVyWSAtIHRoaXMuYmFyWSArIHRoaXMuc2xpZGVySC8yKSAvIHRoaXMuYmFySDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gTWF0aC5yb3VuZCh0aGlzLnBlcmNlbnRhZ2UgKiB0aGlzLnNuYXBBbW91bnQpIC8gdGhpcy5zbmFwQW1vdW50O1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjYWxjdWxhdGVkQ2FsbENvdW50ID0gTWF0aC5yb3VuZCgodGhpcy52YWx1ZSAqIHRoaXMubWF4VW5pdHMpL3RoaXMuYmFzZVVuaXRzKTtcclxuICAgICAgICB0aGlzLnRvdGFsVW5pdHMgPSBjYWxjdWxhdGVkQ2FsbENvdW50ICogdGhpcy5iYXNlVW5pdHM7XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJJbnRlcmZhY2VzLnB1c2godGhpcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBkYXRhXHJcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhQ2FsbEJhY2soY2FsY3VsYXRlZENhbGxDb3VudCwgdGhpcy5iYXNlVW5pdHMsIHRoaXMudG90YWxVbml0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJhclkgLSB0aGlzLnNsaWRlckgvMiA8IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXJZICsgdGhpcy5iYXJIIC0gdGhpcy5zbGlkZXJILzIgPiB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBTbGlkZXJZID0gdGhpcy5nYW1lU3RhdGUubW91c2VZO1xyXG4gICAgICAgICAgICAgICAgLy8gZmluZCBwZXJjZW50YWdlIHNsaWRlciBpcyB1cCB2ZXJ0aWNhbCBvbiBiYXJcclxuICAgICAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9IDEgLSAodGVtcFNsaWRlclkgLSB0aGlzLmJhclkgKyB0aGlzLnNsaWRlckgvMikgLyB0aGlzLmJhckg7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIHRvIGJlIHRoZSByb3VuZGVkIHBlcmNlbnRhZ2UgYmFzZWQgb24gc25hcCBhbW91bnRcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKHRoaXMucGVyY2VudGFnZSAqIHRoaXMuc25hcEFtb3VudCkgLyB0aGlzLnNuYXBBbW91bnQ7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgc2xpZGVyWSB2YWx1ZSBiYXNlZCBvbiBuZXcgdmFsdWUgZnJvbSB0aGUgcm91bmRlZCBwZXJjYW50YWdlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsaWRlclkgPSB0aGlzLmJhckggKyB0aGlzLmJhclkgLSAodGhpcy5zbGlkZXJILzIpIC0gKHRoaXMudmFsdWUgKiB0aGlzLmJhckgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjYWxjdWxhdGVkQ2FsbENvdW50ID0gTWF0aC5yb3VuZCgodGhpcy52YWx1ZSAqIHRoaXMubWF4VW5pdHMpL3RoaXMuYmFzZVVuaXRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsVW5pdHMgPSBjYWxjdWxhdGVkQ2FsbENvdW50ICogdGhpcy5iYXNlVW5pdHNcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGFDYWxsQmFjayhjYWxjdWxhdGVkQ2FsbENvdW50LCB0aGlzLmJhc2VVbml0cywgdGhpcy50b3RhbFVuaXRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhdyBiYXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5iYXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5iYXJYLCB0aGlzLmJhclksIHRoaXMuYmFyVywgdGhpcy5iYXJIKTtcclxuXHJcbiAgICAgICAgLy8gZHJhdyBzbGlkZXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5zbGlkZXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5zbGlkZXJYIC0gdGhpcy5zbGlkZXJILzQsIHRoaXMuc2xpZGVyWSwgdGhpcy5zbGlkZXJXLCB0aGlzLnNsaWRlckgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSUJhc2VVc2VySW50ZXJmYWNlIH0gZnJvbSBcIi4vSUJhc2VVc2VySW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiXHJcbmltcG9ydCB7IENvbW1hbmRCbG9jayB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUaHJlYWRPYnNlcnZlciBpbXBsZW1lbnRzIElCYXNlVXNlckludGVyZmFjZSB7XHJcbiAgICBwdWJsaWMgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgdzogbnVtYmVyO1xyXG4gICAgcHVibGljIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyB0aHJlYWRzOiBudW1iZXI7XHJcbiAgICB1cGRhdGVEYXRhQ2FsbEJhY2s6IChjYWxsQ291bnQ6IG51bWJlciwgYmFzZVVuaXRzOiBudW1iZXIsIHRvdGFsVGhyZWFkczogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgVXBkYXRlRGF0YUNhbGxCYWNrOiAoY2FsbENvdW50OiBudW1iZXIsIGJhc2VVbml0czogbnVtYmVyLCB0b3RhbFRocmVhZHM6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMueCA9IFg7XHJcbiAgICAgICAgdGhpcy55ID0gWTtcclxuICAgICAgICB0aGlzLmggPSBIO1xyXG4gICAgICAgIHRoaXMudyA9IFc7XHJcbiAgICAgICAgdGhpcy50aHJlYWRzID0gMTtcclxuICAgICAgICB0aGlzLnVwZGF0ZURhdGFDYWxsQmFjayA9IFVwZGF0ZURhdGFDYWxsQmFjaztcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS51c2VySW50ZXJmYWNlcy5wdXNoKHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBpbml0aWFsaXplIGRhdGFcclxuICAgICAgICB0aGlzLnVwZGF0ZURhdGFDYWxsQmFjaygwLCAxLCB0aGlzLnRocmVhZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVjYWxjdWxhdGVFeGlzdGluZ1RocmVhZENvdW50cygpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZm9yIHZpc3VhbHNcclxuICAgICAgICBsZXQgdGVtcENvbW1hbmRUaHJlYWRBcnJheTogQ29tbWFuZEJsb2NrW10gPSBbXTtcclxuICAgICAgICAvLyBmb3IgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgIGxldCB0ZW1wR3JpZFRocmVhZEFycmF5OiBHcmlkQmxvY2tbXSA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLnR5cGUgPT09IENvbW1hbmRUeXBlcy5TdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBDb21tYW5kVGhyZWFkQXJyYXkucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2sgaW5zdGFuY2VvZiBHcmlkQmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay5jb21tYW5kRGF0YS50eXBlID09PSBDb21tYW5kVHlwZXMuU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wR3JpZFRocmVhZEFycmF5LnB1c2goYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHNvcnQgdGVtcCB0aHJlYWQgYXJyYXlzLCB0b3RhbFVuaXRzIGlzIHRoZSB0aHJlYWQgY291bnRcclxuICAgICAgICAvLyBDT05TSURFUjogbWFraW5nIGFub3RoZXIgcHJpdmF0ZSBmdW5jdGlvbiBjYWxsZWQgbGlrZSBzb3J0QW5kUmVjYWxjdWxhdGVUaHJlYWRDb3VudHNcclxuICAgICAgICB0ZW1wQ29tbWFuZFRocmVhZEFycmF5LnNvcnQoKGEsYikgPT4gKGEudG90YWxVbml0cyA+IGIudG90YWxVbml0cykgPyAxIDogKChiLnRvdGFsVW5pdHMgPiBhLnRvdGFsVW5pdHMpID8gLTEgOiAwKSk7XHJcbiAgICAgICAgdGVtcEdyaWRUaHJlYWRBcnJheS5zb3J0KChhLGIpID0+IChhLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMgPiBiLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMpID8gMSA6ICgoYi5jb21tYW5kRGF0YS50b3RhbFVuaXRzID4gYS5jb21tYW5kRGF0YS50b3RhbFVuaXRzKSA/IC0xIDogMCkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbXBDb21tYW5kVGhyZWFkQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgKyAxIDwgdGVtcENvbW1hbmRUaHJlYWRBcnJheVtpXS50b3RhbFVuaXRzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzdWJ0cmFjdCB0aHJlYWQgY291bnQgaWYgbm90IGluIG9yZGVyIGkuZS4gMSwgMiwgNC4gLT4gNCB0dXJucyBpbnRvIDNcclxuICAgICAgICAgICAgICAgIHRlbXBDb21tYW5kVGhyZWFkQXJyYXlbaV0udG90YWxVbml0cy0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbXBHcmlkVGhyZWFkQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgKyAxIDwgdGVtcEdyaWRUaHJlYWRBcnJheVtpXS5jb21tYW5kRGF0YS50b3RhbFVuaXRzKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wR3JpZFRocmVhZEFycmF5W2ldLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbW91c2VVcCgpIDogdm9pZCB7IFxyXG4gICAgICAgIGxldCB0ZW1wVGhyZWFkQ291bnQgPSAxO1xyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLnR5cGUgPT09IENvbW1hbmRUeXBlcy5TdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBUaHJlYWRDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudGhyZWFkcyA9IHRlbXBUaHJlYWRDb3VudDtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVEYXRhQ2FsbEJhY2soMCwgMSwgdGhpcy50aHJlYWRzKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWNhbGN1bGF0ZUV4aXN0aW5nVGhyZWFkQ291bnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHRlbXBUaHJlYWRDb3VudCA9IDE7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9jay50eXBlID09PSBDb21tYW5kVHlwZXMuU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFRocmVhZENvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGhyZWFkcyA9IHRlbXBUaHJlYWRDb3VudDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKDAsIDEsIHRoaXMudGhyZWFkcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCkgOiB2b2lkIHt9XHJcbn0iLCJpbXBvcnQgeyBJQmFzZVVzZXJJbnRlcmZhY2UgfSBmcm9tIFwiLi9JQmFzZVVzZXJJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGx1c01pbnVzIGltcGxlbWVudHMgSUJhc2VVc2VySW50ZXJmYWNlIHtcclxuICAgIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcGx1c1g6IG51bWJlcjtcclxuICAgIHBsdXNZOiBudW1iZXI7XHJcbiAgICBwbHVzSDogbnVtYmVyO1xyXG4gICAgcGx1c1c6IG51bWJlcjtcclxuICAgIG1vdXNlRG93blBsdXM6IGJvb2xlYW47XHJcbiAgICBtaW51c1g6IG51bWJlcjtcclxuICAgIG1pbnVzWTogbnVtYmVyO1xyXG4gICAgbWludXNIOiBudW1iZXI7XHJcbiAgICBtaW51c1c6IG51bWJlcjtcclxuICAgIG1vdXNlRG93bk1pbnVzOiBib29sZWFuO1xyXG4gICAgdGFyZ2V0VGhyZWFkOiBudW1iZXI7XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgdXBkYXRlRGF0YUNhbGxCYWNrOiAoY2FsbENvdW50OiBudW1iZXIsIGJhc2VVbml0czogbnVtYmVyLCB0b3RhbFVuaXRzOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIFVwZGF0ZURhdGFDYWxsQmFjazogKGNhbGxDb3VudDogbnVtYmVyLCBiYXNlVW5pdHM6IG51bWJlciwgdG90YWxVbml0czogbnVtYmVyKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGU7XHJcbiAgICAgICAgdGhpcy5taW51c1ggPSBYO1xyXG4gICAgICAgIHRoaXMubWludXNZID0gWTtcclxuICAgICAgICB0aGlzLm1pbnVzSCA9IDEwO1xyXG4gICAgICAgIHRoaXMubWludXNXID0gMTU7XHJcbiAgICAgICAgdGhpcy5wbHVzWCA9IFggKyAyNTtcclxuICAgICAgICB0aGlzLnBsdXNZID0gWTtcclxuICAgICAgICB0aGlzLnBsdXNIID0gMTA7XHJcbiAgICAgICAgdGhpcy5wbHVzVyA9IDE1O1xyXG4gICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrID0gVXBkYXRlRGF0YUNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBcInB1cnBsZVwiO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tb3VzZURvd25NaW51cyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duUGx1cyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VGhyZWFkID0gMTtcclxuICAgICAgICB0aGlzLnVwZGF0ZURhdGFDYWxsQmFjaygwLCAxLCB0aGlzLnRhcmdldFRocmVhZCk7XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnVzZXJJbnRlcmZhY2VzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlRG93blBsdXMpIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd25QbHVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0VGhyZWFkKys7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YUNhbGxCYWNrKDAsIDEsIHRoaXMudGFyZ2V0VGhyZWFkKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLm1vdXNlRG93bk1pbnVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duTWludXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd24gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldFRocmVhZCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0VGhyZWFkLS07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZURhdGFDYWxsQmFjaygwLCAxLCB0aGlzLnRhcmdldFRocmVhZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZURvd25NaW51cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlRG93blBsdXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBkcmF3IG1pbnVzXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxSZWN0KHRoaXMubWludXNYLCB0aGlzLm1pbnVzWSwgdGhpcy5taW51c1csIHRoaXMubWludXNIKTtcclxuXHJcbiAgICAgICAgLy8gZHJhdyBwbHVzXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxSZWN0KHRoaXMucGx1c1gsIHRoaXMucGx1c1ksIHRoaXMucGx1c1csIHRoaXMucGx1c0gpO1xyXG5cclxuICAgICAgICAvLyBkcmF3IC0vK1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSBcInRoaXN0bGVcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZm9udCA9IFwiMTdweCBBcmlhbFwiO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsVGV4dChcIi1cIiwgdGhpcy5taW51c1ggKyB0aGlzLm1pbnVzVy8zLCB0aGlzLm1pbnVzWSArIHRoaXMubWludXNIKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFRleHQoXCIrXCIsIHRoaXMucGx1c1ggKyB0aGlzLnBsdXNXLzQgLSAxLCB0aGlzLnBsdXNZICsgdGhpcy5wbHVzSCArIDEpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgSUJhc2VFbnRpdHkgfSBmcm9tIFwiSUJhc2VFbnRpdHlcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUm9ib3QgaW1wbGVtZW50cyBJQmFzZUVudGl0eSB7XHJcbiAgICBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGFuZ2xlOiBudW1iZXI7XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMueCA9IFg7XHJcbiAgICAgICAgdGhpcy55ID0gWTtcclxuICAgICAgICB0aGlzLmggPSBIO1xyXG4gICAgICAgIHRoaXMudyA9IFc7XHJcbiAgICAgICAgdGhpcy5hbmdsZSA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IFwiZ3JleVwiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSA6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlICogTWF0aC5QSS8xODApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsUmVjdCgtdGhpcy5oLzIsIC10aGlzLncvMiwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5yb3RhdGUoLSh0aGlzLmFuZ2xlICogTWF0aC5QSS8xODApKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKC10aGlzLngsIC10aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3ZlKGRpc3RhbmNlOiBudW1iZXIpIDogdm9pZCB7XHJcbiAgICAgICAgbGV0IHgyID0gTWF0aC5jb3ModGhpcy5hbmdsZSAqIE1hdGguUEkvMTgwKSAqIGRpc3RhbmNlO1xyXG4gICAgICAgIGxldCB5MiA9IE1hdGguc2luKHRoaXMuYW5nbGUgKiBNYXRoLlBJLzE4MCkgKiBkaXN0YW5jZTtcclxuICAgICAgICB0aGlzLnggKz0geDI7XHJcbiAgICAgICAgdGhpcy55ICs9IHkyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0dXJuQ2xvY2tXaXNlKGRlZ3JlZXM6IG51bWJlcikgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFuZ2xlICs9IGRlZ3JlZXM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcywgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuaW1wb3J0IHsgUm9ib3QgfSBmcm9tIFwiLi9Sb2JvdFwiO1xyXG5cclxuZnVuY3Rpb24gbW92ZUNhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibW92ZVwiKTtcclxuICAgICAgICBibG9jay5jdXJyZW50Q2FsbENvdW50LS07XHJcblxyXG4gICAgICAgIGdhbWVTdGF0ZS5lbnRpdGllcy5mb3JFYWNoKGVudGl0eSA9PiB7XHJcbiAgICAgICAgICAgIC8vIENPTlNJREVSIHBhc3NpbmcgaW4gcmVmZXJlbmNlIHRvIHJvYm90IGluIHRoZXNlIGNhbGwgZnVuY3Rpb25zXHJcbiAgICAgICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBSb2JvdCkge1xyXG4gICAgICAgICAgICAgICAgZW50aXR5Lm1vdmUoMik7IC8vIHRlc3QgdmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmluZE5leHRDYWxsKGdhbWVTdGF0ZSwgYmxvY2spO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBhbmdsZUNhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiYW5nbGVcIik7XHJcbiAgICAgICAgYmxvY2suY3VycmVudENhbGxDb3VudC0tO1xyXG5cclxuICAgICAgICBnYW1lU3RhdGUuZW50aXRpZXMuZm9yRWFjaChlbnRpdHkgPT4ge1xyXG4gICAgICAgICAgICAvLyBDT05TSURFUiBwYXNzaW5nIGluIHJlZmVyZW5jZSB0byByb2JvdCBpbiB0aGVzZSBjYWxsIGZ1bmN0aW9uc1xyXG4gICAgICAgICAgICBpZiAoZW50aXR5IGluc3RhbmNlb2YgUm9ib3QpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eS50dXJuQ2xvY2tXaXNlKDQ1KTsgLy8gdGVzdCB2YWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIHdpbGwgb25seSBoYXZlIGZpbmROZXh0RXhlY3V0aW9uIGJpdFxyXG4vLyB3b24ndCBkbyBhbnl0aGluZyBleGNlcHQgY29udGludWUgZXhlY3V0aW9uIGlmIHBsYXllcnMgdXNlIGl0IGxpa2UgYSBub3JtYWwgY29tbWFuZCBibG9ja1xyXG5mdW5jdGlvbiBzdGFydENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGNvbnNvbGUubG9nKFwic3RhcnRcIik7XHJcbiAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydE5ld1RocmVhZENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIHRhcmdldFRocmVhZDogbnVtYmVyLCB0aHJlYWRCbG9jaz86IEdyaWRCbG9jaykge1xyXG4gICAgLy8gbG9jYXRlIHRhcmdldCB0aHJlYWQgYW5kIGZpbmQgaXQncyBuZXh0IGNhbGxcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgIGlmIChibG9jay5jb21tYW5kRGF0YS50eXBlID09PSBDb21tYW5kVHlwZXMuU3RhcnRcclxuICAgICAgICAgICAgICAgICYmIGJsb2NrLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMgPT09IHRhcmdldFRocmVhZFxyXG4gICAgICAgICAgICAgICAgJiYgYmxvY2suZmxvd1R5cGUgIT09IEZsb3dUeXBlcy5FbXB0eSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgdGhyZWFkXHJcbiAgICAgICAgICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBpZiBhdmFpbGFibGUsIGNvbnRpbnVlIG9uIHRvIGN1cnJlbnQgdGhyZWFkJ3MgbmV4dCBjYWxsXHJcbiAgICBpZiAodGhyZWFkQmxvY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhyZWFkXCIpO1xyXG4gICAgICAgIGZpbmROZXh0Q2FsbChnYW1lU3RhdGUsIHRocmVhZEJsb2NrKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmluZE5leHRDYWxsKGdhbWVTdGF0ZTogR2FtZVN0YXRlLCBwcmV2QmxvY2s6IEdyaWRCbG9jaykgOiB2b2lkIHtcclxuICAgIGxldCB0YXJnZXRSb3c6IG51bWJlcjtcclxuICAgIGxldCB0YXJnZXRDb2w6IG51bWJlcjtcclxuICAgIC8vIHJlc2V0IGNhbGwgY291bnRcclxuICAgIHByZXZCbG9jay5jdXJyZW50Q2FsbENvdW50ID0gcHJldkJsb2NrLmNvbW1hbmREYXRhLmNhbGxDb3VudDtcclxuICAgIC8vIFRPRE86IGFkZCBjb25kaXRpb25hbHNcclxuICAgIC8vIHRoaXMgd2lsbCB3b3JrIHdlbGwgaGVyZSBzaW5jZSBlYWNoIGNhbGwgZmluZHMgdGhlIG5leHQgY2FsbFxyXG4gICAgLy8gYWZ0ZXIgaXQgaGFzIGFscmVhZHkgZXhlY3V0ZWRcclxuICAgIHN3aXRjaChwcmV2QmxvY2suZmxvd1R5cGUpIHtcclxuICAgICAgICBjYXNlIEZsb3dUeXBlcy5VcDpcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnIgLSAxO1xyXG4gICAgICAgICAgICB0YXJnZXRDb2wgPSBwcmV2QmxvY2suYztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGbG93VHlwZXMuRG93bjpcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnIgKyAxO1xyXG4gICAgICAgICAgICB0YXJnZXRDb2wgPSBwcmV2QmxvY2suYztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGbG93VHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgIHRhcmdldENvbCA9IHByZXZCbG9jay5jICsgMTtcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgRmxvd1R5cGVzLkxlZnQ6XHJcbiAgICAgICAgICAgIHRhcmdldENvbCA9IHByZXZCbG9jay5jIC0gMTtcclxuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcHJldkJsb2NrLnI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgIGlmIChibG9jay5yID09PSB0YXJnZXRSb3cgJiYgYmxvY2suYyA9PT0gdGFyZ2V0Q29sXHJcbiAgICAgICAgICAgICAgICAmJiBibG9jay5jb21tYW5kRGF0YS50eXBlICE9PSBDb21tYW5kVHlwZXMuRW1wdHlcclxuICAgICAgICAgICAgICAgICYmIGJsb2NrLmZsb3dUeXBlICE9PSBGbG93VHlwZXMuRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChibG9jay5jb21tYW5kRGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuQW5nbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwgPSAoKSA9PiBhbmdsZUNhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLk1vdmU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwgPSAoKSA9PiBtb3ZlQ2FsbChnYW1lU3RhdGUsIGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVN0YXRlLm5leHRTdGFjay5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuU3RhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwgPSAoKSA9PiBzdGFydENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlRocmVhZDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suY2FsbCA9ICgpID0+IHN0YXJ0TmV3VGhyZWFkQ2FsbChnYW1lU3RhdGUsIGJsb2NrLmNvbW1hbmREYXRhLnRvdGFsVW5pdHMsIGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVN0YXRlLm5leHRTdGFjay5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2RlY2xhcmF0aW9ucy9qc29uLmQudHNcIiAvPlxyXG5pbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IGxldmVsMSBmcm9tICcuLi9kYXRhL2xldmVscy9sZXZlbDEuanNvbic7XHJcbmltcG9ydCB7IEdlbmVyYXRlTGV2ZWwgfSBmcm9tIFwiLi9HZW5lcmF0ZUxldmVsXCI7XHJcbmltcG9ydCB7IFNldFVwRXZlbnRMaXN0ZW5lcnMgfSBmcm9tIFwiLi9TZXRVcEV2ZW50TGlzdGVuZXJzXCI7XHJcbmltcG9ydCB7IEZsb3dCbG9jayB9IGZyb20gXCIuL0Zsb3dCbG9ja1wiO1xyXG5pbXBvcnQgeyBSb2JvdCB9IGZyb20gXCIuL1JvYm90XCI7XHJcblxyXG4vLyBUT0RPOiBzd2l0Y2ggYWJzdHJhY3QgY2xhc3MgQmFzZUJsb2NrIHRvIGJlIGFuIGludGVyZmFjZSBjYWxsZWQgSUJhc2VCbG9jayBcclxuLy8gVE9ETzogcGFzcyByZWZlcmVuY2UgdG8gR2FtZVN0YXRlIC8gR2FtZVN0YXRlIC8gcHJvcCBpbiBtZXRob2RzIChkcmF3LCB1cGRhdGUpIHdoZXJlIG5lZWRlZFxyXG4vLyAtPiBjYW4gcGFzcyBpbiB0byBjb25zdHJ1Y3RvciBhcyB3ZWxsXHJcbi8vIC0tPiBkb24ndCB3YW50IHRvIHN0b3JlIGluIGEgY2xhc3MgbWVtYmVyIHRob1xyXG4vLyBUT0RPOiBhZGQgYmlnIHllbGxvdyBibG9jayB0aGF0IHJlbmRlcnMgYmVoaW5kIGdyaWQgYmxvY2tzIHRvIGluZGljYXRlIHdoaWNoIGJsb2NrIGlzIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZFxyXG4vLyBUT0RPOiBoYXZlIEZsb3dCbG9ja0J1dHRvbiBhbmQgQ29tbWFuZEJsb2NrQnV0dG9ucyBleHRlbmQgZnJvbSB0aGVpciByZXNwZWN0aXZlIGJsb2Nrc1xyXG4vLyBUT0RPOiBwdXNoIG1vc3QgcmVjZW50bHkgY2xpY2tlZCBjb21tYW5kIC8gZmxvdyBibG9jayB0byB0b3Agb2YgYmxvY2sgYXJyYXkgdG8gcmVuZGVyIGl0IG9uIHRvcCBvZiBldmVyeXRoaW5nIGVsc2VcclxuLy8gVE9ETzogc3dpdGNoIHNwYWNlYmFyIGNvbnRyb2wgYnV0dG9uIHRvIGNsaWNrYWJsZSByYWRpbyBidXR0b25cclxuLy8gVE9ETzogYWRkIGJhc2UgVUkgY2xhc3MgLyBzd2l0Y2ggc2xpZGVyW10gdG8gYmFzZVVJRWxlbWVudFtdIGluIEdhbWVTdGF0ZVxyXG4vLyBUT0RPOiBhZGQgZXhlY3V0ZSBwcm9ncmFtIC8gc3RvcCBwcm9ncmFtIGJ1dHRvbnNcclxuLy8gVE9ETzogYWRkIG1hbmlmb2xkIGNvbGxpc2lvbiBzeXN0ZW0gZm9yIGdyaWRibG9jayBjb2xsaXNpb24gd2l0aCBmbG93IGFuZCBjb21tYW5kIGJsb2Nrcy5cclxuLy8gLT4gaS5lLiBzbmFwIGNvbW1hbmQgYmxvY2sgdG8gZ3JpZCBibG9jayB0aGF0IGhhcyB0aGUgYmlnZ2VzdCBtYW5pZm9sZFxyXG5cclxuLy8gc2V0IHVwIGdhbWUgc3RhdGVcclxudmFyIGdhbWVTdGF0ZSA9IG5ldyBHYW1lU3RhdGUoKTtcclxuR2VuZXJhdGVMZXZlbChnYW1lU3RhdGUsIGxldmVsMSwgXCJsaWdodGJsdWVcIik7XHJcblNldFVwRXZlbnRMaXN0ZW5lcnMoZ2FtZVN0YXRlKTtcclxuXHJcbi8vIHRlc3QgZW50aXR5XHJcbmxldCByb2JvdCA9IG5ldyBSb2JvdChnYW1lU3RhdGUsIDM3NSwgMjAwLCAyNSwgMjUpO1xyXG5nYW1lU3RhdGUuZW50aXRpZXMucHVzaChyb2JvdCk7XHJcblxyXG5mdW5jdGlvbiBkcmF3KCkgOiB2b2lkIHtcclxuICAgIGdhbWVTdGF0ZS5jdHguY2xlYXJSZWN0KDAsIDAsIGdhbWVTdGF0ZS5jYW52YXMud2lkdGgsIGdhbWVTdGF0ZS5jYW52YXMuaGVpZ2h0KTtcclxuICAgIGdhbWVTdGF0ZS5jdHguYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgLy8gcmVuZGVyIFVJIGVsZW1lbnRzXHJcbiAgICBnYW1lU3RhdGUudXNlckludGVyZmFjZXMuZm9yRWFjaCh1c2VySW50ZXJmYWNlID0+IHtcclxuICAgICAgICB1c2VySW50ZXJmYWNlLmRyYXcoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHJlbmRlciBhbGwgbm9uLWZsb3cgYmxvY2tzIGZpcnN0XHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmICghKGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKSkge1xyXG4gICAgICAgICAgICBibG9jay5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gcmVuZGVyIGFsbCBmbG93IGJsb2NrcyBsYXN0IHRvIGxheWVyIHRoZW0gb24gdG9wIG9mIGNvbW1hbmQgYmxvY2tzXHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9jaykge1xyXG4gICAgICAgICAgICBibG9jay5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gcmVuZGVyIGFsbCBlbnRpdGllc1xyXG4gICAgZ2FtZVN0YXRlLmVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcclxuICAgICAgICBlbnRpdHkuZHJhdygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZ2FtZVN0YXRlLmN0eC5zdHJva2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgYmxvY2sudXBkYXRlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lU3RhdGUudXNlckludGVyZmFjZXMuZm9yRWFjaCh1c2VySW50ZXJmYWNlID0+IHtcclxuICAgICAgICB1c2VySW50ZXJmYWNlLnVwZGF0ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZ2FtZVN0YXRlLmVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcclxuICAgIC8vICAgICBlbnRpdHkudXBkYXRlKCk7XHJcbiAgICAvLyB9KTtcclxufVxyXG5cclxuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSA6IHZvaWQge1xyXG4gICAgdXBkYXRlKCk7XHJcbiAgICBkcmF3KCk7XHJcblxyXG4gICAgY29uc3QgY2FsbFN0YWNrID0gZ2FtZVN0YXRlLm5leHRTdGFjaztcclxuICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sgPSBbXTtcclxuXHJcbiAgICBpZiAoY2FsbFN0YWNrLmxlbmd0aCA+IDAgJiYgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nKSB7XHJcbiAgICAgICAgY2FsbFN0YWNrLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICAvLyB3aWxsIGNhbGwgY29tbWFuZCBhbmQgcHVzaCBpdCBiYWNrIG9uIHN0YWNrXHJcbiAgICAgICAgICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYmxvY2suY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLm5leHRTdGFjay5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBlbHNlIGp1c3QgY2FsbCBvbmNlIGFuZCBmaW5kIG5leHQgY2FsbFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbn0sIDEyKTsiLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2tCdXR0b24gfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiLi9TbGlkZXJcIjtcclxuaW1wb3J0IHsgVGhyZWFkT2JzZXJ2ZXIgfSBmcm9tIFwiLi9UaHJlYWRPYnNlcnZlclwiO1xyXG5pbXBvcnQgeyBQbHVzTWludXMgfSBmcm9tIFwiLi9QbHVzTWludXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHZW5lcmF0ZUxldmVsKGdhbWVTdGF0ZTogR2FtZVN0YXRlLCBsZXZlbE9iajogb2JqZWN0LCBwYWxldHRlQ29sb3I6IHN0cmluZykge1xyXG4gICAgbGV0IHlPZmZzZXQ6IG51bWJlciA9IDU7XHJcbiAgICBsZXQgeE9mZnNldDogbnVtYmVyID0gNTtcclxuICAgIGxldCBtYXhYT2Zmc2V0OiBudW1iZXIgPSAwO1xyXG4gICAgbGV0IG1heFlPZmZzZXQ6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgY29tbWFuZFBhbGV0dGVIOiBudW1iZXIgPSBsZXZlbE9ialtcImNvbW1hbmRfcGFsZXR0ZVwiXVtcImJsb2NrX2hlaWdodFwiXTtcclxuICAgIGxldCBjb21tYW5kUGFsZXR0ZVc6IG51bWJlciA9IGxldmVsT2JqW1wiY29tbWFuZF9wYWxldHRlXCJdW1wiYmxvY2tfd2lkdGhcIl1cclxuXHJcbiAgICAvLyBzZXQgdXAgZ3JpZCBmb3IgQ29tbWFuZCBQYWxldHRlXHJcbiAgICAvLyBhc3NpZ24gcm93IGFuZCBjb2x1bW4gdmFsdWVzIHRvIGdyaWQgYmxvY2tzXHJcbiAgICBmb3IgKHZhciByID0gMDsgciA8IGNvbW1hbmRQYWxldHRlSDsgcisrKSB7XHJcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjb21tYW5kUGFsZXR0ZVc7IGMrKykge1xyXG4gICAgICAgICAgICBuZXcgR3JpZEJsb2NrKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCByLCBjLCBwYWxldHRlQ29sb3IpO1xyXG4gICAgICAgICAgICB4T2Zmc2V0ICs9IDU1O1xyXG4gICAgICAgIH1cclxuICAgICAgICB5T2Zmc2V0ICs9IDU1O1xyXG4gICAgICAgIG1heFhPZmZzZXQgPSB4T2Zmc2V0O1xyXG4gICAgICAgIHhPZmZzZXQgPSA1O1xyXG4gICAgfVxyXG5cclxuICAgIG1heFlPZmZzZXQgPSB5T2Zmc2V0O1xyXG4gICAgeU9mZnNldCA9IG1heFlPZmZzZXQgKyAyMDtcclxuXHJcbiAgICAvLyBzZXQgdXAgQ29tbWFuZCBCbG9jayBCdXR0b25zXHJcbiAgICAvLyBDT05TSURFUjogQWNjb21tb2RhdGluZyBmb3IgY29tbWFuZCBwYWxldHRlIHdpZHRoXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxldmVsT2JqW1wiY29tbWFuZF9ibG9ja3NcIl0ubGVuZ3RoOyBpICsrKSB7XHJcbiAgICAgICAgc3dpdGNoKGxldmVsT2JqW1wiY29tbWFuZF9ibG9ja3NcIl1baV0pIHtcclxuICAgICAgICAgICAgY2FzZSBcInN0YXJ0XCI6XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRCbG9jayA9IG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgbmV3IFRocmVhZE9ic2VydmVyKGdhbWVTdGF0ZSwgc3RhcnRCbG9jay54LCBzdGFydEJsb2NrLnksIHN0YXJ0QmxvY2suaCwgc3RhcnRCbG9jay53LCBzdGFydEJsb2NrLnVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICBsZXQgbW92ZUJsb2NrID0gbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ0aGlzdGxlXCIsIENvbW1hbmRUeXBlcy5Nb3ZlKTtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB1cCBzbGlkZXIsIHBhc3MgaW4gcmVmZXJlbmNlIHRvIG1vdmUgY2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIG5ldyBTbGlkZXIoZ2FtZVN0YXRlLCB4T2Zmc2V0ICsgMjAsIHlPZmZzZXQgKyA2MCwgMTAwLCBDb21tYW5kVHlwZXMuTW92ZSwgbW92ZUJsb2NrLnVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhbmdsZVwiOlxyXG4gICAgICAgICAgICAgICAgbGV0IGFuZ2xlQmxvY2sgPSBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZFR5cGVzLkFuZ2xlKTtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB1cCBzbGlkZXIsIHBhc3MgaW4gcmVmZXJlbmNlIHRvIGFuZ2xlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBuZXcgU2xpZGVyKGdhbWVTdGF0ZSwgeE9mZnNldCArIDIwLCB5T2Zmc2V0ICsgNjAsIDM2MCwgQ29tbWFuZFR5cGVzLkFuZ2xlLCBhbmdsZUJsb2NrLnVwZGF0ZURhdGEsIDgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0aHJlYWRcIjpcclxuICAgICAgICAgICAgICAgIGxldCB0aHJlYWRCbG9jayA9IG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuVGhyZWFkKTtcclxuICAgICAgICAgICAgICAgIG5ldyBQbHVzTWludXMoZ2FtZVN0YXRlLCAxNzUsIDM2MCwgdGhyZWFkQmxvY2sudXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImxhc2VyXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcImdyZWVuXCIsIENvbW1hbmRUeXBlcy5MYXNlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNjYW5cIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwiZGFya2JsdWVcIiwgQ29tbWFuZFR5cGVzLlNjYW4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJncmFwcGxlXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcIm1hcm9vblwiLCBDb21tYW5kVHlwZXMuR3JhcHBsZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgeE9mZnNldCArPSA1NTtcclxuICAgIH1cclxuXHJcbiAgICB4T2Zmc2V0ID0gbWF4WE9mZnNldCArIDIwO1xyXG4gICAgeU9mZnNldCA9IDU7XHJcblxyXG4gICAgLy8gc2V0IHVwIEZsb3cgQmxvY2sgQnV0dG9uc1xyXG4gICAgLy8gQ09OU0lERVI6IEFjY29tbW9kYXRpbmcgZm9yIGNvbW1hbmQgcGFsZXR0ZSBoZWlnaHRcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxPYmpbXCJmbG93X2Jsb2Nrc1wiXS5sZW5ndGg7IGkgKyspIHtcclxuICAgICAgICBzd2l0Y2gobGV2ZWxPYmpbXCJmbG93X2Jsb2Nrc1wiXVtpXSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidXBcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5VcCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5MZWZ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5SaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImRvd25cIjpcclxuICAgICAgICAgICAgICAgIG5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dUeXBlcy5Eb3duKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB5T2Zmc2V0ICs9IDU1O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9jaywgQ29tbWFuZEJsb2NrQnV0dG9uIH0gZnJvbSBcIi4vQ29tbWFuZEJsb2NrXCI7XHJcbmltcG9ydCB7IEdyaWRCbG9jayB9IGZyb20gXCIuL0dyaWRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2ssIEZsb3dCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0Zsb3dCbG9ja1wiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMsIEZsb3dUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcbmltcG9ydCB7IHN0YXJ0TmV3VGhyZWFkQ2FsbCB9IGZyb20gXCIuL1Byb2dyYW1FeGVjdXRpb25cIjtcclxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSBcIi4vU2xpZGVyXCI7XHJcbmltcG9ydCB7IFRocmVhZE9ic2VydmVyIH0gZnJvbSBcIi4vVGhyZWFkT2JzZXJ2ZXJcIjtcclxuaW1wb3J0IHsgUGx1c01pbnVzIH0gZnJvbSBcIi4vUGx1c01pbnVzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU2V0VXBFdmVudExpc3RlbmVycyhnYW1lU3RhdGU6IEdhbWVTdGF0ZSkge1xyXG4gICAgZ2FtZVN0YXRlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbigpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gQ29sbGlzaW9uIGRldGVjdGlvbiBiZXR3ZWVuIGNsaWNrZWQgb2Zmc2V0IGFuZCBibG9jay5cclxuICAgICAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLm1vdXNlWSA+IGJsb2NrLnkgJiYgZ2FtZVN0YXRlLm1vdXNlWSA8IGJsb2NrLnkgKyBibG9jay5oXHJcbiAgICAgICAgICAgICAgICAmJiBnYW1lU3RhdGUubW91c2VYID4gYmxvY2sueCAmJiBnYW1lU3RhdGUubW91c2VYIDwgYmxvY2sueCArIGJsb2NrLncpIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9jayAmJiBnYW1lU3RhdGUuY29tbWFuZENvbnRyb2xcclxuICAgICAgICAgICAgICAgICAgICB8fCBibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9ja0J1dHRvbiAmJiBnYW1lU3RhdGUuY29tbWFuZENvbnRyb2xcclxuICAgICAgICAgICAgICAgICAgICB8fCBibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9jayAmJiBnYW1lU3RhdGUuZmxvd0NvbnRyb2xcclxuICAgICAgICAgICAgICAgICAgICB8fCBibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9ja0J1dHRvbiAmJiBnYW1lU3RhdGUuZmxvd0NvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2sgaW5zdGFuY2VvZiBHcmlkQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayByYWRpbyBidXR0b24gZm9yIGZsb3cgb3IgY29tbWFuZCBjb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jb21tYW5kRGF0YS50eXBlID0gQ29tbWFuZFR5cGVzLkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChnYW1lU3RhdGUuZmxvd0NvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suZmxvd1R5cGUgPSBGbG93VHlwZXMuRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGZvciBzbGlkZXJzIGJlaW5nIGNsaWNrZWRcclxuICAgICAgICBnYW1lU3RhdGUudXNlckludGVyZmFjZXMuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgaWYgKHMgaW5zdGFuY2VvZiBTbGlkZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGUubW91c2VZID4gcy5zbGlkZXJZICYmIGdhbWVTdGF0ZS5tb3VzZVkgPCBzLnNsaWRlclkgKyBzLnNsaWRlckhcclxuICAgICAgICAgICAgICAgICAgICAmJiBnYW1lU3RhdGUubW91c2VYID4gcy5zbGlkZXJYICYmIGdhbWVTdGF0ZS5tb3VzZVggPCBzLnNsaWRlclggKyBzLnNsaWRlclcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocyBpbnN0YW5jZW9mIFRocmVhZE9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLm1vdXNlWSA+IHMueSAmJiBnYW1lU3RhdGUubW91c2VZIDwgcy55ICsgcy5oXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IHMueCAmJiBnYW1lU3RhdGUubW91c2VYIDwgcy54ICsgcy53KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBlbHNlIGlmIChzIGluc3RhbmNlb2YgUGx1c01pbnVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLm1vdXNlWSA+IHMucGx1c1kgJiYgZ2FtZVN0YXRlLm1vdXNlWSA8IHMucGx1c1kgKyBzLnBsdXNIXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IHMucGx1c1ggJiYgZ2FtZVN0YXRlLm1vdXNlWCA8IHMucGx1c1ggKyBzLnBsdXNXKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHMubW91c2VEb3duUGx1cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLm1vdXNlWSA+IHMubWludXNZICYmIGdhbWVTdGF0ZS5tb3VzZVkgPCBzLm1pbnVzWSArIHMubWludXNIXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IHMubWludXNYICYmIGdhbWVTdGF0ZS5tb3VzZVggPCBzLm1pbnVzWCArIHMubWludXNXKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHMubW91c2VEb3duTWludXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgLy8gbWFrZSBzdXJlIGFsbCBjbGlja2FibGUgZW50aXRpZXMgYXJlbid0IGNsaWNrYWJsZSBvbiBtb3VzZXVwXHJcbiAgICBnYW1lU3RhdGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbigpIDogdm9pZCB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgQ29tbWFuZEJsb2NrXHJcbiAgICAgICAgICAgICAgICB8fCBibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLm1vdXNlVXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBnYW1lU3RhdGUudXNlckludGVyZmFjZXMuZm9yRWFjaCh1c2VySW50ZXJmYWNlID0+IHtcclxuICAgICAgICAgICAgdXNlckludGVyZmFjZS5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHVzZXJJbnRlcmZhY2UgaW5zdGFuY2VvZiBUaHJlYWRPYnNlcnZlcikge1xyXG4gICAgICAgICAgICAgICAgdXNlckludGVyZmFjZS5tb3VzZVVwKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICBnYW1lU3RhdGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGV2dDogTW91c2VFdmVudCkgOiB2b2lkIHtcclxuICAgICAgICBnYW1lU3RhdGUubW91c2VYID0gKGV2dC5jbGllbnRYIC0gZ2FtZVN0YXRlLnJlY3QubGVmdCkgLyAoZ2FtZVN0YXRlLnJlY3QucmlnaHQgLSBnYW1lU3RhdGUucmVjdC5sZWZ0KSAqIGdhbWVTdGF0ZS5jYW52YXMud2lkdGg7XHJcbiAgICAgICAgZ2FtZVN0YXRlLm1vdXNlWSA9IChldnQuY2xpZW50WSAtIGdhbWVTdGF0ZS5yZWN0LnRvcCkgLyAoZ2FtZVN0YXRlLnJlY3QuYm90dG9tIC0gZ2FtZVN0YXRlLnJlY3QudG9wKSAqIGdhbWVTdGF0ZS5jYW52YXMuaGVpZ2h0O1xyXG4gICAgfSwgZmFsc2UpO1xyXG5cclxuICAgIHdpbmRvdy5vbmtleXVwID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vIGkuZS4gU3BhY2VCYXIgcHJlc3NlZFxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDMyKSB7XHJcbiAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuZmxvd0NvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5mbG93Q29udHJvbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29tbWFuZCBDb250cm9sIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmZsb3dDb250cm9sID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmxvdyBDb250cm9sIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaS5lLiBTIGtleSBwcmVzc2VkXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gODMpIHtcclxuICAgICAgICAgICAgaWYgKCFnYW1lU3RhdGUucHJvZ3JhbVJ1bm5pbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IHByb2dyYW1cclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5wcm9ncmFtUnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzdGFydE5ld1RocmVhZENhbGwoZ2FtZVN0YXRlLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZiBTIGtleSBpcyBwcmVzc2VkIHdoaWxlIHByb2dyYW0gaXMgcnVubmluZ1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHN0b3AgcHJvZ3JhbVxyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUubmV4dFN0YWNrID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9