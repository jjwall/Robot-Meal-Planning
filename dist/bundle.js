!function(t){var e={};function a(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)a.d(s,i,function(e){return t[e]}.bind(null,i));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle","thread"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var s,i,n=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.entities=t&&t.entities||[],this.userInterfaces=t&&t.userInterfaces||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),o=a(0),r=function(){function t(t,e,a,s,i,n){this.GameState=t,this.X=e,this.Y=a,this.H=s,this.W=i,this.Color=n,this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=i,this.color=n}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(s||(s={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(i||(i={}));var h=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),c=function(t){function e(e,a,n,o,r,h,c,l){var u=t.call(this,e,a,n,o,r,l)||this;return u.r=h,u.c=c,u.flowType=i.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,unitsPerCall:0,callCount:0,type:s.Empty},u}return h(e,t),e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r),l=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),u=function(t){function e(e,a,i,n,o,r,h,c,l,u,m){var p=t.call(this,e,a,i,n,o,u)||this;switch(p.baseUnits=r,p.callCount=h,p.unitsPerCall=c,p.totalUnits=l,p.mouseDown=!0,p.set=!1,p.type=m,p.image=new Image,m){case s.Start:p.image.src="data/textures/StartBlock.png";break;case s.Move:p.image.src="data/textures/MoveBlock.png";break;case s.Angle:p.image.src="data/textures/AngleBlock.png";break;case s.Thread:p.image.src="data/textures/ThreadBlock.png"}return p.gameState.blocks.push(p),p}return l(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){if(e instanceof c&&e.commandData.type===s.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y){t.x=e.x,t.y=e.y,t.set=!0;var a={type:t.type,baseUnits:t.baseUnits,callCount:t.callCount,unitsPerCall:t.unitsPerCall,totalUnits:t.totalUnits};e.commandData.type=a.type,e.commandData.baseUnits=a.baseUnits,e.commandData.callCount=a.callCount,e.commandData.unitsPerCall=a.unitsPerCall,e.commandData.totalUnits=a.totalUnits,e.currentCallCount=t.callCount}}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),m=function(t){function e(e,a,i,n,o,r,h){var c=t.call(this,e,a,i,n,o,r)||this;switch(c.updateData=function(t,e,a,s){c.callCount=t,c.baseUnits=e,c.unitsPerCall=a,c.totalUnits=s},c.mouseDown=!1,c.type=h,c.image=new Image,c.baseUnits=0,c.callCount=0,c.unitsPerCall=0,c.totalUnits=0,h){case s.Start:c.image.src="data/textures/StartBlock.png";break;case s.Move:c.image.src="data/textures/MoveBlock.png";break;case s.Angle:c.image.src="data/textures/AngleBlock.png";break;case s.Thread:c.image.src="data/textures/ThreadBlock.png"}return c.gameState.blocks.push(c),c}return l(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new u(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.unitsPerCall,this.totalUnits,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),p=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),f=function(t){function e(e,a,s,n,o,r,h){var c=t.call(this,e,a,s,n,o,r)||this;switch(c.gameState=e,c.type=h,c.mouseDown=!0,c.set=!1,c.image=new Image,h){case i.Up:c.image.src="data/textures/UpArrow.png";break;case i.Down:c.image.src="data/textures/DownArrow.png";break;case i.Left:c.image.src="data/textures/LeftArrow.png";break;case i.Right:c.image.src="data/textures/RightArrow.png"}return c.gameState.blocks.push(c),c}return p(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof c&&e.flowType===i.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.flowType=t.type)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),g=function(t){function e(e,a,s,n,o,r,h){var c=t.call(this,e,a,s,n,o,r)||this;switch(c.type=h,c.mouseDown=!1,c.image=new Image,h){case i.Up:c.image.src="data/textures/UpArrow.png";break;case i.Down:c.image.src="data/textures/DownArrow.png";break;case i.Left:c.image.src="data/textures/LeftArrow.png";break;case i.Right:c.image.src="data/textures/RightArrow.png"}return c.gameState.blocks.push(c),c}return p(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new f(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),d=function(){function t(t,e,a,s,i,n,o,r){void 0===r&&(r=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=s,this.unitsPerCall=i,this.snapAmount=r,this.updateDataCallBack=o,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=n,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.totalUnits=Math.round(this.value*this.maxUnits),this.gameState.userInterfaces.push(this);var h=this.totalUnits/this.unitsPerCall;this.updateDataCallBack(h,this.baseUnits,this.unitsPerCall,this.totalUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH,this.totalUnits=Math.round(this.value*this.maxUnits);var e=this.totalUnits/this.unitsPerCall;this.updateDataCallBack(e,this.baseUnits,this.unitsPerCall,this.totalUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),w=function(){function t(t,e,a,s,i,n){this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=i,this.threads=1,this.updateDataCallBack=n,this.mouseDown=!1,this.gameState.userInterfaces.push(this),this.updateDataCallBack(0,1,0,this.threads)}return t.prototype.recalculateExistingThreadCounts=function(){var t=[],e=[];this.gameState.blocks.forEach(function(a){a instanceof u?a.type===s.Start&&t.push(a):a instanceof c&&a.commandData.type===s.Start&&e.push(a)}),t.sort(function(t,e){return t.totalUnits>e.totalUnits?1:e.totalUnits>t.totalUnits?-1:0}),e.sort(function(t,e){return t.commandData.totalUnits>e.commandData.totalUnits?1:e.commandData.totalUnits>t.commandData.totalUnits?-1:0});for(var a=0;a<t.length;a++)a+1<t[a].totalUnits&&t[a].totalUnits--;for(a=0;a<e.length;a++)a+1<e[a].commandData.totalUnits&&e[a].commandData.totalUnits--},t.prototype.mouseUp=function(){var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,0,this.threads),this.recalculateExistingThreadCounts()},t.prototype.update=function(){if(this.mouseDown){this.mouseDown=!1;var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(0,1,0,this.threads)}},t.prototype.draw=function(){},t}(),y=function(){function t(t,e,a,s){this.gameState=t,this.minusX=e,this.minusY=a,this.minusH=10,this.minusW=15,this.plusX=e+25,this.plusY=a,this.plusH=10,this.plusW=15,this.updateDataCallBack=s,this.color="purple",this.mouseDown=!1,this.mouseDownMinus=!1,this.mouseDownPlus=!1,this.targetThread=1,this.updateDataCallBack(0,1,0,this.targetThread),this.gameState.userInterfaces.push(this)}return t.prototype.update=function(){this.mouseDownPlus?(this.mouseDownPlus=!1,this.mouseDown=!1,this.targetThread++,this.updateDataCallBack(0,1,0,this.targetThread)):this.mouseDownMinus&&(this.mouseDownMinus=!1,this.mouseDown=!1,this.targetThread>1&&(this.targetThread--,this.updateDataCallBack(0,1,0,this.targetThread))),this.mouseDown||(this.mouseDownMinus=!1,this.mouseDownPlus=!1)},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.minusX,this.minusY,this.minusW,this.minusH),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.plusX,this.plusY,this.plusW,this.plusH),this.gameState.ctx.fillStyle="thistle",this.gameState.ctx.font="17px Arial",this.gameState.ctx.fillText("-",this.minusX+this.minusW/3,this.minusY+this.minusH),this.gameState.ctx.fillText("+",this.plusX+this.plusW/4-1,this.plusY+this.plusH+1)},t}();var x=function(){function t(t,e,a,s,i){this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=i,this.angle=0,this.color="grey",this.image=new Image,this.image.src="data/textures/RobotGun.png"}return t.prototype.update=function(){},t.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.rotate(this.angle*Math.PI/180),this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(-this.h/2,-this.w/2,this.w,this.h),this.gameState.ctx.drawImage(this.image,-this.w/2,-this.h/2),this.gameState.ctx.rotate(-this.angle*Math.PI/180),this.gameState.ctx.translate(-this.x,-this.y)},t.prototype.move=function(t){var e=Math.cos(this.angle*Math.PI/180)*t,a=Math.sin(this.angle*Math.PI/180)*t;this.x+=e,this.y+=a},t.prototype.turnClockWise=function(t){this.angle+=t},t}();function S(t,e,a){t.blocks.forEach(function(a){a instanceof c&&a.commandData.type===s.Start&&a.commandData.totalUnits===e&&a.flowType!==i.Empty&&b(t,a)}),void 0!==a&&(console.log("thread"),b(t,a))}function b(t,e){var a,n;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case i.Up:a=e.r-1,n=e.c;break;case i.Down:a=e.r+1,n=e.c;break;case i.Right:n=e.c+1,a=e.r;break;case i.Left:n=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof c&&e.r===a&&e.c===n&&e.commandData.type!==s.Empty&&e.flowType!==i.Empty)switch(e.commandData.type){case s.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--,t.entities.forEach(function(t){t instanceof x&&t.turnClockWise(e.commandData.unitsPerCall)})):b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--,t.entities.forEach(function(t){t instanceof x&&t.move(e.commandData.unitsPerCall)})):b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Start:e.call=function(){return function(t,e){console.log("start"),b(t,e)}(t,e)},t.nextStack.push(e);break;case s.Thread:e.call=function(){return S(t,e.commandData.totalUnits,e)},t.nextStack.push(e)}})}var k=new n;!function(t,e,a){for(var n=5,o=5,r=0,h=e.command_palette.block_height,l=e.command_palette.block_width,u=0;u<h;u++){for(var p=0;p<l;p++)new c(t,o,n,50,50,u,p,a),o+=55;n+=55,r=o,o=5}n+=20;for(var f=0;f<e.command_blocks.length;f++){switch(e.command_blocks[f]){case"start":var x=new m(t,o,n,50,50,"thistle",s.Start);new w(t,x.x,x.y,x.h,x.w,x.updateData);break;case"move":var S=new m(t,o,n,50,50,"thistle",s.Move);new d(t,o+20,n+60,100,.5,s.Move,S.updateData);break;case"angle":var b=new m(t,o,n,50,50,"thistle",s.Angle);new d(t,o+20,n+60,360,1,s.Angle,b.updateData,8);break;case"thread":var k=new m(t,o,n,50,50,"thistle",s.Thread);new y(t,175,360,k.updateData);break;case"laser":new m(t,o,n,50,50,"green",s.Laser);break;case"scan":new m(t,o,n,50,50,"darkblue",s.Scan);break;case"grapple":new m(t,o,n,50,50,"maroon",s.Grapple)}o+=55}for(o=r+20,n=5,f=0;f<e.flow_blocks.length;f++){switch(e.flow_blocks[f]){case"up":new g(t,o,n,50,50,"yellow",i.Up);break;case"left":new g(t,o,n,50,50,"yellow",i.Left);break;case"right":new g(t,o,n,50,50,"yellow",i.Right);break;case"down":new g(t,o,n,50,50,"yellow",i.Down)}n+=55}}(k,o,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof u&&t.commandControl||e instanceof m&&t.commandControl||e instanceof f&&t.flowControl||e instanceof g&&t.flowControl?e.mouseDown=!0:e instanceof c&&(t.commandControl?e.commandData.type=s.Empty:t.flowControl&&(e.flowType=i.Empty)))}),t.userInterfaces.forEach(function(e){e instanceof d?t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0):e instanceof w?t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e.mouseDown=!0):e instanceof y&&(t.mouseY>e.plusY&&t.mouseY<e.plusY+e.plusH&&t.mouseX>e.plusX&&t.mouseX<e.plusX+e.plusW&&(e.mouseDown=!0,e.mouseDownPlus=!0),t.mouseY>e.minusY&&t.mouseY<e.minusY+e.minusH&&t.mouseX>e.minusX&&t.mouseX<e.minusX+e.minusW&&(e.mouseDown=!0,e.mouseDownMinus=!0))})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof u||t instanceof f)&&t.mouseDown&&(t.mouseDown=!1,t.mouseUp())}),t.userInterfaces.forEach(function(t){t.mouseDown=!1,t instanceof w&&t.mouseUp()})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning?(t.programRunning=!1,t.nextStack=[]):(t.programRunning=!0,S(t,1)))}}(k);var C=new x(k,375,200,25,25);k.entities.push(C),setInterval(function(){k.blocks.forEach(function(t){t.update()}),k.userInterfaces.forEach(function(t){t.update()}),k.ctx.clearRect(0,0,k.canvas.width,k.canvas.height),k.ctx.beginPath(),k.userInterfaces.forEach(function(t){t.draw()}),k.blocks.forEach(function(t){t instanceof f||t.draw()}),k.blocks.forEach(function(t){t instanceof f&&t.draw()}),k.entities.forEach(function(t){t.draw()}),k.ctx.stroke();var t=k.nextStack;k.nextStack=[],t.length>0&&k.programRunning?t.forEach(function(t){t.currentCallCount>0?(t.call(),k.nextStack.push(t)):t.call()}):k.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,