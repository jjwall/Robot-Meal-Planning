!function(t){var e={};function o(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,o),a.l=!0,a.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(n,a,function(e){return t[e]}.bind(null,a));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);var n,a,i=function(){function t(t,e,o,n,a,i){this.GameState=t,this.X=e,this.Y=o,this.H=n,this.W=a,this.Color=i,this.gameState=t,this.x=e,this.y=o,this.h=n,this.w=a,this.color=i}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Scan=4]="Scan",t[t.Laser=5]="Laser",t[t.Grapple=6]="Grapple"}(n||(n={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(a||(a={}));var s=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(e,o)};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),r=function(t){function e(e,o,a,i,s,r,c){var h=t.call(this,e,o,a,i,s,r)||this;switch(h.mouseDown=!0,h.set=!1,h.type=c,h.image=new Image,c){case n.Start:h.image.src="data/textures/StartBlock.png";break;case n.Move:h.image.src="data/textures/MoveBlock.png";break;case n.Angle:h.image.src="data/textures/AngleBlock.png"}return h.gameState.blocks.push(h),h}return s(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y)},e}(i),c=function(t){function e(e,o,a,i,s,r,c){var h=t.call(this,e,o,a,i,s,r)||this;switch(h.mouseDown=!1,h.type=c,h.image=new Image,c){case n.Start:h.image.src="data/textures/StartBlock.png";break;case n.Move:h.image.src="data/textures/MoveBlock.png";break;case n.Angle:h.image.src="data/textures/AngleBlock.png"}return h.gameState.blocks.push(h),h}return s(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new r(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y)},e}(i),h=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(e,o)};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),l=function(t){function e(e,o,n,i,s,r,c){var h=t.call(this,e,o,n,i,s,r)||this;switch(h.gameState=e,h.type=c,h.mouseDown=!0,h.set=!1,h.image=new Image,c){case a.Up:h.image.src="data/textures/UpArrow.png";break;case a.Down:h.image.src="data/textures/DownArrow.png";break;case a.Left:h.image.src="data/textures/LeftArrow.png";break;case a.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return h(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(i),u=function(t){function e(e,o,n,i,s,r,c){var h=t.call(this,e,o,n,i,s,r)||this;switch(h.type=c,h.mouseDown=!1,h.image=new Image,c){case a.Up:h.image.src="data/textures/UpArrow.png";break;case a.Down:h.image.src="data/textures/DownArrow.png";break;case a.Left:h.image.src="data/textures/LeftArrow.png";break;case a.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return h(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new l(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(i),m=function(){var t=function(e,o){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(e,o)};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}(),f=function(t){function e(e,o,i,s,r,c,h,l){var u=t.call(this,e,o,i,s,r,l)||this;return u.r=c,u.c=h,u.commandType=n.Empty,u.flowType=a.Empty,u.gameState.blocks.push(u),u}return m(e,t),e.prototype.update=function(){var t=this;this.gameState.blocks.forEach(function(e){(e instanceof r||e instanceof l)&&!1===e.mouseDown&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.commandType===n.Empty&&e instanceof r?(e.x=t.x,e.y=t.y,e.set=!0,t.commandType=e.type):t.flowType===a.Empty&&e instanceof l&&(e.x=t.x,e.y=t.y,e.set=!0,t.flowType=e.type))})},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(i);o.d(e,"GameState",function(){return p});var p=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1}}(),g=new p;!function(t,e,o){for(var a=5,i=5,s=0;s<e.command_palette.block_height;s++){for(var r=0;r<e.command_palette.block_width;r++)new f(t,i,a,50,50,s,r,o),i+=55;a+=55,i=5}a+=20;for(var h=0;h<e.command_blocks.length;h++){switch(e.command_blocks[h]){case"start":new c(t,i,a,50,50,"thistle",n.Start);break;case"move":new c(t,i,a,50,50,"thistle",n.Move);break;case"angle":new c(t,i,a,50,50,"thistle",n.Angle);break;case"laser":new c(t,i,a,50,50,"green",n.Laser);break;case"scan":new c(t,i,a,50,50,"darkblue",n.Scan);break;case"grapple":new c(t,i,a,50,50,"maroon",n.Grapple)}i+=55}}(g,{next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],command_paths:["up","down","left","right"]},"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof r&&t.commandControl||e instanceof c&&t.commandControl||e instanceof l&&t.flowControl||e instanceof u&&t.flowControl?e.mouseDown=!0:e instanceof f&&(t.commandControl?e.commandType=n.Empty:t.flowControl&&(e.flowType=a.Empty)))})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof r||t instanceof l)&&t.mouseDown&&(t.mouseDown=!1)})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){if(32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode){var o=0,i=[],s=-1,r=-1;t.blocks.forEach(function(t){t instanceof f&&t.commandType!==n.Empty&&t.flowType!==a.Empty&&(o++,t.commandType===n.Start&&(s=t.r,r=t.c,i.push([s,r])))});for(var c=0;c<o;c++)t.blocks.forEach(function(t){if(t instanceof f&&t.commandType!==n.Empty&&t.flowType!==a.Empty&&t.r===s&&t.c===r)switch(console.log(n[t.commandType]),t.flowType){case a.Up:s--,i.filter(function(t){return t===[s,r]}).length>0?o++:i.push([s,r]);break;case a.Down:s++,i.filter(function(t){return t===[s,r]}).length>0?o++:i.push([s,r]);break;case a.Right:r++,i.filter(function(t){return t===[s,r]}).length>0?o++:i.push([s,r]);break;case a.Left:r--,i.filter(function(t){return t===[s,r]}).length>0?o++:i.push([s,r])}})}}}(g),new u(g,300,5,50,50,"yellow",a.Up),new u(g,300,60,50,50,"yellow",a.Down),new u(g,300,115,50,50,"yellow",a.Left),new u(g,300,170,50,50,"yellow",a.Right),setInterval(function(){g.blocks.forEach(function(t){t.update()}),g.ctx.clearRect(0,0,g.canvas.width,g.canvas.height),g.ctx.beginPath(),g.blocks.forEach(function(t){t instanceof l||t.draw()}),g.blocks.forEach(function(t){t instanceof l&&t.draw()}),g.ctx.stroke()},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xldmVsMS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRW51bXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Jhc2VCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbWFuZEJsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy9GbG93QmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dyaWRCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvTGV2ZWxDcmVhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9TZXRVcEV2ZW50TGlzdGVuZXJzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ29tbWFuZEJsb2NrVHlwZXMiLCJGbG93QmxvY2tUeXBlcyIsIkJhc2VCbG9jayIsIkdhbWVTdGF0ZSIsIlgiLCJZIiwiSCIsIlciLCJDb2xvciIsInRoaXMiLCJnYW1lU3RhdGUiLCJ4IiwieSIsImgiLCJ3IiwiY29sb3IiLCJkcmF3IiwidXBkYXRlIiwiQ29tbWFuZEJsb2NrX0NvbW1hbmRCbG9jayIsIl9zdXBlciIsIkNvbW1hbmRCbG9jayIsIlR5cGUiLCJfdGhpcyIsIm1vdXNlRG93biIsInNldCIsInR5cGUiLCJpbWFnZSIsIkltYWdlIiwiU3RhcnQiLCJzcmMiLCJNb3ZlIiwiQW5nbGUiLCJibG9ja3MiLCJwdXNoIiwiX19leHRlbmRzIiwibW91c2VYIiwibW91c2VZIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3R4IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJDb21tYW5kQmxvY2tfQ29tbWFuZEJsb2NrQnV0dG9uIiwiQ29tbWFuZEJsb2NrQnV0dG9uIiwiRmxvd0Jsb2NrX0Zsb3dCbG9jayIsIkZsb3dCbG9jayIsIlVwIiwiRG93biIsIkxlZnQiLCJSaWdodCIsIkZsb3dCbG9ja19leHRlbmRzIiwic3Ryb2tlU3R5bGUiLCJyZWN0IiwiRmxvd0Jsb2NrX0Zsb3dCbG9ja0J1dHRvbiIsIkZsb3dCbG9ja0J1dHRvbiIsIkdyaWRCbG9ja19HcmlkQmxvY2siLCJHcmlkQmxvY2siLCJSb3ciLCJDb2x1bW4iLCJjb21tYW5kVHlwZSIsIkVtcHR5IiwiZmxvd1R5cGUiLCJHcmlkQmxvY2tfZXh0ZW5kcyIsImZvckVhY2giLCJibG9jayIsIl9fd2VicGFja19leHBvcnRzX18iLCJtYWluX0dhbWVTdGF0ZSIsIm9iaiIsImNhbnZhcyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY29tbWFuZENvbnRyb2wiLCJmbG93Q29udHJvbCIsIm1haW5fZ2FtZVN0YXRlIiwibGV2ZWxPYmoiLCJwYWxldHRlQ29sb3IiLCJ5T2Zmc2V0IiwieE9mZnNldCIsImxlbmd0aCIsIkxhc2VyIiwiU2NhbiIsIkdyYXBwbGUiLCJMZXZlbENyZWF0b3IiLCJuZXh0X2xldmVsIiwiY29tbWFuZF9wYWxldHRlIiwiYmxvY2tfd2lkdGgiLCJibG9ja19oZWlnaHQiLCJjb21tYW5kX2Jsb2NrcyIsImNvbW1hbmRfcGF0aHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwiY2xpZW50WCIsImxlZnQiLCJyaWdodCIsIndpZHRoIiwiY2xpZW50WSIsInRvcCIsImJvdHRvbSIsImhlaWdodCIsIndpbmRvdyIsIm9ua2V5dXAiLCJlIiwia2V5Q29kZSIsImNvbnNvbGUiLCJsb2ciLCJwcm9ncmFtQmxvY2tzXzEiLCJ2aXNpdGVkQmxvY2tzXzEiLCJ0YXJnZXRSb3dfMSIsInRhcmdldENvbF8xIiwiZmlsdGVyIiwiU2V0VXBFdmVudExpc3RlbmVycyIsInNldEludGVydmFsIiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwic3Ryb2tlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVB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QU80QixNQUFPckIsRUFBVVAsT0FBT2dDLFFBQ3ZFekIsRUFBVXRDLElBQUk4RSxZQUdkeEMsRUFBVTlDLE9BQU9rQyxRQUFRLFNBQUFDLEdBQ2ZBLGFBQWlCcEIsR0FDbkJvQixFQUFNbkQsU0FLZDhELEVBQVU5QyxPQUFPa0MsUUFBUSxTQUFBQyxHQUNqQkEsYUFBaUJwQixHQUNqQm9CLEVBQU1uRCxTQUlkOEQsRUFBVXRDLElBQUkrRSxVQVlmIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8vIHRlbXBvcmFyeSBzb2x1dGlvbiB1bnRpbCB3ZSBjYW4gZmlndXJlIG91dCBob3cgdG8gaW1wb3J0IGpzb24gZmlsZXNcclxuZXhwb3J0IHZhciBsZXZlbDEgPSB7XHJcbiAgICBcIm5leHRfbGV2ZWxcIjogXCJsZXZlbDJcIixcclxuICAgIFwiY29tbWFuZF9wYWxldHRlXCI6IHtcclxuICAgICAgICBcImJsb2NrX3dpZHRoXCI6IDUsXHJcbiAgICAgICAgXCJibG9ja19oZWlnaHRcIjogNVxyXG4gICAgfSxcclxuICAgIFwiY29tbWFuZF9ibG9ja3NcIjogW1xyXG4gICAgICAgIFwic3RhcnRcIixcclxuICAgICAgICBcIm1vdmVcIixcclxuICAgICAgICBcImFuZ2xlXCIsXHJcbiAgICBdLFxyXG4gICAgXCJjb21tYW5kX3BhdGhzXCI6IFtcclxuICAgICAgICBcInVwXCIsXHJcbiAgICAgICAgXCJkb3duXCIsXHJcbiAgICAgICAgXCJsZWZ0XCIsXHJcbiAgICAgICAgXCJyaWdodFwiXHJcbiAgICBdXHJcbn0iLCJleHBvcnQgZW51bSBDb21tYW5kQmxvY2tUeXBlcyB7XHJcbiAgICBFbXB0eSxcclxuICAgIFN0YXJ0LFxyXG4gICAgTW92ZSxcclxuICAgIEFuZ2xlLFxyXG4gICAgU2NhbixcclxuICAgIExhc2VyLFxyXG4gICAgR3JhcHBsZVxyXG59XHJcblxyXG5leHBvcnQgZW51bSBGbG93QmxvY2tUeXBlcyB7XHJcbiAgICBFbXB0eSxcclxuICAgIFVwLFxyXG4gICAgRG93bixcclxuICAgIExlZnQsXHJcbiAgICBSaWdodCxcclxuICAgIENvbmRpdGlvbmFsTGVmdFJpZ2h0LFxyXG4gICAgQ29uZGl0aW9uYWxMZWZ0VXAsXHJcbiAgICBDb25kaXRpb25hbExlZnREb3duLFxyXG4gICAgQ29uZGl0aW9uYWxVcFJpZ2h0LFxyXG4gICAgQ29uZGl0aW9uYWxVcERvd24sXHJcbiAgICBDb25kaXRpb25hbERvd25SaWdodFxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VCbG9jayB7XHJcbiAgICBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgR2FtZVN0YXRlOiBHYW1lU3RhdGUsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgWDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIFk6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBIOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgVzogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIENvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLnggPSBYO1xyXG4gICAgICAgIHRoaXMueSA9IFk7XHJcbiAgICAgICAgdGhpcy5oID0gSDtcclxuICAgICAgICB0aGlzLncgPSBXO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBDb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCk6IHZvaWQge30gXHJcbiAgICB1cGRhdGUoKTogdm9pZCB7fVxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQgeyBCYXNlQmxvY2sgfSBmcm9tIFwiLi9CYXNlQmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZEJsb2NrVHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbW1hbmRCbG9jayBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxuICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBzZXQ6IGJvb2xlYW47XHJcbiAgICB0eXBlOiBDb21tYW5kQmxvY2tUeXBlcztcclxuICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogQ29tbWFuZEJsb2NrVHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBzd2l0Y2goVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRCbG9ja1R5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvU3RhcnRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRCbG9ja1R5cGVzLk1vdmU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Nb3ZlQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kQmxvY2tUeXBlcy5BbmdsZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0FuZ2xlQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5nYW1lU3RhdGUubW91c2VYIC0gdGhpcy53LzI7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWSAtIHRoaXMuaC8yO1xyXG4gICAgICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMubW91c2VEb3duICYmICF0aGlzLnNldCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBvbkNsaWNrKCkge1xyXG4gICAgLy8gfVxyXG59XHJcblxyXG4vLyBDT05TSURFUjogZXh0ZW5kaW5nIENvbW1hbmRCbG9jayBjbGFzc1xyXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJsb2NrQnV0dG9uIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgdzogbnVtYmVyO1xyXG4gICAgaDogbnVtYmVyO1xyXG4gICAgY29sb3I6IHN0cmluZztcclxuICAgIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHR5cGU6IENvbW1hbmRCbG9ja1R5cGVzO1xyXG4gICAgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBDb21tYW5kQmxvY2tUeXBlcykge1xyXG4gICAgICAgIHN1cGVyKEdhbWVTdGF0ZSwgWCwgWSwgSCwgVywgQ29sb3IpO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kQmxvY2tUeXBlcy5TdGFydDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1N0YXJ0QmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kQmxvY2tUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTW92ZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZEJsb2NrVHlwZXMuQW5nbGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9BbmdsZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIFRPRE86IEFkZCB0eXBlIHRvIENvbW1hbmRCbG9jayBjb25zdHJ1Y3RvclxyXG4gICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrKHRoaXMuZ2FtZVN0YXRlLCB0aGlzLngsIHRoaXMueSwgdGhpcy5oLCB0aGlzLncsIHRoaXMuQ29sb3IsIHRoaXMudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBpc0NvbW1hbmRCbG9jayhvYmo6IG9iamVjdCkgOiBvYmogaXMgQ29tbWFuZEJsb2NrIHtcclxuLy8gICAgIHZhciBjb21tYW5kQmxvY2tPYmogOiBDb21tYW5kQmxvY2sgPSA8Q29tbWFuZEJsb2NrPm9iajtcclxuICAgIFxyXG4vLyAgICAgcmV0dXJuIGNvbW1hbmRCbG9ja09iai5tb3VzZURvd24gIT09IHVuZGVmaW5lZDtcclxuLy8gfSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL21haW5cIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IEZsb3dCbG9ja1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG93QmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICB0eXBlOiBGbG93QmxvY2tUeXBlcztcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxuICAgIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHNldDogYm9vbGVhbjtcclxuICAgIGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogRmxvd0Jsb2NrVHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMubW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNldCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBzd2l0Y2goVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dCbG9ja1R5cGVzLlVwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVXBBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dCbG9ja1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Eb3duQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93QmxvY2tUeXBlcy5MZWZ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTGVmdEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd0Jsb2NrVHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9SaWdodEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWCAtIHRoaXMudy8yO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgLSB0aGlzLmgvMjtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlRG93biAmJiAhdGhpcy5zZXQpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5nYW1lU3RhdGUuYmxvY2tzLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgucmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT05TSURFUjogRXh0ZW5kaW5nIEZsb3dCbG9jayBoZXJlXHJcbmV4cG9ydCBjbGFzcyBGbG93QmxvY2tCdXR0b24gZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB3OiBudW1iZXI7XHJcbiAgICBoOiBudW1iZXI7XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgdHlwZTogRmxvd0Jsb2NrVHlwZXM7XHJcbiAgICBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKEdhbWVTdGF0ZTogR2FtZVN0YXRlLCBYOiBudW1iZXIsIFk6IG51bWJlciwgSDogbnVtYmVyLCBXOiBudW1iZXIsIENvbG9yOiBzdHJpbmcsIFR5cGU6IEZsb3dCbG9ja1R5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBzd2l0Y2goVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dCbG9ja1R5cGVzLlVwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVXBBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dCbG9ja1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Eb3duQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93QmxvY2tUeXBlcy5MZWZ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTGVmdEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd0Jsb2NrVHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9SaWdodEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG5ldyBGbG93QmxvY2sodGhpcy5nYW1lU3RhdGUsIHRoaXMueCwgdGhpcy55LCB0aGlzLmgsIHRoaXMudywgdGhpcy5Db2xvciwgdGhpcy50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKC10aGlzLngsIC10aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5zdHJva2VTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL21haW5cIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9jayB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2sgfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZEJsb2NrVHlwZXMsIEZsb3dCbG9ja1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkQmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICBoOiBudW1iZXI7XHJcbiAgICB3OiBudW1iZXI7XHJcbiAgICByOiBudW1iZXI7XHJcbiAgICBjOiBudW1iZXI7XHJcbiAgICBjb21tYW5kVHlwZTogQ29tbWFuZEJsb2NrVHlwZXM7XHJcbiAgICBmbG93VHlwZTogRmxvd0Jsb2NrVHlwZXM7XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgUm93OiBudW1iZXIsIENvbHVtbjogbnVtYmVyLCBDb2xvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy5yID0gUm93O1xyXG4gICAgICAgIHRoaXMuYyA9IENvbHVtbjtcclxuICAgICAgICB0aGlzLmNvbW1hbmRUeXBlID0gQ29tbWFuZEJsb2NrVHlwZXMuRW1wdHk7XHJcbiAgICAgICAgdGhpcy5mbG93VHlwZSA9IEZsb3dCbG9ja1R5cGVzLkVtcHR5O1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmJsb2Nrcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gc2VlIGlmIGNvbW1hbmQgYmxvY2sgaXMgYmVpbmcgZHJvcHBlZCBvbiBlbXB0eSBncmlkIGJsb2NrXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2tcclxuICAgICAgICAgICAgICAgIHx8IGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2subW91c2VEb3duID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChibG9jay54IDwgdGhpcy54ICsgdGhpcy53ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnggKyBibG9jay53ID4gdGhpcy54ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnkgPCB0aGlzLnkgKyB0aGlzLmggJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suaCArIGJsb2NrLnkgPiB0aGlzLnkpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21tYW5kVHlwZSA9PT0gQ29tbWFuZEJsb2NrVHlwZXMuRW1wdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrIGluc3RhbmNlb2YgQ29tbWFuZEJsb2NrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRUeXBlID0gYmxvY2sudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmZsb3dUeXBlID09PSBGbG93QmxvY2tUeXBlcy5FbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dUeXBlID0gYmxvY2sudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZGVjbGFyYXRpb25zL2pzb24uZC50c1wiIC8+XHJcbmltcG9ydCB7IEJhc2VCbG9jayB9IGZyb20gXCIuL0Jhc2VCbG9ja1wiO1xyXG5pbXBvcnQgeyBJR2FtZVN0YXRlIH0gZnJvbSBcIi4vSUdhbWVTdGF0ZVwiO1xyXG4vLyBpbXBvcnQgbGV2ZWwxIGZyb20gJy4uL2RhdGEvbGV2ZWxzL2xldmVsMS5qc29uJztcclxuaW1wb3J0IHsgbGV2ZWwxIH0gZnJvbSBcIi4vbGV2ZWwxXCI7XHJcbmltcG9ydCB7IExldmVsQ3JlYXRvciB9IGZyb20gXCIuL0xldmVsQ3JlYXRvclwiO1xyXG5pbXBvcnQgeyBTZXRVcEV2ZW50TGlzdGVuZXJzIH0gZnJvbSBcIi4vU2V0VXBFdmVudExpc3RlbmVyc1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2ssIEZsb3dCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0Zsb3dCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2tUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcblxyXG4vLyBUT0RPOiBhZGQgY29kZSBtYXRyaXggZm9yIHByb2dyYW1cclxuLy8gVE9ETzogcHVzaCBtb3N0IHJlY2VudGx5IGNsaWNrZWQgY29tbWFuZCAvIGZsb3cgYmxvY2sgdG8gdG9wIG9mIGJsb2NrIGFycmF5IHRvIHJlbmRlciBpdCBvbiB0b3Agb2YgZXZlcnl0aGluZyBlbHNlXHJcbi8vIFRPRE86IHN3aXRjaCBzcGFjZWJhciBjb250cm9sIGJ1dHRvbiB0byBjbGlja2FibGUgcmFkaW8gYnV0dG9uXHJcblxyXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlIHtcclxuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuICAgIHJlY3Q6IENsaWVudFJlY3QgfCBET01SZWN0O1xyXG4gICAgYmxvY2tzOiBCYXNlQmxvY2tbXTtcclxuICAgIG1vdXNlWDogbnVtYmVyO1xyXG4gICAgbW91c2VZOiBudW1iZXI7XHJcbiAgICBjb21tYW5kQ29udHJvbDogYm9vbGVhbjtcclxuICAgIGZsb3dDb250cm9sOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3Iob2JqPzogSUdhbWVTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gb2JqICYmIG9iai5jYW52YXMgfHwgPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVTY3JlZW5cIik7XHJcbiAgICAgICAgdGhpcy5jdHggPSBvYmogJiYgb2JqLmN0eCB8fCA8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPiB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5yZWN0ID0gb2JqICYmIG9iai5yZWN0IHx8IDxDbGllbnRSZWN0IHwgRE9NUmVjdD4gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBvYmogJiYgb2JqLmJsb2NrcyB8fCBbXTtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IG9iaiAmJiBvYmoubW91c2VYIHx8IDA7XHJcbiAgICAgICAgdGhpcy5tb3VzZVkgPSBvYmogJiYgb2JqLm1vdXNlWSB8fCAwO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZENvbnRyb2wgPSBvYmogJiYgb2JqLmNvbW1hbmRDb250cm9sIHx8IHRydWU7XHJcbiAgICAgICAgdGhpcy5mbG93Q29udHJvbCA9IG9iaiAmJiBvYmouZmxvd0NvbnRyb2wgfHwgZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIHNldCB1cCBnYW1lIHN0YXRlXHJcbnZhciBnYW1lU3RhdGUgPSBuZXcgR2FtZVN0YXRlKCk7XHJcbkxldmVsQ3JlYXRvcihnYW1lU3RhdGUsIGxldmVsMSwgXCJsaWdodGJsdWVcIik7XHJcblNldFVwRXZlbnRMaXN0ZW5lcnMoZ2FtZVN0YXRlKTtcclxuLy8gdGVzdCBmbG93IGJ1dHRvbnNcclxubmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIDMwMCwgNSwgNTAsIDUwLCBcInllbGxvd1wiLCBGbG93QmxvY2tUeXBlcy5VcCk7XHJcbm5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCAzMDAsIDYwLCA1MCwgNTAsIFwieWVsbG93XCIsIEZsb3dCbG9ja1R5cGVzLkRvd24pO1xyXG5uZXcgRmxvd0Jsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgMzAwLCAxMTUsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd0Jsb2NrVHlwZXMuTGVmdCk7XHJcbm5ldyBGbG93QmxvY2tCdXR0b24oZ2FtZVN0YXRlLCAzMDAsIDE3MCwgNTAsIDUwLCBcInllbGxvd1wiLCBGbG93QmxvY2tUeXBlcy5SaWdodCk7XHJcblxyXG5mdW5jdGlvbiBkcmF3KCkgOiB2b2lkIHtcclxuICAgIGdhbWVTdGF0ZS5jdHguY2xlYXJSZWN0KDAsIDAsIGdhbWVTdGF0ZS5jYW52YXMud2lkdGgsIGdhbWVTdGF0ZS5jYW52YXMuaGVpZ2h0KTtcclxuICAgIGdhbWVTdGF0ZS5jdHguYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgLy8gcmVuZGVyIGFsbCBub24tZmxvdyBibG9ja3MgZmlyc3RcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKCEoYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spKSB7XHJcbiAgICAgICAgICAgIGJsb2NrLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyByZW5kZXIgYWxsIGZsb3cgYmxvY2tzIGxhc3QgdG8gbGF5ZXIgdGhlbSBvbiB0b3Agb2YgY29tbWFuZCBibG9ja3NcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKSB7XHJcbiAgICAgICAgICAgIGJsb2NrLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lU3RhdGUuY3R4LnN0cm9rZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICBibG9jay51cGRhdGUoKTtcclxuICAgIH0pXHJcbn1cclxuXHJcbnNldEludGVydmFsKGZ1bmN0aW9uKCkgOiB2b2lkIHtcclxuICAgIHVwZGF0ZSgpO1xyXG4gICAgZHJhdygpO1xyXG59LCAxMik7IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZEJsb2NrQnV0dG9uIH0gZnJvbSBcIi4vQ29tbWFuZEJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9ja1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMZXZlbENyZWF0b3IoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGxldmVsT2JqOiBvYmplY3QsIHBhbGV0dGVDb2xvcjogc3RyaW5nKSB7XHJcbiAgICBsZXQgeU9mZnNldDogbnVtYmVyID0gNTtcclxuICAgIGxldCB4T2Zmc2V0OiBudW1iZXIgPSA1O1xyXG4gICAgbGV0IG1heFhPZmZzZXQ6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgbWF4WU9mZnNldDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvLyBzZXQgdXAgZ3JpZCBmb3IgQ29tbWFuZCBQYWxldHRlXHJcbiAgICBmb3IgKHZhciByID0gMDsgciA8IGxldmVsT2JqW1wiY29tbWFuZF9wYWxldHRlXCJdW1wiYmxvY2tfaGVpZ2h0XCJdOyByKyspIHtcclxuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGxldmVsT2JqW1wiY29tbWFuZF9wYWxldHRlXCJdW1wiYmxvY2tfd2lkdGhcIl07IGMrKykge1xyXG4gICAgICAgICAgICBuZXcgR3JpZEJsb2NrKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCByLCBjLCBwYWxldHRlQ29sb3IpO1xyXG4gICAgICAgICAgICB4T2Zmc2V0ICs9IDU1O1xyXG4gICAgICAgIH1cclxuICAgICAgICB5T2Zmc2V0ICs9IDU1O1xyXG4gICAgICAgIG1heFhPZmZzZXQgPSB4T2Zmc2V0O1xyXG4gICAgICAgIHhPZmZzZXQgPSA1O1xyXG4gICAgfVxyXG5cclxuICAgIG1heFlPZmZzZXQgPSB5T2Zmc2V0O1xyXG4gICAgeU9mZnNldCA9IG1heFlPZmZzZXQgKyAyMDtcclxuXHJcbiAgICAvLyBzZXQgdXAgQ29tbWFuZCBCbG9jayBCdXR0b25zXHJcbiAgICAvLyBDT05TSURFUjogQWNjb21tb2RhdGluZyBmb3IgY29tbWFuZCBwYWxldHRlIHdpZHRoXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxldmVsT2JqW1wiY29tbWFuZF9ibG9ja3NcIl0ubGVuZ3RoOyBpICsrKSB7XHJcbiAgICAgICAgc3dpdGNoKGxldmVsT2JqW1wiY29tbWFuZF9ibG9ja3NcIl1baV0pIHtcclxuICAgICAgICAgICAgY2FzZSBcInN0YXJ0XCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZEJsb2NrVHlwZXMuU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZEJsb2NrVHlwZXMuTW92ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImFuZ2xlXCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZEJsb2NrVHlwZXMuQW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJsYXNlclwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJncmVlblwiLCBDb21tYW5kQmxvY2tUeXBlcy5MYXNlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcInNjYW5cIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwiZGFya2JsdWVcIiwgQ29tbWFuZEJsb2NrVHlwZXMuU2Nhbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImdyYXBwbGVcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwibWFyb29uXCIsIENvbW1hbmRCbG9ja1R5cGVzLkdyYXBwbGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHhPZmZzZXQgKz0gNTU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2V0IHVwIEZsb3cgQmxvY2sgQnV0dG9uc1xyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5pbXBvcnQgeyBDb21tYW5kQmxvY2ssIENvbW1hbmRCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuaW1wb3J0IHsgRmxvd0Jsb2NrLCBGbG93QmxvY2tCdXR0b24gfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZEJsb2NrVHlwZXMsIEZsb3dCbG9ja1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTZXRVcEV2ZW50TGlzdGVuZXJzKGdhbWVTdGF0ZTogR2FtZVN0YXRlKSB7XHJcbiAgICBnYW1lU3RhdGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uKCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBDb2xsaXNpb24gZGV0ZWN0aW9uIGJldHdlZW4gY2xpY2tlZCBvZmZzZXQgYW5kIGJsb2NrLlxyXG4gICAgICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChmdW5jdGlvbihibG9jaykgOiB2b2lkIHtcclxuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5tb3VzZVkgPiBibG9jay55ICYmIGdhbWVTdGF0ZS5tb3VzZVkgPCBibG9jay55ICsgYmxvY2suaFxyXG4gICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IGJsb2NrLnggJiYgZ2FtZVN0YXRlLm1vdXNlWCA8IGJsb2NrLnggKyBibG9jay53KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2sgJiYgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2tCdXR0b24gJiYgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2sgJiYgZ2FtZVN0YXRlLmZsb3dDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2tCdXR0b24gJiYgZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2subW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgcmFkaW8gYnV0dG9uIGZvciBmbG93IG9yIGNvbW1hbmQgY29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suY29tbWFuZFR5cGUgPSBDb21tYW5kQmxvY2tUeXBlcy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLmZsb3dUeXBlID0gRmxvd0Jsb2NrVHlwZXMuRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICBnYW1lU3RhdGUuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBmdW5jdGlvbigpIDogdm9pZCB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9ja1xyXG4gICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgZ2FtZVN0YXRlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBmdW5jdGlvbihldnQ6IE1vdXNlRXZlbnQpIDogdm9pZCB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLm1vdXNlWCA9IChldnQuY2xpZW50WCAtIGdhbWVTdGF0ZS5yZWN0LmxlZnQpIC8gKGdhbWVTdGF0ZS5yZWN0LnJpZ2h0IC0gZ2FtZVN0YXRlLnJlY3QubGVmdCkgKiBnYW1lU3RhdGUuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGdhbWVTdGF0ZS5tb3VzZVkgPSAoZXZ0LmNsaWVudFkgLSBnYW1lU3RhdGUucmVjdC50b3ApIC8gKGdhbWVTdGF0ZS5yZWN0LmJvdHRvbSAtIGdhbWVTdGF0ZS5yZWN0LnRvcCkgKiBnYW1lU3RhdGUuY2FudmFzLmhlaWdodDtcclxuICAgIH0sIGZhbHNlKTtcclxuXHJcbiAgICB3aW5kb3cub25rZXl1cCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAvLyBpLmUuIFNwYWNlQmFyIHByZXNzZWRcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzMikge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuZmxvd0NvbnRyb2wgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbW1hbmQgQ29udHJvbCFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5mbG93Q29udHJvbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZsb3cgQ29udHJvbCFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGkuZS4gUyBrZXkgcHJlc3NlZFxyXG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDgzKSB7XHJcbiAgICAgICAgICAgIGxldCBwcm9ncmFtQmxvY2tzID0gMDtcclxuICAgICAgICAgICAgbGV0IHZpc2l0ZWRCbG9ja3MgPSBbXTtcclxuICAgICAgICAgICAgbGV0IHRhcmdldFJvdyA9IC0xO1xyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0Q29sID0gLTE7XHJcbiAgICAgICAgICAgIC8vIHJ1biBwcm9ncmFtXHJcbiAgICAgICAgICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBHcmlkQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmxvY2suY29tbWFuZFR5cGUgIT09IENvbW1hbmRCbG9ja1R5cGVzLkVtcHR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrLmZsb3dUeXBlICE9PSBGbG93QmxvY2tUeXBlcy5FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtQmxvY2tzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9jay5jb21tYW5kVHlwZSA9PT0gQ29tbWFuZEJsb2NrVHlwZXMuU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFJvdyA9IGJsb2NrLnI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDb2wgPSBibG9jay5jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRlZEJsb2Nrcy5wdXNoKFt0YXJnZXRSb3csIHRhcmdldENvbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuY29uc29sZS5sb2coXCJyb3c6IFwiICsgYmxvY2sucik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuY29uc29sZS5sb2coXCJjb2x1bW46IFwiICsgYmxvY2suYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuY29uc29sZS5sb2coXCJmbG93OiBcIiArIGJsb2NrLmZsb3dUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcy5jb25zb2xlLmxvZyhcImNvbW1hbmQ6IFwiICsgYmxvY2suY29tbWFuZFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2dyYW1CbG9ja3M7IGkgKyspIHtcclxuICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibG9jay5jb21tYW5kVHlwZSAhPT0gQ29tbWFuZEJsb2NrVHlwZXMuRW1wdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrLmZsb3dUeXBlICE9PSBGbG93QmxvY2tUeXBlcy5FbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrLnIgPT09IHRhcmdldFJvdyAmJiBibG9jay5jID09PSB0YXJnZXRDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhDb21tYW5kQmxvY2tUeXBlc1tibG9jay5jb21tYW5kVHlwZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChibG9jay5mbG93VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dCbG9ja1R5cGVzLlVwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Um93LS07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHZpc2l0ZWRCbG9ja3MuZmlsdGVyKGJsb2NrID0+IGJsb2NrID09PSBbdGFyZ2V0Um93LCB0YXJnZXRDb2xdKS5sZW5ndGggPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyYW1CbG9ja3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2l0ZWRCbG9ja3MucHVzaChbdGFyZ2V0Um93LCB0YXJnZXRDb2xdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEZsb3dCbG9ja1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSb3crKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmlzaXRlZEJsb2Nrcy5maWx0ZXIoYmxvY2sgPT4gYmxvY2sgPT09IFt0YXJnZXRSb3csIHRhcmdldENvbF0pLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbUJsb2NrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRlZEJsb2Nrcy5wdXNoKFt0YXJnZXRSb3csIHRhcmdldENvbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0Jsb2NrVHlwZXMuUmlnaHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRDb2wrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodmlzaXRlZEJsb2Nrcy5maWx0ZXIoYmxvY2sgPT4gYmxvY2sgPT09IFt0YXJnZXRSb3csIHRhcmdldENvbF0pLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3JhbUJsb2NrcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaXRlZEJsb2Nrcy5wdXNoKFt0YXJnZXRSb3csIHRhcmdldENvbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRmxvd0Jsb2NrVHlwZXMuTGVmdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENvbC0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2aXNpdGVkQmxvY2tzLmZpbHRlcihibG9jayA9PiBibG9jayA9PT0gW3RhcmdldFJvdywgdGFyZ2V0Q29sXSkubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmFtQmxvY2tzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpdGVkQmxvY2tzLnB1c2goW3RhcmdldFJvdywgdGFyZ2V0Q29sXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=