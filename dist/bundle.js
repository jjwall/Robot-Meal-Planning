!function(t){var e={};function n(o){if(e[o])return e[o].exports;var a=e[o]={i:o,l:!1,exports:{}};return t[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(o,a,function(e){return t[e]}.bind(null,a));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],flow_blocks:["up","down","left","right"]}},function(t,e,n){"use strict";n.r(e);var o,a,s=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.sliders=t&&t.sliders||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),i=n(0),r=function(){function t(t,e,n,o,a,s){this.GameState=t,this.X=e,this.Y=n,this.H=o,this.W=a,this.Color=s,this.gameState=t,this.x=e,this.y=n,this.h=o,this.w=a,this.color=s}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(o||(o={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(a||(a={}));var c=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(t){function e(e,n,a,s,i,r,c,l,h){var u=t.call(this,e,n,a,s,i,l)||this;switch(u.units=r,u.callCount=c,u.totalUnits=u.units*u.callCount,u.mouseDown=!0,u.set=!1,u.type=h,u.image=new Image,h){case o.Start:u.image.src="data/textures/StartBlock.png";break;case o.Move:u.image.src="data/textures/MoveBlock.png";break;case o.Angle:u.image.src="data/textures/AngleBlock.png";break;case o.Thread:u.image.src="data/textures/ThreadBlock.png"}return u.gameState.blocks.push(u),u}return c(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),h=function(t){function e(e,n,a,s,i,r,c){var l=t.call(this,e,n,a,s,i,r)||this;switch(l.mouseDown=!1,l.type=c,l.image=new Image,l.units=0,l.callCount=0,l.totalUnits=0,c){case o.Start:l.image.src="data/textures/StartBlock.png";break;case o.Move:l.image.src="data/textures/MoveBlock.png";break;case o.Angle:l.image.src="data/textures/AngleBlock.png";break;case o.Thread:l.image.src="data/textures/ThreadBlock.png"}return l.gameState.blocks.push(l),l}return c(e,t),e.prototype.update=function(){var t=this;this.gameState.sliders.forEach(function(e){e.type===t.type&&(t.callCount=Math.round(e.value*e.maxUnits/e.baseUnits),t.units=e.baseUnits,t.totalUnits=t.units*t.callCount)}),this.mouseDown&&(this.mouseDown=!1,new l(this.gameState,this.x,this.y,this.h,this.w,this.units,this.callCount,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),u=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),m=function(t){function e(e,n,o,s,i,r,c){var l=t.call(this,e,n,o,s,i,r)||this;switch(l.gameState=e,l.type=c,l.mouseDown=!0,l.set=!1,l.image=new Image,c){case a.Up:l.image.src="data/textures/UpArrow.png";break;case a.Down:l.image.src="data/textures/DownArrow.png";break;case a.Left:l.image.src="data/textures/LeftArrow.png";break;case a.Right:l.image.src="data/textures/RightArrow.png"}return l.gameState.blocks.push(l),l}return u(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),f=function(t){function e(e,n,o,s,i,r,c){var l=t.call(this,e,n,o,s,i,r)||this;switch(l.type=c,l.mouseDown=!1,l.image=new Image,c){case a.Up:l.image.src="data/textures/UpArrow.png";break;case a.Down:l.image.src="data/textures/DownArrow.png";break;case a.Left:l.image.src="data/textures/LeftArrow.png";break;case a.Right:l.image.src="data/textures/RightArrow.png"}return l.gameState.blocks.push(l),l}return u(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new m(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),p=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),g=function(t){function e(e,n,s,i,r,c,l,h){var u=t.call(this,e,n,s,i,r,h)||this;return u.r=c,u.c=l,u.commandType=o.Empty,u.flowType=a.Empty,u.gameState.blocks.push(u),u}return p(e,t),e.prototype.update=function(){var t=this;this.gameState.blocks.forEach(function(e){(e instanceof l||e instanceof m)&&!1===e.mouseDown&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.commandType===o.Empty&&e instanceof l?(e.x=t.x,e.y=t.y,e.set=!0,t.commandType=e.type,t.units=e.units,t.callCount=e.callCount,t.currentCallCount=e.callCount):t.flowType===a.Empty&&e instanceof m&&(e.x=t.x,e.y=t.y,e.set=!0,t.flowType=e.type))})},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r);function d(t,e){var n,s;switch(e.currentCallCount=e.callCount,e.flowType){case a.Up:n=e.r-1,s=e.c;break;case a.Down:n=e.r+1,s=e.c;break;case a.Right:s=e.c+1,n=e.r;break;case a.Left:s=e.c-1,n=e.r}t.blocks.forEach(function(e){if(e instanceof g&&e.r===n&&e.c===s&&e.commandType!==o.Empty&&e.flowType!==a.Empty)switch(e.commandType){case o.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):d(t,e)}(t,e)},t.nextStack.push(e);break;case o.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):d(t,e)}(t,e)},t.nextStack.push(e);break;case o.Start:e.call=function(){return function(t,e){console.log("start"),d(t,e)}(t,e)},t.nextStack.push(e)}})}var w=function(){function t(t,e,n,o,a,s){void 0===s&&(s=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=o,this.snapAmount=s,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=a,this.barH=75,this.barW=10,this.barX=e,this.barY=n,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=n+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),y=new s;!function(t,e,n){for(var s=5,i=5,r=0,c=0;c<e.command_palette.block_height;c++){for(var l=0;l<e.command_palette.block_width;l++)new g(t,i,s,50,50,c,l,n),i+=55;s+=55,r=i,i=5}s+=20;for(var u=0;u<e.command_blocks.length;u++){switch(e.command_blocks[u]){case"start":new h(t,i,s,50,50,"thistle",o.Start);break;case"move":new h(t,i,s,50,50,"thistle",o.Move);break;case"angle":new h(t,i,s,50,50,"thistle",o.Angle);break;case"thread":new h(t,i,s,50,50,"thistle",o.Thread);break;case"laser":new h(t,i,s,50,50,"green",o.Laser);break;case"scan":new h(t,i,s,50,50,"darkblue",o.Scan);break;case"grapple":new h(t,i,s,50,50,"maroon",o.Grapple)}i+=55}for(i=r+20,s=5,u=0;u<e.flow_blocks.length;u++){switch(e.flow_blocks[u]){case"up":new f(t,i,s,50,50,"yellow",a.Up);break;case"left":new f(t,i,s,50,50,"yellow",a.Left);break;case"right":new f(t,i,s,50,50,"yellow",a.Right);break;case"down":new f(t,i,s,50,50,"yellow",a.Down)}s+=55}}(y,i,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof l&&t.commandControl||e instanceof h&&t.commandControl||e instanceof m&&t.flowControl||e instanceof f&&t.flowControl?e.mouseDown=!0:e instanceof g&&(t.commandControl?e.commandType=o.Empty:t.flowControl&&(e.flowType=a.Empty)))}),t.sliders.forEach(function(e){t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0)})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof l||t instanceof m)&&t.mouseDown&&(t.mouseDown=!1)}),t.sliders.forEach(function(t){t.mouseDown=!1})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning||(t.programRunning=!0,function(t,e){t.blocks.forEach(function(e){e instanceof g&&e.commandType===o.Start&&e.flowType!==a.Empty&&d(t,e)})}(t)))}}(y),y.sliders.push(new w(y,80,365,100,o.Move)),y.sliders.push(new w(y,130,365,360,o.Angle,8)),setInterval(function(){y.blocks.forEach(function(t){t.update()}),y.sliders.forEach(function(t){t.update()}),y.ctx.clearRect(0,0,y.canvas.width,y.canvas.height),y.ctx.beginPath(),y.sliders.forEach(function(t){t.draw()}),y.blocks.forEach(function(t){t instanceof m||t.draw()}),y.blocks.forEach(function(t){t instanceof m&&t.draw()}),y.ctx.stroke();var t=y.nextStack;y.nextStack=[],t.length>0?t.forEach(function(t){t.currentCallCount>0?(t.call(),y.nextStack.push(t)):t.call()}):y.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWVTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRW51bXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Jhc2VCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tbWFuZEJsb2NrLnRzIiwid2VicGFjazovLy8uL3NyYy9GbG93QmxvY2sudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dyaWRCbG9jay50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUHJvZ3JhbUV4ZWN1dGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy8uL3NyYy9HZW5lcmF0ZUxldmVsLnRzIiwid2VicGFjazovLy8uL3NyYy9TZXRVcEV2ZW50TGlzdGVuZXJzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ29tbWFuZFR5cGVzIiwiRmxvd1R5cGVzIiwiR2FtZVN0YXRlX0dhbWVTdGF0ZSIsIm9iaiIsInRoaXMiLCJjYW52YXMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY3R4IiwiZ2V0Q29udGV4dCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJibG9ja3MiLCJzbGlkZXJzIiwibW91c2VYIiwibW91c2VZIiwiY29tbWFuZENvbnRyb2wiLCJmbG93Q29udHJvbCIsIm5leHRTdGFjayIsInByb2dyYW1SdW5uaW5nIiwiQmFzZUJsb2NrIiwiR2FtZVN0YXRlIiwiWCIsIlkiLCJIIiwiVyIsIkNvbG9yIiwiZ2FtZVN0YXRlIiwieCIsInkiLCJoIiwidyIsImNvbG9yIiwiZHJhdyIsInVwZGF0ZSIsIkNvbW1hbmRCbG9ja19Db21tYW5kQmxvY2siLCJfc3VwZXIiLCJDb21tYW5kQmxvY2siLCJVbml0cyIsIkNhbGxDb3VudCIsIlR5cGUiLCJfdGhpcyIsInVuaXRzIiwiY2FsbENvdW50IiwidG90YWxVbml0cyIsIm1vdXNlRG93biIsInNldCIsInR5cGUiLCJpbWFnZSIsIkltYWdlIiwiU3RhcnQiLCJzcmMiLCJNb3ZlIiwiQW5nbGUiLCJUaHJlYWQiLCJwdXNoIiwiX19leHRlbmRzIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJ0cmFuc2xhdGUiLCJkcmF3SW1hZ2UiLCJmb250Iiwib2Zmc2V0WCIsImZpbGxUZXh0IiwidG9TdHJpbmciLCJDb21tYW5kQmxvY2tfQ29tbWFuZEJsb2NrQnV0dG9uIiwiQ29tbWFuZEJsb2NrQnV0dG9uIiwiZm9yRWFjaCIsInNsaWRlciIsIk1hdGgiLCJyb3VuZCIsIm1heFVuaXRzIiwiYmFzZVVuaXRzIiwiRmxvd0Jsb2NrX0Zsb3dCbG9jayIsIkZsb3dCbG9jayIsIlVwIiwiRG93biIsIkxlZnQiLCJSaWdodCIsIkZsb3dCbG9ja19leHRlbmRzIiwic3Ryb2tlU3R5bGUiLCJGbG93QmxvY2tfRmxvd0Jsb2NrQnV0dG9uIiwiRmxvd0Jsb2NrQnV0dG9uIiwiR3JpZEJsb2NrX0dyaWRCbG9jayIsIkdyaWRCbG9jayIsIlJvdyIsIkNvbHVtbiIsImNvbW1hbmRUeXBlIiwiRW1wdHkiLCJmbG93VHlwZSIsIkdyaWRCbG9ja19leHRlbmRzIiwiYmxvY2siLCJjdXJyZW50Q2FsbENvdW50IiwiZmluZE5leHRDYWxsIiwicHJldkJsb2NrIiwidGFyZ2V0Um93IiwidGFyZ2V0Q29sIiwiY29uc29sZSIsImxvZyIsImFuZ2xlQ2FsbCIsIm1vdmVDYWxsIiwic3RhcnRDYWxsIiwiU2xpZGVyIiwiTWF4VW5pdHMiLCJTbmFwQW1vdW50Iiwic25hcEFtb3VudCIsImJhckgiLCJiYXJXIiwiYmFyWCIsImJhclkiLCJiYXJDb2xvciIsInNsaWRlckgiLCJzbGlkZXJXIiwic2xpZGVyWCIsInNsaWRlclkiLCJzbGlkZXJDb2xvciIsInBlcmNlbnRhZ2UiLCJ0ZW1wU2xpZGVyWSIsIm1haW5fZ2FtZVN0YXRlIiwibGV2ZWxPYmoiLCJwYWxldHRlQ29sb3IiLCJ5T2Zmc2V0IiwieE9mZnNldCIsIm1heFhPZmZzZXQiLCJsZW5ndGgiLCJMYXNlciIsIlNjYW4iLCJHcmFwcGxlIiwiR2VuZXJhdGVMZXZlbCIsImxldmVsMSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJjbGllbnRYIiwibGVmdCIsInJpZ2h0Iiwid2lkdGgiLCJjbGllbnRZIiwidG9wIiwiYm90dG9tIiwiaGVpZ2h0Iiwid2luZG93Iiwib25rZXl1cCIsImUiLCJrZXlDb2RlIiwidGhyZWFkIiwic3RhcnROZXdUaHJlYWRDYWxsIiwiU2V0VXBFdmVudExpc3RlbmVycyIsInNldEludGVydmFsIiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwic3Ryb2tlIiwiY2FsbFN0YWNrIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVB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aENLLEVBQWFyRSxFQUFXbUUsS0kwQ3hCc0QsQ0FBbUJ6SCxNRjFEbkMwSCxDQUFvQjVCLEdBR3BCQSxFQUFVNUcsUUFBUTBDLEtBQUssSUFBSWtELEVBQU9nQixFQUFXLEdBQUksSUFBSyxJQUFLekgsRUFBYW9ELE9BQ3hFcUUsRUFBVTVHLFFBQVEwQyxLQUFLLElBQUlrRCxFQUFPZ0IsRUFBVyxJQUFLLElBQUssSUFBS3pILEVBQWFxRCxNQUFPLElBc0NoRmlHLFlBQVksV0FUUjdCLEVBQVU3RyxPQUFPMEQsUUFBUSxTQUFBd0IsR0FDckJBLEVBQU01RCxXQUdWdUYsRUFBVTVHLFFBQVF5RCxRQUFRLFNBQUFDLEdBQ3RCQSxFQUFPckMsV0EvQlh1RixFQUFVakgsSUFBSStJLFVBQVUsRUFBRyxFQUFHOUIsRUFBVXBILE9BQU9xSSxNQUFPakIsRUFBVXBILE9BQU95SSxRQUN2RXJCLEVBQVVqSCxJQUFJZ0osWUFHZC9CLEVBQVU1RyxRQUFReUQsUUFBUSxTQUFBQyxHQUN0QkEsRUFBT3RDLFNBSVh3RixFQUFVN0csT0FBTzBELFFBQVEsU0FBQXdCLEdBQ2ZBLGFBQWlCbEIsR0FDbkJrQixFQUFNN0QsU0FLZHdGLEVBQVU3RyxPQUFPMEQsUUFBUSxTQUFBd0IsR0FDakJBLGFBQWlCbEIsR0FDakJrQixFQUFNN0QsU0FJZHdGLEVBQVVqSCxJQUFJaUosU0FpQmQsSUFBTUMsRUFBWWpDLEVBQVV2RyxVQUM1QnVHLEVBQVV2RyxhQUVOd0ksRUFBVTNCLE9BQVMsRUFDbkIyQixFQUFVcEYsUUFBUSxTQUFBd0IsR0FFVkEsRUFBTUMsaUJBQW1CLEdBQ3pCRCxFQUFNM0gsT0FDTnNKLEVBQVV2RyxVQUFVcUMsS0FBS3VDLElBSXpCQSxFQUFNM0gsU0FLZHNKLEVBQVV0RyxnQkFBaUIsR0FFaEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IEdyaWRCbG9jayB9IGZyb20gXCIuL0dyaWRCbG9ja1wiO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiLi9TbGlkZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lU3RhdGUge1xyXG4gICAgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHJlYWRvbmx5IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgcmVhZG9ubHkgcmVjdDogQ2xpZW50UmVjdCB8IERPTVJlY3Q7XHJcbiAgICBwdWJsaWMgYmxvY2tzOiBCYXNlQmxvY2tbXTtcclxuICAgIHB1YmxpYyBzbGlkZXJzOiBTbGlkZXJbXTtcclxuICAgIHB1YmxpYyBtb3VzZVg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBtb3VzZVk6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjb21tYW5kQ29udHJvbDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBmbG93Q29udHJvbDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBuZXh0U3RhY2s6IEdyaWRCbG9ja1tdO1xyXG4gICAgcHVibGljIHByb2dyYW1SdW5uaW5nOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3Iob2JqPzogSUdhbWVTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gb2JqICYmIG9iai5jYW52YXMgfHwgPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVTY3JlZW5cIik7XHJcbiAgICAgICAgdGhpcy5jdHggPSBvYmogJiYgb2JqLmN0eCB8fCA8Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEPiB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5yZWN0ID0gb2JqICYmIG9iai5yZWN0IHx8IDxDbGllbnRSZWN0IHwgRE9NUmVjdD4gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdGhpcy5ibG9ja3MgPSBvYmogJiYgb2JqLmJsb2NrcyB8fCBbXTtcclxuICAgICAgICB0aGlzLnNsaWRlcnMgPSBvYmogJiYgb2JqLnNsaWRlcnMgfHwgW107XHJcbiAgICAgICAgdGhpcy5tb3VzZVggPSBvYmogJiYgb2JqLm1vdXNlWCB8fCAwO1xyXG4gICAgICAgIHRoaXMubW91c2VZID0gb2JqICYmIG9iai5tb3VzZVkgfHwgMDtcclxuICAgICAgICB0aGlzLmNvbW1hbmRDb250cm9sID0gb2JqICYmIG9iai5jb21tYW5kQ29udHJvbCB8fCB0cnVlO1xyXG4gICAgICAgIHRoaXMuZmxvd0NvbnRyb2wgPSBvYmogJiYgb2JqLmZsb3dDb250cm9sIHx8IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubmV4dFN0YWNrID0gb2JqICYmIG9iai5uZXh0U3RhY2sgfHwgW107XHJcbiAgICAgICAgdGhpcy5wcm9ncmFtUnVubmluZyA9IG9iaiAmJiBvYmoucHJvZ3JhbVJ1bm5pbmcgfHwgZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdhbWVTdGF0ZSB7XHJcbiAgICByZWFkb25seSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcmVhZG9ubHkgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcbiAgICByZWFkb25seSByZWN0OiBDbGllbnRSZWN0IHwgRE9NUmVjdDtcclxuICAgIGJsb2NrczogQmFzZUJsb2NrW107XHJcbiAgICBzbGlkZXJzOiBTbGlkZXJbXTtcclxuICAgIG1vdXNlWDogbnVtYmVyO1xyXG4gICAgbW91c2VZOiBudW1iZXI7XHJcbiAgICBjb21tYW5kQ29udHJvbDogYm9vbGVhbjtcclxuICAgIGZsb3dDb250cm9sOiBib29sZWFuO1xyXG4gICAgbmV4dFN0YWNrOiBhbnlbXTtcclxuICAgIHByb2dyYW1SdW5uaW5nOiBib29sZWFuO1xyXG59IiwiZXhwb3J0IGVudW0gQ29tbWFuZFR5cGVzIHtcclxuICAgIEVtcHR5LFxyXG4gICAgU3RhcnQsXHJcbiAgICBNb3ZlLFxyXG4gICAgQW5nbGUsXHJcbiAgICBUaHJlYWQsXHJcbiAgICBTY2FuLFxyXG4gICAgTGFzZXIsXHJcbiAgICBHcmFwcGxlXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEZsb3dUeXBlcyB7XHJcbiAgICBFbXB0eSxcclxuICAgIFVwLFxyXG4gICAgRG93bixcclxuICAgIExlZnQsXHJcbiAgICBSaWdodCxcclxuICAgIENvbmRpdGlvbmFsTGVmdFJpZ2h0LFxyXG4gICAgQ29uZGl0aW9uYWxMZWZ0VXAsXHJcbiAgICBDb25kaXRpb25hbExlZnREb3duLFxyXG4gICAgQ29uZGl0aW9uYWxVcFJpZ2h0LFxyXG4gICAgQ29uZGl0aW9uYWxVcERvd24sXHJcbiAgICBDb25kaXRpb25hbERvd25SaWdodFxyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUJsb2NrIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBHYW1lU3RhdGU6IEdhbWVTdGF0ZSxcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBYOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgWTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgcHVibGljIEg6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHB1YmxpYyBXOiBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBwdWJsaWMgQ29sb3I6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlID0gR2FtZVN0YXRlO1xyXG4gICAgICAgIHRoaXMueCA9IFg7XHJcbiAgICAgICAgdGhpcy55ID0gWTtcclxuICAgICAgICB0aGlzLmggPSBIO1xyXG4gICAgICAgIHRoaXMudyA9IFc7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IENvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoKTogdm9pZCB7fSBcclxuICAgIHVwZGF0ZSgpOiB2b2lkIHt9XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcyB9IGZyb20gXCIuL0VudW1zXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbWFuZEJsb2NrIGV4dGVuZHMgQmFzZUJsb2NrIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgaDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdW5pdHM6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNhbGxDb3VudDogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgdG90YWxVbml0czogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgY29sb3I6IHN0cmluZztcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgc2V0OiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogQ29tbWFuZFR5cGVzO1xyXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBVbml0czogbnVtYmVyLCBDYWxsQ291bnQ6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogQ29tbWFuZFR5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy51bml0cyA9IFVuaXRzO1xyXG4gICAgICAgIHRoaXMuY2FsbENvdW50ID0gQ2FsbENvdW50O1xyXG4gICAgICAgIHRoaXMudG90YWxVbml0cyA9IHRoaXMudW5pdHMgKiB0aGlzLmNhbGxDb3VudDtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBzd2l0Y2goVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5TdGFydDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1N0YXJ0QmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuTW92ZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL01vdmVCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5BbmdsZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0FuZ2xlQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tYW5kVHlwZXMuVGhyZWFkOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvVGhyZWFkQmxvY2sucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhZyBjb21tYW5kIGJsb2NrXHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWCAtIHRoaXMudy8yO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgLSB0aGlzLmgvMjtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlbGV0ZSBpZiBkcm9wcGluZyBibG9jayBhbmQgaXQgZG9lc24ndCBoYXZlIGEgZW1wdHkgZ3JpZCBibG9jayB0byBiZSBzZXQgb25cclxuICAgICAgICBpZiAoIXRoaXMubW91c2VEb3duICYmICF0aGlzLnNldCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZm9udCA9IFwiMTVweCBBcmlhbFwiO1xyXG4gICAgICAgIGxldCBvZmZzZXRYID0gMzA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsVW5pdHMgPiA5OSkge1xyXG4gICAgICAgICAgICBvZmZzZXRYID0gMjU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudG90YWxVbml0cyA8IDEwKSB7XHJcbiAgICAgICAgICAgIG9mZnNldFggPSAzNTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsVGV4dCgodGhpcy50b3RhbFVuaXRzKS50b1N0cmluZygpLCB0aGlzLnggKyBvZmZzZXRYLCB0aGlzLnkgKyA0OCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gb25DbGljaygpIHtcclxuICAgIC8vIH1cclxufVxyXG5cclxuLy8gQ09OU0lERVI6IGV4dGVuZGluZyBDb21tYW5kQmxvY2sgY2xhc3NcclxuZXhwb3J0IGNsYXNzIENvbW1hbmRCbG9ja0J1dHRvbiBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB1bml0czogbnVtYmVyO1xyXG4gICAgcHVibGljIGNhbGxDb3VudDogbnVtYmVyO1xyXG4gICAgcHVibGljIHRvdGFsVW5pdHM6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogQ29tbWFuZFR5cGVzO1xyXG4gICAgcmVhZG9ubHkgaW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBDb2xvcjogc3RyaW5nLCBUeXBlOiBDb21tYW5kVHlwZXMpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IFR5cGU7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMudW5pdHMgPSAwO1xyXG4gICAgICAgIHRoaXMuY2FsbENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnRvdGFsVW5pdHMgPSAwO1xyXG4gICAgICAgIHN3aXRjaChUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvU3RhcnRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTW92ZUJsb2NrLnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLkFuZ2xlOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvQW5nbGVCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5UaHJlYWQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9UaHJlYWRCbG9jay5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5zbGlkZXJzLmZvckVhY2goc2xpZGVyID0+IHtcclxuICAgICAgICAgICAgaWYgKHNsaWRlci50eXBlID09PSB0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbENvdW50ID0gTWF0aC5yb3VuZCgoc2xpZGVyLnZhbHVlICogc2xpZGVyLm1heFVuaXRzKS9zbGlkZXIuYmFzZVVuaXRzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5pdHMgPSBzbGlkZXIuYmFzZVVuaXRzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFVuaXRzID0gdGhpcy51bml0cyAqIHRoaXMuY2FsbENvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrKHRoaXMuZ2FtZVN0YXRlLCB0aGlzLngsIHRoaXMueSwgdGhpcy5oLCB0aGlzLncsIHRoaXMudW5pdHMsIHRoaXMuY2FsbENvdW50LCB0aGlzLkNvbG9yLCB0aGlzLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxSZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLncsIHRoaXMuaCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKC10aGlzLngsIC10aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZvbnQgPSBcIjE1cHggQXJpYWxcIjtcclxuICAgICAgICBsZXQgb2Zmc2V0WCA9IDMwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50b3RhbFVuaXRzID4gOTkpIHtcclxuICAgICAgICAgICAgb2Zmc2V0WCA9IDI1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy50b3RhbFVuaXRzIDwgMTApIHtcclxuICAgICAgICAgICAgb2Zmc2V0WCA9IDM1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LmZpbGxUZXh0KCh0aGlzLnRvdGFsVW5pdHMpLnRvU3RyaW5nKCksIHRoaXMueCArIG9mZnNldFgsIHRoaXMueSArIDQ4KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBpc0NvbW1hbmRCbG9jayhvYmo6IG9iamVjdCkgOiBvYmogaXMgQ29tbWFuZEJsb2NrIHtcclxuLy8gICAgIHZhciBjb21tYW5kQmxvY2tPYmogOiBDb21tYW5kQmxvY2sgPSA8Q29tbWFuZEJsb2NrPm9iajtcclxuICAgIFxyXG4vLyAgICAgcmV0dXJuIGNvbW1hbmRCbG9ja09iai5tb3VzZURvd24gIT09IHVuZGVmaW5lZDtcclxuLy8gfSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBCYXNlQmxvY2sgfSBmcm9tIFwiLi9CYXNlQmxvY2tcIjtcclxuaW1wb3J0IHsgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG93QmxvY2sgZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcmVhZG9ubHkgdHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbW91c2VEb3duOiBib29sZWFuO1xyXG4gICAgcHVibGljIHNldDogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogRmxvd1R5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUgPSBHYW1lU3RhdGU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgc3dpdGNoKFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuVXA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9VcEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLkRvd246XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IFwiZGF0YS90ZXh0dXJlcy9Eb3duQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuTGVmdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0xlZnRBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5SaWdodDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1JpZ2h0QXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhZyBmbG93IGJsb2NrXHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWCAtIHRoaXMudy8yO1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgLSB0aGlzLmgvMjtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlbGV0ZSBpZiBkcm9wcGluZyBibG9jayBhbmQgaXQgZG9lc24ndCBoYXZlIGEgZW1wdHkgZ3JpZCBibG9jayB0byBiZSBzZXQgb25cclxuICAgICAgICBpZiAoIXRoaXMubW91c2VEb3duICYmICF0aGlzLnNldCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgudHJhbnNsYXRlKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDApO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUoLXRoaXMueCwgLXRoaXMueSk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHgucmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy53LCB0aGlzLmgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBDT05TSURFUjogRXh0ZW5kaW5nIEZsb3dCbG9jayBoZXJlXHJcbmV4cG9ydCBjbGFzcyBGbG93QmxvY2tCdXR0b24gZXh0ZW5kcyBCYXNlQmxvY2sge1xyXG4gICAgcHJvdGVjdGVkIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gICAgcHVibGljIHg6IG51bWJlcjtcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7XHJcbiAgICByZWFkb25seSB3OiBudW1iZXI7XHJcbiAgICByZWFkb25seSBoOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xyXG4gICAgcHVibGljIG1vdXNlRG93bjogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5IHR5cGU6IEZsb3dUeXBlcztcclxuICAgIHJlYWRvbmx5IGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoR2FtZVN0YXRlOiBHYW1lU3RhdGUsIFg6IG51bWJlciwgWTogbnVtYmVyLCBIOiBudW1iZXIsIFc6IG51bWJlciwgQ29sb3I6IHN0cmluZywgVHlwZTogRmxvd1R5cGVzKSB7XHJcbiAgICAgICAgc3VwZXIoR2FtZVN0YXRlLCBYLCBZLCBILCBXLCBDb2xvcik7XHJcbiAgICAgICAgdGhpcy50eXBlID0gVHlwZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICBzd2l0Y2goVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5VcDpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL1VwQXJyb3cucG5nXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBGbG93VHlwZXMuRG93bjpcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gXCJkYXRhL3RleHR1cmVzL0Rvd25BcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZsb3dUeXBlcy5MZWZ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvTGVmdEFycm93LnBuZ1wiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRmxvd1R5cGVzLlJpZ2h0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBcImRhdGEvdGV4dHVyZXMvUmlnaHRBcnJvdy5wbmdcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuYmxvY2tzLnB1c2godGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIDogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG5ldyBGbG93QmxvY2sodGhpcy5nYW1lU3RhdGUsIHRoaXMueCwgdGhpcy55LCB0aGlzLmgsIHRoaXMudywgdGhpcy5Db2xvciwgdGhpcy50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRyYXcoKSA6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC50cmFuc2xhdGUodGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3R4LnRyYW5zbGF0ZSgtdGhpcy54LCAtdGhpcy55KTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN0eC5yZWN0KHRoaXMueCwgdGhpcy55LCB0aGlzLncsIHRoaXMuaCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQmFzZUJsb2NrIH0gZnJvbSBcIi4vQmFzZUJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9jayB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2sgfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdyaWRCbG9jayBleHRlbmRzIEJhc2VCbG9jayB7XHJcbiAgICBwcm90ZWN0ZWQgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyO1xyXG4gICAgcHVibGljIHk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHc6IG51bWJlcjtcclxuICAgIHB1YmxpYyByOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYzogbnVtYmVyO1xyXG4gICAgcHVibGljIHVuaXRzOiBudW1iZXI7IC8vIHB1YmxpYz9cclxuICAgIHB1YmxpYyBjYWxsQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBjdXJyZW50Q2FsbENvdW50OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgY29tbWFuZFR5cGU6IENvbW1hbmRUeXBlcztcclxuICAgIHB1YmxpYyBmbG93VHlwZTogRmxvd1R5cGVzO1xyXG4gICAgcHVibGljIGNhbGw6IGFueTsgLy8gY2hhbmdlIHR5cGUgaGVyZSB0byBnZW5lcmljIG1ldGhvZCBzaWduYXR1cmVcclxuICAgIHJlYWRvbmx5IGNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWDogbnVtYmVyLCBZOiBudW1iZXIsIEg6IG51bWJlciwgVzogbnVtYmVyLCBSb3c6IG51bWJlciwgQ29sdW1uOiBudW1iZXIsIENvbG9yOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihHYW1lU3RhdGUsIFgsIFksIEgsIFcsIENvbG9yKTtcclxuICAgICAgICB0aGlzLnIgPSBSb3c7XHJcbiAgICAgICAgdGhpcy5jID0gQ29sdW1uO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZFR5cGUgPSBDb21tYW5kVHlwZXMuRW1wdHk7XHJcbiAgICAgICAgdGhpcy5mbG93VHlwZSA9IEZsb3dUeXBlcy5FbXB0eTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MucHVzaCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgICAgICAvLyBzZWUgaWYgY29tbWFuZCBibG9jayBpcyBiZWluZyBkcm9wcGVkIG9uIGVtcHR5IGdyaWQgYmxvY2tcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9ja1xyXG4gICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay5tb3VzZURvd24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrLnggPCB0aGlzLnggKyB0aGlzLncgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueCArIGJsb2NrLncgPiB0aGlzLnggJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA8IHRoaXMueSArIHRoaXMuaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5oICsgYmxvY2sueSA+IHRoaXMueSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbW1hbmRUeXBlID09PSBDb21tYW5kVHlwZXMuRW1wdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrIGluc3RhbmNlb2YgQ29tbWFuZEJsb2NrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRUeXBlID0gYmxvY2sudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5pdHMgPSBibG9jay51bml0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbENvdW50ID0gYmxvY2suY2FsbENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2FsbENvdW50ID0gYmxvY2suY2FsbENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZmxvd1R5cGUgPT09IEZsb3dUeXBlcy5FbXB0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay54ID0gdGhpcy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sueSA9IHRoaXMueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dUeXBlID0gYmxvY2sudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBjb25kaXRpb25hbCBwcm9wZXJ0aWVzIGhlcmUgaWYgY29uZGl0aW9uYWwgYmxvY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3KCkgOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMudywgdGhpcy5oKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBHcmlkQmxvY2sgfSBmcm9tIFwiLi9HcmlkQmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuZnVuY3Rpb24gbW92ZUNhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibW92ZVwiKTtcclxuICAgICAgICBibG9jay5jdXJyZW50Q2FsbENvdW50LS07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFuZ2xlQ2FsbChnYW1lU3RhdGU6IEdhbWVTdGF0ZSwgYmxvY2s6IEdyaWRCbG9jaykge1xyXG4gICAgaWYgKGJsb2NrLmN1cnJlbnRDYWxsQ291bnQgPiAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJhbmdsZVwiKTtcclxuICAgICAgICBibG9jay5jdXJyZW50Q2FsbENvdW50LS07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIHdpbGwgb25seSBoYXZlIGZpbmROZXh0RXhlY3V0aW9uIGJpdFxyXG4vLyB3b24ndCBkbyBhbnl0aGluZyBleGNlcHQgY29udGludWUgZXhlY3V0aW9uIGlmIHBsYXllcnMgdXNlIGl0IGxpa2UgYSBub3JtYWwgY29tbWFuZCBibG9ja1xyXG5mdW5jdGlvbiBzdGFydENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGJsb2NrOiBHcmlkQmxvY2spIHtcclxuICAgIGNvbnNvbGUubG9nKFwic3RhcnRcIik7XHJcbiAgICBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydE5ld1RocmVhZENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIHRocmVhZDogbnVtYmVyKSB7XHJcbiAgICAvLyBsb2NhdGUgdGhyZWFkXHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEdyaWRCbG9jaykge1xyXG4gICAgICAgICAgICBpZiAoYmxvY2suY29tbWFuZFR5cGUgPT09IENvbW1hbmRUeXBlcy5TdGFydCAvLyYmIHRocmVhZE51bWJlciA9PT0gdGhyZWFkXHJcbiAgICAgICAgICAgICAgICAmJiBibG9jay5mbG93VHlwZSAhPT0gRmxvd1R5cGVzLkVtcHR5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBzdGFydCB0aHJlYWRcclxuICAgICAgICAgICAgICAgIGZpbmROZXh0Q2FsbChnYW1lU3RhdGUsIGJsb2NrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kTmV4dENhbGwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIHByZXZCbG9jazogR3JpZEJsb2NrKSA6IHZvaWQge1xyXG4gICAgbGV0IHRhcmdldFJvdzogbnVtYmVyO1xyXG4gICAgbGV0IHRhcmdldENvbDogbnVtYmVyO1xyXG4gICAgLy8gcmVzZXQgY2FsbCBjb3VudFxyXG4gICAgcHJldkJsb2NrLmN1cnJlbnRDYWxsQ291bnQgPSBwcmV2QmxvY2suY2FsbENvdW50O1xyXG4gICAgLy8gVE9ETzogYWRkIGNvbmRpdGlvbmFsc1xyXG4gICAgLy8gdGhpcyB3aWxsIHdvcmsgd2VsbCBoZXJlIHNpbmNlIGVhY2ggY2FsbCBmaW5kcyB0aGUgbmV4dCBjYWxsXHJcbiAgICAvLyBhZnRlciBpdCBoYXMgYWxyZWFkeSBleGVjdXRlZFxyXG4gICAgc3dpdGNoKHByZXZCbG9jay5mbG93VHlwZSkge1xyXG4gICAgICAgIGNhc2UgRmxvd1R5cGVzLlVwOlxyXG4gICAgICAgICAgICB0YXJnZXRSb3cgPSBwcmV2QmxvY2suciAtIDE7XHJcbiAgICAgICAgICAgIHRhcmdldENvbCA9IHByZXZCbG9jay5jO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEZsb3dUeXBlcy5Eb3duOlxyXG4gICAgICAgICAgICB0YXJnZXRSb3cgPSBwcmV2QmxvY2suciArIDE7XHJcbiAgICAgICAgICAgIHRhcmdldENvbCA9IHByZXZCbG9jay5jO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEZsb3dUeXBlcy5SaWdodDpcclxuICAgICAgICAgICAgdGFyZ2V0Q29sID0gcHJldkJsb2NrLmMgKyAxO1xyXG4gICAgICAgICAgICB0YXJnZXRSb3cgPSBwcmV2QmxvY2sucjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBGbG93VHlwZXMuTGVmdDpcclxuICAgICAgICAgICAgdGFyZ2V0Q29sID0gcHJldkJsb2NrLmMgLSAxO1xyXG4gICAgICAgICAgICB0YXJnZXRSb3cgPSBwcmV2QmxvY2sucjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBHcmlkQmxvY2spIHtcclxuICAgICAgICAgICAgaWYgKGJsb2NrLnIgPT09IHRhcmdldFJvdyAmJiBibG9jay5jID09PSB0YXJnZXRDb2xcclxuICAgICAgICAgICAgICAgICYmIGJsb2NrLmNvbW1hbmRUeXBlICE9PSBDb21tYW5kVHlwZXMuRW1wdHlcclxuICAgICAgICAgICAgICAgICYmIGJsb2NrLmZsb3dUeXBlICE9PSBGbG93VHlwZXMuRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaChibG9jay5jb21tYW5kVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLkFuZ2xlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jYWxsID0gKCkgPT4gYW5nbGVDYWxsKGdhbWVTdGF0ZSwgYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lU3RhdGUubmV4dFN0YWNrLnB1c2goYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIENvbW1hbmRUeXBlcy5Nb3ZlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jYWxsID0gKCkgPT4gbW92ZUNhbGwoZ2FtZVN0YXRlLCBibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5uZXh0U3RhY2sucHVzaChibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ29tbWFuZFR5cGVzLlN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5jYWxsID0gKCkgPT4gc3RhcnRDYWxsKGdhbWVTdGF0ZSwgYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lU3RhdGUubmV4dFN0YWNrLnB1c2goYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59IiwiaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vR2FtZVN0YXRlXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcywgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuXHJcbi8vIGFkZCBjb21tYW5kIGFuZCBjb25kaXRpb25hbCBzbGlkZXIgdHlwZXMgYXMgYSBwYXJhbSBhbmQgdG8gRW51bXMudHNcclxuLy8gYWRkIHRvIEdlbmVyYXRlTGV2ZWxcclxuLy8gbWF5YmUgYWRkIHN1cHBvcnQgZm9yIHRocmVhZCBzdGFydGVyP1xyXG5leHBvcnQgY2xhc3MgU2xpZGVyIHtcclxuICAgIHByb3RlY3RlZCBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuICAgIHB1YmxpYyBtb3VzZURvd246IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIHNuYXBBbW91bnQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcGVyY2VudGFnZTogbnVtYmVyO1xyXG4gICAgcHVibGljIHZhbHVlOiBudW1iZXI7XHJcbiAgICByZWFkb25seSBtYXhVbml0czogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgYmFzZVVuaXRzOiBudW1iZXI7XHJcbiAgICByZWFkb25seSB0eXBlOiBDb21tYW5kVHlwZXMgfCBGbG93VHlwZXM7XHJcbiAgICBwdWJsaWMgc2xpZGVyWDogbnVtYmVyO1xyXG4gICAgcHVibGljIHNsaWRlclk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsaWRlckg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsaWRlclc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNsaWRlckNvbG9yOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgYmFyWDogbnVtYmVyO1xyXG4gICAgcHVibGljIGJhclk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJhckg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJhclc6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGJhckNvbG9yOiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihHYW1lU3RhdGU6IEdhbWVTdGF0ZSwgWCA6bnVtYmVyLCBZOiBudW1iZXIsIE1heFVuaXRzOiBudW1iZXIsIFR5cGU6IENvbW1hbmRUeXBlcyB8IEZsb3dUeXBlcywgU25hcEFtb3VudDogbnVtYmVyID0gMTApIHtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZSA9IEdhbWVTdGF0ZTtcclxuICAgICAgICB0aGlzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubWF4VW5pdHMgPSBNYXhVbml0cztcclxuICAgICAgICB0aGlzLnNuYXBBbW91bnQgPSBTbmFwQW1vdW50O1xyXG4gICAgICAgIHRoaXMuYmFzZVVuaXRzID0gTWF0aC5yb3VuZCh0aGlzLm1heFVuaXRzIC8gdGhpcy5zbmFwQW1vdW50KTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBUeXBlO1xyXG4gICAgICAgIHRoaXMuYmFySCA9IDc1O1xyXG4gICAgICAgIHRoaXMuYmFyVyA9IDEwO1xyXG4gICAgICAgIHRoaXMuYmFyWCA9IFg7XHJcbiAgICAgICAgdGhpcy5iYXJZID0gWTtcclxuICAgICAgICB0aGlzLmJhckNvbG9yID0gXCJ0aGlzdGxlXCI7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJIID0gMTA7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJXID0gMTU7XHJcbiAgICAgICAgdGhpcy5zbGlkZXJYID0gWDtcclxuICAgICAgICB0aGlzLnNsaWRlclkgPSBZICsgdGhpcy5iYXJILzIgLSB0aGlzLnNsaWRlckgvMjtcclxuICAgICAgICB0aGlzLnNsaWRlckNvbG9yID0gXCJwdXJwbGVcIjtcclxuICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSAxIC0gKHRoaXMuc2xpZGVyWSAtIHRoaXMuYmFyWSArIHRoaXMuc2xpZGVySC8yKSAvIHRoaXMuYmFySDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gTWF0aC5yb3VuZCh0aGlzLnBlcmNlbnRhZ2UgKiB0aGlzLnNuYXBBbW91bnQpIC8gdGhpcy5zbmFwQW1vdW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoKSA6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlRG93bikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5iYXJZIC0gdGhpcy5zbGlkZXJILzIgPCB0aGlzLmdhbWVTdGF0ZS5tb3VzZVkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFyWSArIHRoaXMuYmFySCAtIHRoaXMuc2xpZGVySC8yID4gdGhpcy5nYW1lU3RhdGUubW91c2VZKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wU2xpZGVyWSA9IHRoaXMuZ2FtZVN0YXRlLm1vdXNlWTtcclxuICAgICAgICAgICAgICAgIC8vIGZpbmQgcGVyY2VudGFnZSBzbGlkZXIgaXMgdXAgdmVydGljYWwgb24gYmFyXHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlcmNlbnRhZ2UgPSAxIC0gKHRlbXBTbGlkZXJZIC0gdGhpcy5iYXJZICsgdGhpcy5zbGlkZXJILzIpIC8gdGhpcy5iYXJIO1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSB0byBiZSB0aGUgcm91bmRlZCBwZXJjZW50YWdlIGJhc2VkIG9uIHNuYXAgYW1vdW50XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gTWF0aC5yb3VuZCh0aGlzLnBlcmNlbnRhZ2UgKiB0aGlzLnNuYXBBbW91bnQpIC8gdGhpcy5zbmFwQW1vdW50O1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHNsaWRlclkgdmFsdWUgYmFzZWQgb24gbmV3IHZhbHVlIGZyb20gdGhlIHJvdW5kZWQgcGVyY2FudGFnZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zbGlkZXJZID0gdGhpcy5iYXJIICsgdGhpcy5iYXJZIC0gKHRoaXMuc2xpZGVySC8yKSAtICh0aGlzLnZhbHVlICogdGhpcy5iYXJIKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZHJhdygpIDogdm9pZCB7XHJcbiAgICAgICAgLy8gZHJhdyBiYXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5iYXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5iYXJYLCB0aGlzLmJhclksIHRoaXMuYmFyVywgdGhpcy5iYXJIKTtcclxuXHJcbiAgICAgICAgLy8gZHJhdyBzbGlkZXJcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFN0eWxlID0gdGhpcy5zbGlkZXJDb2xvcjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdHguZmlsbFJlY3QodGhpcy5zbGlkZXJYIC0gdGhpcy5zbGlkZXJILzQsIHRoaXMuc2xpZGVyWSwgdGhpcy5zbGlkZXJXLCB0aGlzLnNsaWRlckgpO1xyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZGVjbGFyYXRpb25zL2pzb24uZC50c1wiIC8+XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuL0dhbWVTdGF0ZVwiO1xyXG5pbXBvcnQgbGV2ZWwxIGZyb20gJy4uL2RhdGEvbGV2ZWxzL2xldmVsMS5qc29uJztcclxuaW1wb3J0IHsgR2VuZXJhdGVMZXZlbCB9IGZyb20gXCIuL0dlbmVyYXRlTGV2ZWxcIjtcclxuaW1wb3J0IHsgU2V0VXBFdmVudExpc3RlbmVycyB9IGZyb20gXCIuL1NldFVwRXZlbnRMaXN0ZW5lcnNcIjtcclxuaW1wb3J0IHsgRmxvd0Jsb2NrIH0gZnJvbSBcIi4vRmxvd0Jsb2NrXCI7XHJcbmltcG9ydCB7IFNsaWRlciB9IGZyb20gXCIuL1NsaWRlclwiO1xyXG5pbXBvcnQgeyBDb21tYW5kVHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuLy8gVE9ETzogYWRkIHNwZWNpYWwgdW5pdCBsb2dpYyBmb3Igc3RhcnQgYmxvY2sgLyB0aHJlYWQgYmxvY2tzIHNpbmNlIHRoZXkgZG9uJ3QgZm9sbG93IHNhbWUgcnVsZXNcclxuLy8gLT4gaS5lLiB3aWxsIG5lZWQgdG8gZG8gYSBzd2l0Y2ggb24gdHlwZSB3aGVuIHVwZGF0aW5nIHVuaXQgdmFsdWVzIHdpdGhpbiBjb21tYW5kIGJsb2NrIGJ1dHRvbnMgdXBkYXRlIG1ldGhvZFxyXG4vLyBUT0RPOiBhZGQgYmlnIHllbGxvdyBibG9jayB0aGF0IHJlbmRlcnMgYmVoaW5kIGdyaWQgYmxvY2tzIHRvIGluZGljYXRlIHdoaWNoIGJsb2NrIGlzIGN1cnJlbnRseSBiZWluZyBleGVjdXRlZFxyXG4vLyBUT0RPOiBoYXZlIEZsb3dCbG9ja0J1dHRvbiBhbmQgQ29tbWFuZEJsb2NrQnV0dG9ucyBleHRlbmQgZnJvbSB0aGVpciByZXNwZWN0aXZlIGJsb2Nrc1xyXG4vLyBUT0RPOiBwdXNoIG1vc3QgcmVjZW50bHkgY2xpY2tlZCBjb21tYW5kIC8gZmxvdyBibG9jayB0byB0b3Agb2YgYmxvY2sgYXJyYXkgdG8gcmVuZGVyIGl0IG9uIHRvcCBvZiBldmVyeXRoaW5nIGVsc2VcclxuLy8gVE9ETzogc3dpdGNoIHNwYWNlYmFyIGNvbnRyb2wgYnV0dG9uIHRvIGNsaWNrYWJsZSByYWRpbyBidXR0b25cclxuLy8gVE9ETzogYWRkIGJhc2UgVUkgY2xhc3MgLyBzd2l0Y2ggc2xpZGVyW10gdG8gYmFzZVVJRWxlbWVudFtdIGluIEdhbWVTdGF0ZVxyXG4vLyBUT0RPOiBhZGQgZXhlY3V0ZSBwcm9ncmFtIC8gc3RvcCBwcm9ncmFtIGJ1dHRvbnNcclxuLy8gVE9ETzogYWRkIG1hbmlmb2xkIGNvbGxpc2lvbiBzeXN0ZW0gZm9yIGdyaWRibG9jayBjb2xsaXNpb24gd2l0aCBmbG93IGFuZCBjb21tYW5kIGJsb2Nrcy5cclxuLy8gLT4gaS5lLiBzbmFwIGNvbW1hbmQgYmxvY2sgdG8gZ3JpZCBibG9jayB0aGF0IGhhcyB0aGUgYmlnZ2VzdCBtYW5pZm9sZFxyXG5cclxuLy8gc2V0IHVwIGdhbWUgc3RhdGVcclxudmFyIGdhbWVTdGF0ZSA9IG5ldyBHYW1lU3RhdGUoKTtcclxuR2VuZXJhdGVMZXZlbChnYW1lU3RhdGUsIGxldmVsMSwgXCJsaWdodGJsdWVcIik7XHJcblNldFVwRXZlbnRMaXN0ZW5lcnMoZ2FtZVN0YXRlKTtcclxuXHJcbi8vIHNldCB1cCB0ZXN0IHVpIGVsZW1lbnRzXHJcbmdhbWVTdGF0ZS5zbGlkZXJzLnB1c2gobmV3IFNsaWRlcihnYW1lU3RhdGUsIDgwLCAzNjUsIDEwMCwgQ29tbWFuZFR5cGVzLk1vdmUpKTtcclxuZ2FtZVN0YXRlLnNsaWRlcnMucHVzaChuZXcgU2xpZGVyKGdhbWVTdGF0ZSwgMTMwLCAzNjUsIDM2MCwgQ29tbWFuZFR5cGVzLkFuZ2xlLCA4KSk7XHJcblxyXG5mdW5jdGlvbiBkcmF3KCkgOiB2b2lkIHtcclxuICAgIGdhbWVTdGF0ZS5jdHguY2xlYXJSZWN0KDAsIDAsIGdhbWVTdGF0ZS5jYW52YXMud2lkdGgsIGdhbWVTdGF0ZS5jYW52YXMuaGVpZ2h0KTtcclxuICAgIGdhbWVTdGF0ZS5jdHguYmVnaW5QYXRoKCk7XHJcblxyXG4gICAgLy8gcmVuZGVyIFVJIGVsZW1lbnRzXHJcbiAgICBnYW1lU3RhdGUuc2xpZGVycy5mb3JFYWNoKHNsaWRlciA9PiB7XHJcbiAgICAgICAgc2xpZGVyLmRyYXcoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIHJlbmRlciBhbGwgbm9uLWZsb3cgYmxvY2tzIGZpcnN0XHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmICghKGJsb2NrIGluc3RhbmNlb2YgRmxvd0Jsb2NrKSkge1xyXG4gICAgICAgICAgICBibG9jay5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gcmVuZGVyIGFsbCBmbG93IGJsb2NrcyBsYXN0IHRvIGxheWVyIHRoZW0gb24gdG9wIG9mIGNvbW1hbmQgYmxvY2tzXHJcbiAgICBnYW1lU3RhdGUuYmxvY2tzLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIEZsb3dCbG9jaykge1xyXG4gICAgICAgICAgICBibG9jay5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZ2FtZVN0YXRlLmN0eC5zdHJva2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlKCkgOiB2b2lkIHtcclxuICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgYmxvY2sudXBkYXRlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lU3RhdGUuc2xpZGVycy5mb3JFYWNoKHNsaWRlciA9PiB7XHJcbiAgICAgICAgc2xpZGVyLnVwZGF0ZSgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbnNldEludGVydmFsKGZ1bmN0aW9uKCkgOiB2b2lkIHtcclxuICAgIHVwZGF0ZSgpO1xyXG4gICAgZHJhdygpO1xyXG5cclxuICAgIGNvbnN0IGNhbGxTdGFjayA9IGdhbWVTdGF0ZS5uZXh0U3RhY2s7XHJcbiAgICBnYW1lU3RhdGUubmV4dFN0YWNrID0gW107XHJcblxyXG4gICAgaWYgKGNhbGxTdGFjay5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY2FsbFN0YWNrLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICAvLyB3aWxsIGNhbGwgY29tbWFuZCBhbmQgcHVzaCBpdCBiYWNrIG9uIHN0YWNrXHJcbiAgICAgICAgICAgIGlmIChibG9jay5jdXJyZW50Q2FsbENvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYmxvY2suY2FsbCgpO1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLm5leHRTdGFjay5wdXNoKGJsb2NrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBlbHNlIGp1c3QgY2FsbCBvbmNlIGFuZCBmaW5kIG5leHQgY2FsbFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrLmNhbGwoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcbn0sIDEyKTsiLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRCbG9ja0J1dHRvbiB9IGZyb20gXCIuL0NvbW1hbmRCbG9ja1wiO1xyXG5pbXBvcnQgeyBGbG93QmxvY2tCdXR0b24gfSBmcm9tIFwiLi9GbG93QmxvY2tcIjtcclxuaW1wb3J0IHsgQ29tbWFuZFR5cGVzLCBGbG93VHlwZXMgfSBmcm9tIFwiLi9FbnVtc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEdlbmVyYXRlTGV2ZWwoZ2FtZVN0YXRlOiBHYW1lU3RhdGUsIGxldmVsT2JqOiBvYmplY3QsIHBhbGV0dGVDb2xvcjogc3RyaW5nKSB7XHJcbiAgICBsZXQgeU9mZnNldDogbnVtYmVyID0gNTtcclxuICAgIGxldCB4T2Zmc2V0OiBudW1iZXIgPSA1O1xyXG4gICAgbGV0IG1heFhPZmZzZXQ6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgbWF4WU9mZnNldDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvLyBzZXQgdXAgZ3JpZCBmb3IgQ29tbWFuZCBQYWxldHRlXHJcbiAgICAvLyBhc3NpZ24gcm93IGFuZCBjb2x1bW4gdmFsdWVzIHRvIGdyaWQgYmxvY2tzXHJcbiAgICBmb3IgKHZhciByID0gMDsgciA8IGxldmVsT2JqW1wiY29tbWFuZF9wYWxldHRlXCJdW1wiYmxvY2tfaGVpZ2h0XCJdOyByKyspIHtcclxuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGxldmVsT2JqW1wiY29tbWFuZF9wYWxldHRlXCJdW1wiYmxvY2tfd2lkdGhcIl07IGMrKykge1xyXG4gICAgICAgICAgICBuZXcgR3JpZEJsb2NrKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCByLCBjLCBwYWxldHRlQ29sb3IpO1xyXG4gICAgICAgICAgICB4T2Zmc2V0ICs9IDU1O1xyXG4gICAgICAgIH1cclxuICAgICAgICB5T2Zmc2V0ICs9IDU1O1xyXG4gICAgICAgIG1heFhPZmZzZXQgPSB4T2Zmc2V0O1xyXG4gICAgICAgIHhPZmZzZXQgPSA1O1xyXG4gICAgfVxyXG5cclxuICAgIG1heFlPZmZzZXQgPSB5T2Zmc2V0O1xyXG4gICAgeU9mZnNldCA9IG1heFlPZmZzZXQgKyAyMDtcclxuXHJcbiAgICAvLyBzZXQgdXAgQ29tbWFuZCBCbG9jayBCdXR0b25zXHJcbiAgICAvLyBDT05TSURFUjogQWNjb21tb2RhdGluZyBmb3IgY29tbWFuZCBwYWxldHRlIHdpZHRoXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxldmVsT2JqW1wiY29tbWFuZF9ibG9ja3NcIl0ubGVuZ3RoOyBpICsrKSB7XHJcbiAgICAgICAgc3dpdGNoKGxldmVsT2JqW1wiY29tbWFuZF9ibG9ja3NcIl1baV0pIHtcclxuICAgICAgICAgICAgY2FzZSBcInN0YXJ0XCI6XHJcbiAgICAgICAgICAgICAgICBuZXcgQ29tbWFuZEJsb2NrQnV0dG9uKGdhbWVTdGF0ZSwgeE9mZnNldCwgeU9mZnNldCwgNTAsIDUwLCBcInRoaXN0bGVcIiwgQ29tbWFuZFR5cGVzLlN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ0aGlzdGxlXCIsIENvbW1hbmRUeXBlcy5Nb3ZlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYW5nbGVcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuQW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ0aHJlYWRcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwidGhpc3RsZVwiLCBDb21tYW5kVHlwZXMuVGhyZWFkKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibGFzZXJcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwiZ3JlZW5cIiwgQ29tbWFuZFR5cGVzLkxhc2VyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic2NhblwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IENvbW1hbmRCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJkYXJrYmx1ZVwiLCBDb21tYW5kVHlwZXMuU2Nhbik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImdyYXBwbGVcIjpcclxuICAgICAgICAgICAgICAgIG5ldyBDb21tYW5kQmxvY2tCdXR0b24oZ2FtZVN0YXRlLCB4T2Zmc2V0LCB5T2Zmc2V0LCA1MCwgNTAsIFwibWFyb29uXCIsIENvbW1hbmRUeXBlcy5HcmFwcGxlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICB4T2Zmc2V0ICs9IDU1O1xyXG4gICAgfVxyXG5cclxuICAgIHhPZmZzZXQgPSBtYXhYT2Zmc2V0ICsgMjA7XHJcbiAgICB5T2Zmc2V0ID0gNTtcclxuXHJcbiAgICAvLyBzZXQgdXAgRmxvdyBCbG9jayBCdXR0b25zXHJcbiAgICAvLyBDT05TSURFUjogQWNjb21tb2RhdGluZyBmb3IgY29tbWFuZCBwYWxldHRlIGhlaWdodFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbE9ialtcImZsb3dfYmxvY2tzXCJdLmxlbmd0aDsgaSArKykge1xyXG4gICAgICAgIHN3aXRjaChsZXZlbE9ialtcImZsb3dfYmxvY2tzXCJdW2ldKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ1cFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLlVwKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLkxlZnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLlJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZG93blwiOlxyXG4gICAgICAgICAgICAgICAgbmV3IEZsb3dCbG9ja0J1dHRvbihnYW1lU3RhdGUsIHhPZmZzZXQsIHlPZmZzZXQsIDUwLCA1MCwgXCJ5ZWxsb3dcIiwgRmxvd1R5cGVzLkRvd24pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHlPZmZzZXQgKz0gNTU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi9HYW1lU3RhdGVcIjtcclxuaW1wb3J0IHsgQ29tbWFuZEJsb2NrLCBDb21tYW5kQmxvY2tCdXR0b24gfSBmcm9tIFwiLi9Db21tYW5kQmxvY2tcIjtcclxuaW1wb3J0IHsgR3JpZEJsb2NrIH0gZnJvbSBcIi4vR3JpZEJsb2NrXCI7XHJcbmltcG9ydCB7IEZsb3dCbG9jaywgRmxvd0Jsb2NrQnV0dG9uIH0gZnJvbSBcIi4vRmxvd0Jsb2NrXCI7XHJcbmltcG9ydCB7IENvbW1hbmRUeXBlcywgRmxvd1R5cGVzIH0gZnJvbSBcIi4vRW51bXNcIjtcclxuaW1wb3J0IHsgc3RhcnROZXdUaHJlYWRDYWxsIH0gZnJvbSBcIi4vUHJvZ3JhbUV4ZWN1dGlvblwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFNldFVwRXZlbnRMaXN0ZW5lcnMoZ2FtZVN0YXRlOiBHYW1lU3RhdGUpIHtcclxuICAgIGdhbWVTdGF0ZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24oKSA6IHZvaWQge1xyXG4gICAgICAgIC8vIENvbGxpc2lvbiBkZXRlY3Rpb24gYmV0d2VlbiBjbGlja2VkIG9mZnNldCBhbmQgYmxvY2suXHJcbiAgICAgICAgZ2FtZVN0YXRlLmJsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcclxuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5tb3VzZVkgPiBibG9jay55ICYmIGdhbWVTdGF0ZS5tb3VzZVkgPCBibG9jay55ICsgYmxvY2suaFxyXG4gICAgICAgICAgICAgICAgJiYgZ2FtZVN0YXRlLm1vdXNlWCA+IGJsb2NrLnggJiYgZ2FtZVN0YXRlLm1vdXNlWCA8IGJsb2NrLnggKyBibG9jay53KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2sgJiYgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBDb21tYW5kQmxvY2tCdXR0b24gJiYgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2sgJiYgZ2FtZVN0YXRlLmZsb3dDb250cm9sXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2tCdXR0b24gJiYgZ2FtZVN0YXRlLmZsb3dDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2subW91c2VEb3duID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJsb2NrIGluc3RhbmNlb2YgR3JpZEJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgcmFkaW8gYnV0dG9uIGZvciBmbG93IG9yIGNvbW1hbmQgY29udHJvbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2suY29tbWFuZFR5cGUgPSBDb21tYW5kVHlwZXMuRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVTdGF0ZS5mbG93Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5mbG93VHlwZSA9IEZsb3dUeXBlcy5FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgZm9yIHNsaWRlcnMgYmVpbmcgY2xpY2tlZFxyXG4gICAgICAgIGdhbWVTdGF0ZS5zbGlkZXJzLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgIGlmIChnYW1lU3RhdGUubW91c2VZID4gcy5zbGlkZXJZICYmIGdhbWVTdGF0ZS5tb3VzZVkgPCBzLnNsaWRlclkgKyBzLnNsaWRlckhcclxuICAgICAgICAgICAgICAgICYmIGdhbWVTdGF0ZS5tb3VzZVggPiBzLnNsaWRlclggJiYgZ2FtZVN0YXRlLm1vdXNlWCA8IHMuc2xpZGVyWCArIHMuc2xpZGVyVykge1xyXG4gICAgICAgICAgICAgICAgcy5tb3VzZURvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgZmFsc2UpO1xyXG5cclxuICAgIC8vIG1ha2Ugc3VyZSBhbGwgY2xpY2thYmxlIGVudGl0aWVzIGFyZW4ndCBjbGlja2FibGUgb24gbW91c2V1cFxyXG4gICAgZ2FtZVN0YXRlLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oKSA6IHZvaWQge1xyXG4gICAgICAgIGdhbWVTdGF0ZS5ibG9ja3MuZm9yRWFjaChibG9jayA9PiB7XHJcbiAgICAgICAgICAgIGlmIChibG9jayBpbnN0YW5jZW9mIENvbW1hbmRCbG9ja1xyXG4gICAgICAgICAgICAgICAgfHwgYmxvY2sgaW5zdGFuY2VvZiBGbG93QmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGlmIChibG9jay5tb3VzZURvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5tb3VzZURvd24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBnYW1lU3RhdGUuc2xpZGVycy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICBzLm1vdXNlRG93biA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgZmFsc2UpO1xyXG5cclxuICAgIGdhbWVTdGF0ZS5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24oZXZ0OiBNb3VzZUV2ZW50KSA6IHZvaWQge1xyXG4gICAgICAgIGdhbWVTdGF0ZS5tb3VzZVggPSAoZXZ0LmNsaWVudFggLSBnYW1lU3RhdGUucmVjdC5sZWZ0KSAvIChnYW1lU3RhdGUucmVjdC5yaWdodCAtIGdhbWVTdGF0ZS5yZWN0LmxlZnQpICogZ2FtZVN0YXRlLmNhbnZhcy53aWR0aDtcclxuICAgICAgICBnYW1lU3RhdGUubW91c2VZID0gKGV2dC5jbGllbnRZIC0gZ2FtZVN0YXRlLnJlY3QudG9wKSAvIChnYW1lU3RhdGUucmVjdC5ib3R0b20gLSBnYW1lU3RhdGUucmVjdC50b3ApICogZ2FtZVN0YXRlLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICB9LCBmYWxzZSk7XHJcblxyXG4gICAgd2luZG93Lm9ua2V5dXAgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgLy8gaS5lLiBTcGFjZUJhciBwcmVzc2VkXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzIpIHtcclxuICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5mbG93Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmZsb3dDb250cm9sID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuY29tbWFuZENvbnRyb2wgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb21tYW5kIENvbnRyb2whXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVTdGF0ZS5jb21tYW5kQ29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmNvbW1hbmRDb250cm9sID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBnYW1lU3RhdGUuZmxvd0NvbnRyb2wgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGbG93IENvbnRyb2whXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpLmUuIFMga2V5IHByZXNzZWRcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSA4Mykge1xyXG4gICAgICAgICAgICBpZiAoIWdhbWVTdGF0ZS5wcm9ncmFtUnVubmluZykge1xyXG4gICAgICAgICAgICAgICAgZ2FtZVN0YXRlLnByb2dyYW1SdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TmV3VGhyZWFkQ2FsbChnYW1lU3RhdGUsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==