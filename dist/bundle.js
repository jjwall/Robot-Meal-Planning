!function(t){var e={};function a(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=t,a.c=e,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)a.d(n,o,function(e){return t[e]}.bind(null,o));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var n,o,s=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.sliders=t&&t.sliders||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),i=a(0),r=function(){function t(t,e,a,n,o,s){this.GameState=t,this.X=e,this.Y=a,this.H=n,this.W=o,this.Color=s,this.gameState=t,this.x=e,this.y=a,this.h=n,this.w=o,this.color=s}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(n||(n={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(o||(o={}));var c=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),l=function(t){function e(e,a,o,s,i,r,c,l,h){var u=t.call(this,e,a,o,s,i,l)||this;switch(u.baseUnits=r,u.callCount=c,u.totalUnits=u.baseUnits*u.callCount,u.mouseDown=!0,u.set=!1,u.type=h,u.image=new Image,h){case n.Start:u.image.src="data/textures/StartBlock.png";break;case n.Move:u.image.src="data/textures/MoveBlock.png";break;case n.Angle:u.image.src="data/textures/AngleBlock.png";break;case n.Thread:u.image.src="data/textures/ThreadBlock.png"}return u.gameState.blocks.push(u),u}return c(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),h=function(t){function e(e,a,o,s,i,r,c){var l=t.call(this,e,a,o,s,i,r)||this;switch(l.mouseDown=!1,l.type=c,l.image=new Image,l.baseUnits=0,l.callCount=0,l.totalUnits=0,c){case n.Start:l.image.src="data/textures/StartBlock.png";break;case n.Move:l.image.src="data/textures/MoveBlock.png";break;case n.Angle:l.image.src="data/textures/AngleBlock.png";break;case n.Thread:l.image.src="data/textures/ThreadBlock.png"}return l.gameState.blocks.push(l),l}return c(e,t),e.prototype.update=function(){var t=this;this.gameState.sliders.forEach(function(e){e.type===t.type&&(t.callCount=Math.round(e.value*e.maxUnits/e.baseUnits),t.baseUnits=e.baseUnits,t.totalUnits=t.baseUnits*t.callCount)}),this.mouseDown&&(this.mouseDown=!1,new l(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),u=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),m=function(t){function e(e,a,n,s,i,r,c){var l=t.call(this,e,a,n,s,i,r)||this;switch(l.gameState=e,l.type=c,l.mouseDown=!0,l.set=!1,l.image=new Image,c){case o.Up:l.image.src="data/textures/UpArrow.png";break;case o.Down:l.image.src="data/textures/DownArrow.png";break;case o.Left:l.image.src="data/textures/LeftArrow.png";break;case o.Right:l.image.src="data/textures/RightArrow.png"}return l.gameState.blocks.push(l),l}return u(e,t),e.prototype.update=function(){if(this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1),!this.mouseDown&&!this.set){var t=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(t,1)}},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),f=function(t){function e(e,a,n,s,i,r,c){var l=t.call(this,e,a,n,s,i,r)||this;switch(l.type=c,l.mouseDown=!1,l.image=new Image,c){case o.Up:l.image.src="data/textures/UpArrow.png";break;case o.Down:l.image.src="data/textures/DownArrow.png";break;case o.Left:l.image.src="data/textures/LeftArrow.png";break;case o.Right:l.image.src="data/textures/RightArrow.png"}return l.gameState.blocks.push(l),l}return u(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new m(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),p=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function n(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}}(),g=function(t){function e(e,a,s,i,r,c,l,h){var u=t.call(this,e,a,s,i,r,h)||this;return u.r=c,u.c=l,u.flowType=o.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,callCount:0,type:n.Empty},u}return p(e,t),e.prototype.update=function(){var t=this;this.gameState.blocks.forEach(function(e){(e instanceof l||e instanceof m)&&!1===e.mouseDown&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.commandData.type===n.Empty&&e instanceof l?(e.x=t.x,e.y=t.y,e.set=!0,t.commandData.type=e.type,t.commandData.baseUnits=e.baseUnits,t.commandData.callCount=e.callCount,t.commandData.totalUnits=e.totalUnits,t.currentCallCount=e.callCount):t.flowType===o.Empty&&e instanceof m&&(e.x=t.x,e.y=t.y,e.set=!0,t.flowType=e.type))})},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r);function d(t,e){var a,s;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case o.Up:a=e.r-1,s=e.c;break;case o.Down:a=e.r+1,s=e.c;break;case o.Right:s=e.c+1,a=e.r;break;case o.Left:s=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof g&&e.r===a&&e.c===s&&e.commandData.type!==n.Empty&&e.flowType!==o.Empty)switch(e.commandData.type){case n.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):d(t,e)}(t,e)},t.nextStack.push(e);break;case n.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):d(t,e)}(t,e)},t.nextStack.push(e);break;case n.Start:e.call=function(){return function(t,e){console.log("start"),d(t,e)}(t,e)},t.nextStack.push(e)}})}var w=function(){function t(t,e,a,n,o,s){void 0===s&&(s=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=n,this.snapAmount=s,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=o,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),y=new s;!function(t,e,a){for(var s=5,i=5,r=0,c=0;c<e.command_palette.block_height;c++){for(var l=0;l<e.command_palette.block_width;l++)new g(t,i,s,50,50,c,l,a),i+=55;s+=55,r=i,i=5}s+=20;for(var u=0;u<e.command_blocks.length;u++){switch(e.command_blocks[u]){case"start":new h(t,i,s,50,50,"thistle",n.Start);break;case"move":new h(t,i,s,50,50,"thistle",n.Move);break;case"angle":new h(t,i,s,50,50,"thistle",n.Angle);break;case"thread":new h(t,i,s,50,50,"thistle",n.Thread);break;case"laser":new h(t,i,s,50,50,"green",n.Laser);break;case"scan":new h(t,i,s,50,50,"darkblue",n.Scan);break;case"grapple":new h(t,i,s,50,50,"maroon",n.Grapple)}i+=55}for(i=r+20,s=5,u=0;u<e.flow_blocks.length;u++){switch(e.flow_blocks[u]){case"up":new f(t,i,s,50,50,"yellow",o.Up);break;case"left":new f(t,i,s,50,50,"yellow",o.Left);break;case"right":new f(t,i,s,50,50,"yellow",o.Right);break;case"down":new f(t,i,s,50,50,"yellow",o.Down)}s+=55}}(y,i,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof l&&t.commandControl||e instanceof h&&t.commandControl||e instanceof m&&t.flowControl||e instanceof f&&t.flowControl?e.mouseDown=!0:e instanceof g&&(t.commandControl?e.commandData.type=n.Empty:t.flowControl&&(e.flowType=o.Empty)))}),t.sliders.forEach(function(e){t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0)})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof l||t instanceof m)&&t.mouseDown&&(t.mouseDown=!1)}),t.sliders.forEach(function(t){t.mouseDown=!1})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning||(t.programRunning=!0,function(t,e){t.blocks.forEach(function(e){e instanceof g&&e.commandData.type===n.Start&&e.flowType!==o.Empty&&d(t,e)})}(t)))}}(y),y.sliders.push(new w(y,80,365,100,n.Move)),y.sliders.push(new w(y,130,365,360,n.Angle,8)),setInterval(function(){y.blocks.forEach(function(t){t.update()}),y.sliders.forEach(function(t){t.update()}),y.ctx.clearRect(0,0,y.canvas.width,y.canvas.height),y.ctx.beginPath(),y.sliders.forEach(function(t){t.draw()}),y.blocks.forEach(function(t){t instanceof m||t.draw()}),y.blocks.forEach(function(t){t instanceof m&&t.draw()}),y.ctx.stroke();var t=y.nextStack;y.nextStack=[],t.length>0?t.forEach(function(t){t.currentCallCount>0?(t.call(),y.nextStack.push(t)):t.call()}):y.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,