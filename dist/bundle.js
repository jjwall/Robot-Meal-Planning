!function(t){var e={};function a(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=e,a.d=function(t,e,s){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(a.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)a.d(s,n,function(e){return t[e]}.bind(null,n));return s},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t){t.exports={next_level:"level2",command_palette:{block_width:5,block_height:5},command_blocks:["start","move","angle"],flow_blocks:["up","down","left","right"]}},function(t,e,a){"use strict";a.r(e);var s,n,o=function(){return function(t){this.canvas=t&&t.canvas||document.getElementById("gameScreen"),this.ctx=t&&t.ctx||this.canvas.getContext("2d"),this.rect=t&&t.rect||this.canvas.getBoundingClientRect(),this.blocks=t&&t.blocks||[],this.userInterfaces=t&&t.userInterfaces||[],this.mouseX=t&&t.mouseX||0,this.mouseY=t&&t.mouseY||0,this.commandControl=t&&t.commandControl||!0,this.flowControl=t&&t.flowControl||!1,this.nextStack=t&&t.nextStack||[],this.programRunning=t&&t.programRunning||!1}}(),i=a(0),r=function(){function t(t,e,a,s,n,o){this.GameState=t,this.X=e,this.Y=a,this.H=s,this.W=n,this.Color=o,this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=n,this.color=o}return t.prototype.draw=function(){},t.prototype.update=function(){},t}();!function(t){t[t.Empty=0]="Empty",t[t.Start=1]="Start",t[t.Move=2]="Move",t[t.Angle=3]="Angle",t[t.Thread=4]="Thread",t[t.Scan=5]="Scan",t[t.Laser=6]="Laser",t[t.Grapple=7]="Grapple"}(s||(s={})),function(t){t[t.Empty=0]="Empty",t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right",t[t.ConditionalLeftRight=5]="ConditionalLeftRight",t[t.ConditionalLeftUp=6]="ConditionalLeftUp",t[t.ConditionalLeftDown=7]="ConditionalLeftDown",t[t.ConditionalUpRight=8]="ConditionalUpRight",t[t.ConditionalUpDown=9]="ConditionalUpDown",t[t.ConditionalDownRight=10]="ConditionalDownRight"}(n||(n={}));var c=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),h=function(t){function e(e,a,o,i,r,c,h,l){var u=t.call(this,e,a,o,i,r,l)||this;return u.r=c,u.c=h,u.flowType=n.Empty,u.gameState.blocks.push(u),u.commandData={baseUnits:0,totalUnits:0,callCount:0,type:s.Empty},u}return c(e,t),e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h)},e}(r),l=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),u=function(t){function e(e,a,n,o,i,r,c,h,l){var u=t.call(this,e,a,n,o,i,h)||this;switch(u.baseUnits=r,u.callCount=c,u.totalUnits=u.baseUnits*u.callCount,u.mouseDown=!0,u.set=!1,u.type=l,u.image=new Image,l){case s.Start:u.image.src="data/textures/StartBlock.png";break;case s.Move:u.image.src="data/textures/MoveBlock.png";break;case s.Angle:u.image.src="data/textures/AngleBlock.png";break;case s.Thread:u.image.src="data/textures/ThreadBlock.png"}return u.gameState.blocks.push(u),u}return l(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.commandData.type===s.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.commandData.type=t.type,e.commandData.baseUnits=t.baseUnits,e.commandData.callCount=t.callCount,e.commandData.totalUnits=t.totalUnits,e.currentCallCount=t.callCount)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),m=function(t){function e(e,a,n,o,i,r,c){var h=t.call(this,e,a,n,o,i,r)||this;switch(h.updateData=function(t,e){h.callCount=t,h.baseUnits=e,h.totalUnits=h.baseUnits*h.callCount},h.mouseDown=!1,h.type=c,h.image=new Image,h.baseUnits=0,h.callCount=0,h.totalUnits=0,c){case s.Start:h.image.src="data/textures/StartBlock.png";break;case s.Move:h.image.src="data/textures/MoveBlock.png";break;case s.Angle:h.image.src="data/textures/AngleBlock.png";break;case s.Thread:h.image.src="data/textures/ThreadBlock.png"}return h.gameState.blocks.push(h),h}return l(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new u(this.gameState,this.x,this.y,this.h,this.w,this.baseUnits,this.callCount,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.fillStyle=this.color,this.gameState.ctx.fillRect(this.x,this.y,this.w,this.h),this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.fillStyle="black",this.gameState.ctx.font="15px Arial";var t=30;this.totalUnits>99?t=25:this.totalUnits<10&&(t=35),this.gameState.ctx.fillText(this.totalUnits.toString(),this.x+t,this.y+48)},e}(r),f=function(){var t=function(e,a){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var a in e)e.hasOwnProperty(a)&&(t[a]=e[a])})(e,a)};return function(e,a){function s(){this.constructor=e}t(e,a),e.prototype=null===a?Object.create(a):(s.prototype=a.prototype,new s)}}(),p=function(t){function e(e,a,s,o,i,r,c){var h=t.call(this,e,a,s,o,i,r)||this;switch(h.gameState=e,h.type=c,h.mouseDown=!0,h.set=!1,h.image=new Image,c){case n.Up:h.image.src="data/textures/UpArrow.png";break;case n.Down:h.image.src="data/textures/DownArrow.png";break;case n.Left:h.image.src="data/textures/LeftArrow.png";break;case n.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return f(e,t),e.prototype.mouseUp=function(){var t=this;if(this.gameState.blocks.forEach(function(e){e instanceof h&&e.flowType===n.Empty&&e.x<t.x+t.w&&e.x+e.w>t.x&&e.y<t.y+t.h&&e.h+e.y>t.y&&(t.x=e.x,t.y=e.y,t.set=!0,e.flowType=t.type)}),!this.set){var e=this.gameState.blocks.indexOf(this);this.gameState.blocks.splice(e,1)}},e.prototype.update=function(){this.mouseDown&&(this.x=this.gameState.mouseX-this.w/2,this.y=this.gameState.mouseY-this.h/2,this.set=!1)},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),g=function(t){function e(e,a,s,o,i,r,c){var h=t.call(this,e,a,s,o,i,r)||this;switch(h.type=c,h.mouseDown=!1,h.image=new Image,c){case n.Up:h.image.src="data/textures/UpArrow.png";break;case n.Down:h.image.src="data/textures/DownArrow.png";break;case n.Left:h.image.src="data/textures/LeftArrow.png";break;case n.Right:h.image.src="data/textures/RightArrow.png"}return h.gameState.blocks.push(h),h}return f(e,t),e.prototype.update=function(){this.mouseDown&&(this.mouseDown=!1,new p(this.gameState,this.x,this.y,this.h,this.w,this.Color,this.type))},e.prototype.draw=function(){this.gameState.ctx.translate(this.x,this.y),this.gameState.ctx.drawImage(this.image,0,0),this.gameState.ctx.translate(-this.x,-this.y),this.gameState.ctx.strokeStyle=this.color,this.gameState.ctx.rect(this.x,this.y,this.w,this.h)},e}(r),d=function(){function t(t,e,a,s,n,o,i){void 0===i&&(i=10),this.gameState=t,this.mouseDown=!1,this.maxUnits=s,this.snapAmount=i,this.updateDataCallBack=o,this.baseUnits=Math.round(this.maxUnits/this.snapAmount),this.type=n,this.barH=75,this.barW=10,this.barX=e,this.barY=a,this.barColor="thistle",this.sliderH=10,this.sliderW=15,this.sliderX=e,this.sliderY=a+this.barH/2-this.sliderH/2,this.sliderColor="purple",this.percentage=1-(this.sliderY-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.gameState.userInterfaces.push(this);var r=Math.round(this.value*this.maxUnits/this.baseUnits);this.updateDataCallBack(r,this.baseUnits)}return t.prototype.update=function(){if(this.mouseDown&&this.barY-this.sliderH/2<this.gameState.mouseY&&this.barY+this.barH-this.sliderH/2>this.gameState.mouseY){var t=this.gameState.mouseY;this.percentage=1-(t-this.barY+this.sliderH/2)/this.barH,this.value=Math.round(this.percentage*this.snapAmount)/this.snapAmount,this.sliderY=this.barH+this.barY-this.sliderH/2-this.value*this.barH;var e=Math.round(this.value*this.maxUnits/this.baseUnits);this.updateDataCallBack(e,this.baseUnits)}},t.prototype.draw=function(){this.gameState.ctx.fillStyle=this.barColor,this.gameState.ctx.fillRect(this.barX,this.barY,this.barW,this.barH),this.gameState.ctx.fillStyle=this.sliderColor,this.gameState.ctx.fillRect(this.sliderX-this.sliderH/4,this.sliderY,this.sliderW,this.sliderH)},t}(),w=function(){function t(t,e,a,s,n,o,i){this.gameState=t,this.x=e,this.y=a,this.h=s,this.w=n,this.maxUnits=o,this.threads=1,this.baseUnits=1,this.updateDataCallBack=i,this.mouseDown=!1,this.gameState.userInterfaces.push(this),this.updateDataCallBack(this.threads,this.baseUnits)}return t.prototype.recalculateExistingThreadCounts=function(){var t=[];this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t.push(e)}),t.sort(function(t,e){return t.totalUnits>e.totalUnits?1:e.totalUnits>t.totalUnits?-1:0});for(var e=0;e<t.length;e++)e+1<t[e].totalUnits&&t[e].totalUnits--},t.prototype.mouseUp=function(){var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(this.threads,this.baseUnits),this.recalculateExistingThreadCounts()},t.prototype.update=function(){if(this.mouseDown){this.mouseDown=!1;var t=1;this.gameState.blocks.forEach(function(e){e instanceof u&&e.type===s.Start&&t++}),this.threads=t,this.updateDataCallBack(this.threads,this.baseUnits)}},t.prototype.draw=function(){},t}();function y(t,e){var a,o;switch(e.currentCallCount=e.commandData.callCount,e.flowType){case n.Up:a=e.r-1,o=e.c;break;case n.Down:a=e.r+1,o=e.c;break;case n.Right:o=e.c+1,a=e.r;break;case n.Left:o=e.c-1,a=e.r}t.blocks.forEach(function(e){if(e instanceof h&&e.r===a&&e.c===o&&e.commandData.type!==s.Empty&&e.flowType!==n.Empty)switch(e.commandData.type){case s.Angle:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("angle"),e.currentCallCount--):y(t,e)}(t,e)},t.nextStack.push(e);break;case s.Move:e.call=function(){return function(t,e){e.currentCallCount>0?(console.log("move"),e.currentCallCount--):y(t,e)}(t,e)},t.nextStack.push(e);break;case s.Start:e.call=function(){return function(t,e){console.log("start"),y(t,e)}(t,e)},t.nextStack.push(e)}})}var b=new o;!function(t,e,a){for(var o=5,i=5,r=0,c=e.command_palette.block_height,l=e.command_palette.block_width,u=0;u<c;u++){for(var f=0;f<l;f++)new h(t,i,o,50,50,u,f,a),i+=55;o+=55,r=i,i=5}o+=20;for(var p=0;p<e.command_blocks.length;p++){switch(e.command_blocks[p]){case"start":var y=new m(t,i,o,50,50,"thistle",s.Start);new w(t,y.x,y.y,y.h,y.w,c*l,y.updateData);break;case"move":var b=new m(t,i,o,50,50,"thistle",s.Move);new d(t,i+20,o+60,100,s.Move,b.updateData);break;case"angle":var x=new m(t,i,o,50,50,"thistle",s.Angle);new d(t,i+20,o+60,360,s.Angle,x.updateData,8);break;case"thread":new m(t,i,o,50,50,"thistle",s.Thread);break;case"laser":new m(t,i,o,50,50,"green",s.Laser);break;case"scan":new m(t,i,o,50,50,"darkblue",s.Scan);break;case"grapple":new m(t,i,o,50,50,"maroon",s.Grapple)}i+=55}for(i=r+20,o=5,p=0;p<e.flow_blocks.length;p++){switch(e.flow_blocks[p]){case"up":new g(t,i,o,50,50,"yellow",n.Up);break;case"left":new g(t,i,o,50,50,"yellow",n.Left);break;case"right":new g(t,i,o,50,50,"yellow",n.Right);break;case"down":new g(t,i,o,50,50,"yellow",n.Down)}o+=55}}(b,i,"lightblue"),function(t){t.canvas.addEventListener("mousedown",function(){t.blocks.forEach(function(e){t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e instanceof u&&t.commandControl||e instanceof m&&t.commandControl||e instanceof p&&t.flowControl||e instanceof g&&t.flowControl?e.mouseDown=!0:e instanceof h&&(t.commandControl?e.commandData.type=s.Empty:t.flowControl&&(e.flowType=n.Empty)))}),t.userInterfaces.forEach(function(e){e instanceof d&&t.mouseY>e.sliderY&&t.mouseY<e.sliderY+e.sliderH&&t.mouseX>e.sliderX&&t.mouseX<e.sliderX+e.sliderW&&(e.mouseDown=!0),e instanceof w&&t.mouseY>e.y&&t.mouseY<e.y+e.h&&t.mouseX>e.x&&t.mouseX<e.x+e.w&&(e.mouseDown=!0)})},!1),t.canvas.addEventListener("mouseup",function(){t.blocks.forEach(function(t){(t instanceof u||t instanceof p)&&t.mouseDown&&(t.mouseDown=!1,t.mouseUp())}),t.userInterfaces.forEach(function(t){t.mouseDown=!1,t instanceof w&&t.mouseUp()})},!1),t.canvas.addEventListener("mousemove",function(e){t.mouseX=(e.clientX-t.rect.left)/(t.rect.right-t.rect.left)*t.canvas.width,t.mouseY=(e.clientY-t.rect.top)/(t.rect.bottom-t.rect.top)*t.canvas.height},!1),window.onkeyup=function(e){32===e.keyCode&&(t.flowControl?(t.flowControl=!1,t.commandControl=!0,console.log("Command Control!")):t.commandControl&&(t.commandControl=!1,t.flowControl=!0,console.log("Flow Control!"))),83===e.keyCode&&(t.programRunning?(t.programRunning=!1,t.nextStack=[]):(t.programRunning=!0,function(t,e){t.blocks.forEach(function(e){e instanceof h&&e.commandData.type===s.Start&&e.flowType!==n.Empty&&y(t,e)})}(t)))}}(b),setInterval(function(){b.blocks.forEach(function(t){t.update()}),b.userInterfaces.forEach(function(t){t.update()}),b.ctx.clearRect(0,0,b.canvas.width,b.canvas.height),b.ctx.beginPath(),b.userInterfaces.forEach(function(t){t.draw()}),b.blocks.forEach(function(t){t instanceof p||t.draw()}),b.blocks.forEach(function(t){t instanceof p&&t.draw()}),b.ctx.stroke();var t=b.nextStack;b.nextStack=[],t.length>0&&b.programRunning?t.forEach(function(t){t.currentCallCount>0?(t.call(),b.nextStack.push(t)):t.call()}):b.programRunning=!1},12)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,